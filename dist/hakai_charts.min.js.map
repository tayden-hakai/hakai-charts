{"version":3,"sources":["webpack:///hakai_charts.min.js","webpack:///webpack/bootstrap 83620798f1309724b066","webpack:///./index.js","webpack:///./~/simple-statistics/src/mean.js","webpack:///./~/simple-statistics/src/epsilon.js","webpack:///./~/simple-statistics/src/numeric_sort.js","webpack:///./~/simple-statistics/src/sum_nth_power_deviations.js","webpack:///./~/simple-statistics/src/factorial.js","webpack:///./~/simple-statistics/src/sample_standard_deviation.js","webpack:///./~/simple-statistics/src/sample_variance.js","webpack:///./~/simple-statistics/src/binomial_distribution.js","webpack:///./~/simple-statistics/src/inverse_error_function.js","webpack:///./~/simple-statistics/src/median.js","webpack:///./~/simple-statistics/src/quantile.js","webpack:///./~/simple-statistics/src/quantile_sorted.js","webpack:///./~/simple-statistics/src/sample_covariance.js","webpack:///./~/simple-statistics/src/shuffle.js","webpack:///./~/simple-statistics/src/shuffle_in_place.js","webpack:///./~/simple-statistics/src/sorted_unique_count.js","webpack:///./~/simple-statistics/src/standard_deviation.js","webpack:///./~/simple-statistics/src/standard_normal_table.js","webpack:///./~/simple-statistics/src/sum.js","webpack:///./~/simple-statistics/src/variance.js","webpack:///./~/css-loader/lib/css-base.js","webpack:///./~/simple-statistics/index.js","webpack:///./~/simple-statistics/src/bayesian_classifier.js","webpack:///./~/simple-statistics/src/bernoulli_distribution.js","webpack:///./~/simple-statistics/src/chi_squared_distribution_table.js","webpack:///./~/simple-statistics/src/chi_squared_goodness_of_fit.js","webpack:///./~/simple-statistics/src/chunk.js","webpack:///./~/simple-statistics/src/ckmeans.js","webpack:///./~/simple-statistics/src/cumulative_std_normal_probability.js","webpack:///./~/simple-statistics/src/error_function.js","webpack:///./~/simple-statistics/src/geometric_mean.js","webpack:///./~/simple-statistics/src/harmonic_mean.js","webpack:///./~/simple-statistics/src/interquartile_range.js","webpack:///./~/simple-statistics/src/linear_regression.js","webpack:///./~/simple-statistics/src/linear_regression_line.js","webpack:///./~/simple-statistics/src/mad.js","webpack:///./~/simple-statistics/src/max.js","webpack:///./~/simple-statistics/src/min.js","webpack:///./~/simple-statistics/src/mixin.js","webpack:///./~/simple-statistics/src/mode.js","webpack:///./~/simple-statistics/src/perceptron.js","webpack:///./~/simple-statistics/src/poisson_distribution.js","webpack:///./~/simple-statistics/src/probit.js","webpack:///./~/simple-statistics/src/r_squared.js","webpack:///./~/simple-statistics/src/root_mean_square.js","webpack:///./~/simple-statistics/src/sample.js","webpack:///./~/simple-statistics/src/sample_correlation.js","webpack:///./~/simple-statistics/src/sample_skewness.js","webpack:///./~/simple-statistics/src/t_test.js","webpack:///./~/simple-statistics/src/t_test_two_sample.js","webpack:///./~/simple-statistics/src/z_score.js","webpack:///./src/js/scatterplot.js","webpack:///./src/styles/scatterplot.scss","webpack:///./~/style-loader/addStyles.js","webpack:///./src/styles/scatterplot.scss?608c"],"names":["hakaiCharts","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","scatterplot","mean","x","length","sum","epsilon","numericSort","array","slice","sort","a","b","sumNthPowerDeviations","n","meanValue","i","Math","pow","factorial","accumulator","sampleStandardDeviation","sqrt","sampleVariance","sumSquaredDeviationsValue","besselsCorrection","binomialDistribution","trials","probability","cumulativeProbability","cells","inverseErrorFunction","PI","inv","log","median","sorted","quantile","sample","results","quantileSorted","idx","ceil","sampleCovariance","y","xmean","ymean","shuffle","randomSource","shuffleInPlace","random","temporary","index","floor","sortedUniqueCount","input","lastSeenValue","uniqueValueCount","standardDeviation","variance","cumulativeDistribution","z","tmp","round","SQRT_2PI","exp","standardNormalTable","push","value","list","toString","result","this","item","join","mediaQuery","alreadyImportedModules","ss","linearRegression","linearRegressionLine","rSquared","mode","min","max","iqr","interquartileRange","medianAbsoluteDeviation","mad","chunk","ckmeans","sampleCorrelation","sampleSkewness","geometricMean","harmonicMean","average","rootMeanSquare","rms","tTest","tTestTwoSample","bayesian","perceptron","bernoulliDistribution","poissonDistribution","chiSquaredGoodnessOfFit","zScore","cumulativeStdNormalProbability","errorFunction","erf","probit","mixin","BayesianClassifier","totalCount","data","prototype","train","category","k","v","undefined","score","odds","oddsSums","combination","chiSquaredDistributionTable",1,0.995,0.99,0.975,0.95,0.9,0.5,0.1,0.05,0.025,0.01,0.005,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,40,50,60,70,80,90,100,"distributionType","significance","degreesOfFreedom","inputMean","chiSquared","hypothesizedDistribution","observedFrequencies","expectedFrequencies","pop","chunkSize","output","start","makeMatrix","columns","rows","matrix","column","j","nClusters","Error","uniqueCount","backtrackMatrix","cluster","firstClusterMean","sortedIdx","squaredDifference","newSum","sumSquaredDistances","meanXJ","clusters","clusterRight","clusterLeft","absZ","abs","toFixed","t","tau","reciprocalSum","dataLength","point","sumX","sumY","sumXX","sumXY","mb","medianValue","medianAbsoluteDeviations","wrap","method","args","Array","apply","arguments","unshift","support","Object","defineProperty","defineProperties","extending","arrayMethods","configurable","enumerable","writable","last","maxSeen","seenThis","PerceptronModel","weights","bias","predict","features","label","prediction","gradient","lambda","E","func","sumOfSquares","err","shuffled","cov","xstd","ystd","cubedS","sumCubedDeviations","sampleMean","sd","rootN","sampleX","sampleY","difference","meanX","meanY","weightedVariance","parent","log10","d","getY","regLine","_xLog","_yLog","calculateStats","ssData","map","xD","_xAccessor","yD","_yAccessor","correlation","covariance","reg","_chart","_svg","d3","select","append","attr","_width","_margin","left","right","_height","top","bottom","cleanData","_data","filter","isNaN","_x","domain","extent","range","_y","_xAxis","svg","axis","scale","orient","tickSize","_yAxis","text","_xLabel","_yLabel","stats","_regLine","_rSquared","_correlation","_covariance","style","marks","selectAll","enter","_radius","_color","_colorAccessor","_keyAccessor","linear","category10","key","render","redraw","transition","duration","g","exit","remove","width","val","height","margin","xAccessor","yAccessor","xLabel","yLabel","xLog","yLog","color","colorAccessor","keyAccessor","radius","addStylesToDom","styles","options","domStyle","stylesInDom","refs","parts","addStyle","listToStyles","newStyles","css","media","sourceMap","part","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","insertBefore","appendChild","firstChild","removeStyleElement","parentNode","removeChild","indexOf","splice","createStyleElement","document","createElement","type","createLinkElement","linkElement","rel","obj","update","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","bind","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","href","applyToTag","newObj","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","setAttribute","unescape","encodeURIComponent","JSON","stringify","blob","oldSrc","memoize","fn","memo","isOldIE","test","window","navigator","userAgent","toLowerCase","getElementsByTagName","newList","mayRemove","textStore","replacement","Boolean","content","locals"],"mappings":"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","file":"hakai_charts.min.js","sourcesContent":["var hakaiCharts =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/**\n\t * Main module used for namespacing all charts under hakaiCharts\n\t * @module hakaiCharts\n\t */\n\tmodule.exports = {\n\t  // parallelCoordinates: require('./src/js/parallel_coordinates'),\n\t  scatterplot: __webpack_require__(52)\n\t};\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar sum = __webpack_require__(19);\n\t\n\t/**\n\t * The mean, _also known as average_,\n\t * is the sum of all values over the number of values.\n\t * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n\t * a method of finding a typical or central value of a set of numbers.\n\t *\n\t * This runs on `O(n)`, linear time in respect to the array\n\t *\n\t * @param {Array<number>} x input values\n\t * @returns {number} mean\n\t * @example\n\t * console.log(mean([0, 10])); // 5\n\t */\n\tfunction mean(x) {\n\t  // The mean of no numbers is null\n\t  if (x.length === 0) {\n\t    return null;\n\t  }\n\t\n\t  return sum(x) / x.length;\n\t}\n\t\n\tmodule.exports = mean;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * We use `ε`, epsilon, as a stopping criterion when we want to iterate\n\t * until we're \"close enough\". Epsilon is a very small number: for\n\t * simple statistics, that number is **0.0001**\n\t *\n\t * This is used in calculations like the binomialDistribution, in which\n\t * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):\n\t * it progresses until it is close enough.\n\t *\n\t * Below is an example of using epsilon in [gradient descent](https://en.wikipedia.org/wiki/Gradient_descent),\n\t * where we're trying to find a local minimum of a function's derivative,\n\t * given by the `fDerivative` method.\n\t *\n\t * @example\n\t * // From calculation, we expect that the local minimum occurs at x=9/4\n\t * var x_old = 0;\n\t * // The algorithm starts at x=6\n\t * var x_new = 6;\n\t * var stepSize = 0.01;\n\t *\n\t * function fDerivative(x) {\n\t *   return 4 * Math.pow(x, 3) - 9 * Math.pow(x, 2);\n\t * }\n\t *\n\t * // The loop runs until the difference between the previous\n\t * // value and the current value is smaller than epsilon - a rough\n\t * // meaure of 'close enough'\n\t * while (Math.abs(x_new - x_old) > ss.epsilon) {\n\t *   x_old = x_new;\n\t *   x_new = x_old - stepSize * fDerivative(x_old);\n\t * }\n\t *\n\t * console.log('Local minimum occurs at', x_new);\n\t */\n\t\n\tvar epsilon = 0.0001;\n\t\n\tmodule.exports = epsilon;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Sort an array of numbers by their numeric value, ensuring that the\n\t * array is not changed in place.\n\t *\n\t * This is necessary because the default behavior of .sort\n\t * in JavaScript is to sort arrays as string values\n\t *\n\t *     [1, 10, 12, 102, 20].sort()\n\t *     // output\n\t *     [1, 10, 102, 12, 20]\n\t *\n\t * @param {Array<number>} array input array\n\t * @return {Array<number>} sorted array\n\t * @private\n\t * @example\n\t * numericSort([3, 2, 1]) // [1, 2, 3]\n\t */\n\t\n\tfunction numericSort(array) {\n\t    return array\n\t    // ensure the array is changed in-place\n\t    .slice()\n\t    // comparator function that treats input as numeric\n\t    .sort(function (a, b) {\n\t        return a - b;\n\t    });\n\t}\n\t\n\tmodule.exports = numericSort;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar mean = __webpack_require__(1);\n\t\n\t/**\n\t * The sum of deviations to the Nth power.\n\t * When n=2 it's the sum of squared deviations.\n\t * When n=3 it's the sum of cubed deviations.\n\t *\n\t * @param {Array<number>} x\n\t * @param {number} n power\n\t * @returns {number} sum of nth power deviations\n\t * @example\n\t * var input = [1, 2, 3];\n\t * // since the variance of a set is the mean squared\n\t * // deviations, we can calculate that with sumNthPowerDeviations:\n\t * var variance = sumNthPowerDeviations(input) / input.length;\n\t */\n\tfunction sumNthPowerDeviations(x, n) {\n\t    var meanValue = mean(x),\n\t        sum = 0;\n\t\n\t    for (var i = 0; i < x.length; i++) {\n\t        sum += Math.pow(x[i] - meanValue, n);\n\t    }\n\t\n\t    return sum;\n\t}\n\t\n\tmodule.exports = sumNthPowerDeviations;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive\n\t * integers less than or equal to n. Often factorial is implemented\n\t * recursively, but this iterative approach is significantly faster\n\t * and simpler.\n\t *\n\t * @param {number} n input\n\t * @returns {number} factorial: n!\n\t * @example\n\t * console.log(factorial(5)); // 120\n\t */\n\t\n\tfunction factorial(n) {\n\t\n\t    // factorial is mathematically undefined for negative numbers\n\t    if (n < 0) {\n\t        return null;\n\t    }\n\t\n\t    // typically you'll expand the factorial function going down, like\n\t    // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n\t    // counting from 2 up to the number in question, and since anything\n\t    // multiplied by 1 is itself, the loop only needs to start at 2.\n\t    var accumulator = 1;\n\t    for (var i = 2; i <= n; i++) {\n\t        // for each number up to and including the number `n`, multiply\n\t        // the accumulator my that number.\n\t        accumulator *= i;\n\t    }\n\t    return accumulator;\n\t}\n\t\n\tmodule.exports = factorial;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar sampleVariance = __webpack_require__(7);\n\t\n\t/**\n\t * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n\t * is the square root of the variance.\n\t *\n\t * @param {Array<number>} x input array\n\t * @returns {number} sample standard deviation\n\t * @example\n\t * ss.sampleStandardDeviation([2, 4, 4, 4, 5, 5, 7, 9]);\n\t * //= 2.138\n\t */\n\tfunction sampleStandardDeviation(x) {\n\t  // The standard deviation of no numbers is null\n\t  if (x.length <= 1) {\n\t    return null;\n\t  }\n\t\n\t  return Math.sqrt(sampleVariance(x));\n\t}\n\t\n\tmodule.exports = sampleStandardDeviation;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar sumNthPowerDeviations = __webpack_require__(4);\n\t\n\t/*\n\t * The [sample variance](https://en.wikipedia.org/wiki/Variance#Sample_variance)\n\t * is the sum of squared deviations from the mean. The sample variance\n\t * is distinguished from the variance by the usage of [Bessel's Correction](https://en.wikipedia.org/wiki/Bessel's_correction):\n\t * instead of dividing the sum of squared deviations by the length of the input,\n\t * it is divided by the length minus one. This corrects the bias in estimating\n\t * a value from a set that you don't know if full.\n\t *\n\t * References:\n\t * * [Wolfram MathWorld on Sample Variance](http://mathworld.wolfram.com/SampleVariance.html)\n\t *\n\t * @param {Array<number>} x input array\n\t * @return {number} sample variance\n\t * @example\n\t * sampleVariance([1, 2, 3, 4, 5]); //= 2.5\n\t */\n\tfunction sampleVariance(x) {\n\t  // The variance of no numbers is null\n\t  if (x.length <= 1) {\n\t    return null;\n\t  }\n\t\n\t  var sumSquaredDeviationsValue = sumNthPowerDeviations(x, 2);\n\t\n\t  // this is Bessels' Correction: an adjustment made to sample statistics\n\t  // that allows for the reduced degree of freedom entailed in calculating\n\t  // values from samples rather than complete populations.\n\t  var besselsCorrection = x.length - 1;\n\t\n\t  // Find the mean value of that list\n\t  return sumSquaredDeviationsValue / besselsCorrection;\n\t}\n\t\n\tmodule.exports = sampleVariance;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar epsilon = __webpack_require__(2);\n\tvar factorial = __webpack_require__(5);\n\t\n\t/**\n\t * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n\t * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n\t * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n\t * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n\t *\n\t * @param {number} trials number of trials to simulate\n\t * @param {number} probability\n\t * @returns {number} output\n\t */\n\tfunction binomialDistribution(trials, probability) {\n\t    // Check that `p` is a valid probability (0 ≤ p ≤ 1),\n\t    // that `n` is an integer, strictly positive.\n\t    if (probability < 0 || probability > 1 || trials <= 0 || trials % 1 !== 0) {\n\t        return null;\n\t    }\n\t\n\t    // We initialize `x`, the random variable, and `accumulator`, an accumulator\n\t    // for the cumulative distribution function to 0. `distribution_functions`\n\t    // is the object we'll return with the `probability_of_x` and the\n\t    // `cumulativeProbability_of_x`, as well as the calculated mean &\n\t    // variance. We iterate until the `cumulativeProbability_of_x` is\n\t    // within `epsilon` of 1.0.\n\t    var x = 0,\n\t        cumulativeProbability = 0,\n\t        cells = {};\n\t\n\t    // This algorithm iterates through each potential outcome,\n\t    // until the `cumulativeProbability` is very close to 1, at\n\t    // which point we've defined the vast majority of outcomes\n\t    do {\n\t        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n\t        cells[x] = factorial(trials) / (factorial(x) * factorial(trials - x)) * (Math.pow(probability, x) * Math.pow(1 - probability, trials - x));\n\t        cumulativeProbability += cells[x];\n\t        x++;\n\t        // when the cumulativeProbability is nearly 1, we've calculated\n\t        // the useful range of this distribution\n\t    } while (cumulativeProbability < 1 - epsilon);\n\t\n\t    return cells;\n\t}\n\t\n\tmodule.exports = binomialDistribution;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * The Inverse [Gaussian error function](http://en.wikipedia.org/wiki/Error_function)\n\t * returns a numerical approximation to the value that would have caused\n\t * `errorFunction()` to return x.\n\t *\n\t * @param {number} x value of error function\n\t * @returns {number} estimated inverted value\n\t */\n\t\n\tfunction inverseErrorFunction(x) {\n\t    var a = 8 * (Math.PI - 3) / (3 * Math.PI * (4 - Math.PI));\n\t\n\t    var inv = Math.sqrt(Math.sqrt(Math.pow(2 / (Math.PI * a) + Math.log(1 - x * x) / 2, 2) - Math.log(1 - x * x) / a) - (2 / (Math.PI * a) + Math.log(1 - x * x) / 2));\n\t\n\t    if (x >= 0) {\n\t        return inv;\n\t    } else {\n\t        return -inv;\n\t    }\n\t}\n\t\n\tmodule.exports = inverseErrorFunction;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar numericSort = __webpack_require__(3);\n\t\n\t/**\n\t * The [median](http://en.wikipedia.org/wiki/Median) is\n\t * the middle number of a list. This is often a good indicator of 'the middle'\n\t * when there are outliers that skew the `mean()` value.\n\t * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n\t * a method of finding a typical or central value of a set of numbers.\n\t *\n\t * The median isn't necessarily one of the elements in the list: the value\n\t * can be the average of two elements if the list has an even length\n\t * and the two central values are different.\n\t *\n\t * @param {Array<number>} x input\n\t * @returns {number} median value\n\t * @example\n\t * var incomes = [10, 2, 5, 100, 2, 1];\n\t * median(incomes); //= 3.5\n\t */\n\tfunction median(x) {\n\t    // The median of an empty list is null\n\t    if (x.length === 0) {\n\t        return null;\n\t    }\n\t\n\t    // Sorting the array makes it easy to find the center, but\n\t    // use `.slice()` to ensure the original array `x` is not modified\n\t    var sorted = numericSort(x);\n\t\n\t    // If the length of the list is odd, it's the central number\n\t    if (sorted.length % 2 === 1) {\n\t        return sorted[(sorted.length - 1) / 2];\n\t        // Otherwise, the median is the average of the two numbers\n\t        // at the center of the list\n\t    } else {\n\t            var a = sorted[sorted.length / 2 - 1];\n\t            var b = sorted[sorted.length / 2];\n\t            return (a + b) / 2;\n\t        }\n\t}\n\t\n\tmodule.exports = median;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar quantileSorted = __webpack_require__(12);\n\tvar numericSort = __webpack_require__(3);\n\t\n\t/**\n\t * The [quantile](https://en.wikipedia.org/wiki/Quantile):\n\t * this is a population quantile, since we assume to know the entire\n\t * dataset in this library. This is an implementation of the\n\t * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n\t * algorithm from wikipedia.\n\t *\n\t * Sample is a one-dimensional array of numbers,\n\t * and p is either a decimal number from 0 to 1 or an array of decimal\n\t * numbers from 0 to 1.\n\t * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing\n\t * with decimal values.\n\t * When p is an array, the result of the function is also an array containing the appropriate\n\t * quantiles in input order\n\t *\n\t * @param {Array<number>} sample a sample from the population\n\t * @param {number} p the desired quantile, as a number between 0 and 1\n\t * @returns {number} quantile\n\t * @example\n\t * var data = [3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20];\n\t * quantile(data, 1); //= max(data);\n\t * quantile(data, 0); //= min(data);\n\t * quantile(data, 0.5); //= 9\n\t */\n\tfunction quantile(sample, p) {\n\t\n\t    // We can't derive quantiles from an empty list\n\t    if (sample.length === 0) {\n\t        return null;\n\t    }\n\t\n\t    // Sort a copy of the array. We'll need a sorted array to index\n\t    // the values in sorted order.\n\t    var sorted = numericSort(sample);\n\t\n\t    if (p.length) {\n\t        // Initialize the result array\n\t        var results = [];\n\t        // For each requested quantile\n\t        for (var i = 0; i < p.length; i++) {\n\t            results[i] = quantileSorted(sorted, p[i]);\n\t        }\n\t        return results;\n\t    } else {\n\t        return quantileSorted(sorted, p);\n\t    }\n\t}\n\t\n\tmodule.exports = quantile;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * This is the internal implementation of quantiles: when you know\n\t * that the order is sorted, you don't need to re-sort it, and the computations\n\t * are faster.\n\t *\n\t * @param {Array<number>} sample input data\n\t * @param {number} p desired quantile: a number between 0 to 1, inclusive\n\t * @returns {number} quantile value\n\t * @example\n\t * var data = [3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20];\n\t * quantileSorted(data, 1); //= max(data);\n\t * quantileSorted(data, 0); //= min(data);\n\t * quantileSorted(data, 0.5); //= 9\n\t */\n\t\n\tfunction quantileSorted(sample, p) {\n\t    var idx = sample.length * p;\n\t    if (p < 0 || p > 1) {\n\t        return null;\n\t    } else if (p === 1) {\n\t        // If p is 1, directly return the last element\n\t        return sample[sample.length - 1];\n\t    } else if (p === 0) {\n\t        // If p is 0, directly return the first element\n\t        return sample[0];\n\t    } else if (idx % 1 !== 0) {\n\t        // If p is not integer, return the next element in array\n\t        return sample[Math.ceil(idx) - 1];\n\t    } else if (sample.length % 2 === 0) {\n\t        // If the list has even-length, we'll take the average of this number\n\t        // and the next value, if there is one\n\t        return (sample[idx - 1] + sample[idx]) / 2;\n\t    } else {\n\t        // Finally, in the simple case of an integer value\n\t        // with an odd-length list, return the sample value at the index.\n\t        return sample[idx];\n\t    }\n\t}\n\t\n\tmodule.exports = quantileSorted;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar mean = __webpack_require__(1);\n\t\n\t/**\n\t * [Sample covariance](https://en.wikipedia.org/wiki/Sample_mean_and_sampleCovariance) of two datasets:\n\t * how much do the two datasets move together?\n\t * x and y are two datasets, represented as arrays of numbers.\n\t *\n\t * @param {Array<number>} x first input\n\t * @param {Array<number>} y second input\n\t * @returns {number} sample covariance\n\t * @example\n\t * var x = [1, 2, 3, 4, 5, 6];\n\t * var y = [6, 5, 4, 3, 2, 1];\n\t * sampleCovariance(x, y); //= -3.5\n\t */\n\tfunction sampleCovariance(x, y) {\n\t\n\t    // The two datasets must have the same length which must be more than 1\n\t    if (x.length <= 1 || x.length !== y.length) {\n\t        return null;\n\t    }\n\t\n\t    // determine the mean of each dataset so that we can judge each\n\t    // value of the dataset fairly as the difference from the mean. this\n\t    // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance\n\t    // does not suffer because of the difference in absolute values\n\t    var xmean = mean(x),\n\t        ymean = mean(y),\n\t        sum = 0;\n\t\n\t    // for each pair of values, the covariance increases when their\n\t    // difference from the mean is associated - if both are well above\n\t    // or if both are well below\n\t    // the mean, the covariance increases significantly.\n\t    for (var i = 0; i < x.length; i++) {\n\t        sum += (x[i] - xmean) * (y[i] - ymean);\n\t    }\n\t\n\t    // this is Bessels' Correction: an adjustment made to sample statistics\n\t    // that allows for the reduced degree of freedom entailed in calculating\n\t    // values from samples rather than complete populations.\n\t    var besselsCorrection = x.length - 1;\n\t\n\t    // the covariance is weighted by the length of the datasets.\n\t    return sum / besselsCorrection;\n\t}\n\t\n\tmodule.exports = sampleCovariance;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar shuffleInPlace = __webpack_require__(15);\n\t\n\t/*\n\t * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n\t * is a fast way to create a random permutation of a finite set. This is\n\t * a function around `shuffle_in_place` that adds the guarantee that\n\t * it will not modify its input.\n\t *\n\t * @param {Array} sample an array of any kind of element\n\t * @param {Function} [randomSource=Math.random] an optional entropy source\n\t * @return {Array} shuffled version of input\n\t * @example\n\t * var shuffled = shuffle([1, 2, 3, 4]);\n\t * shuffled; // = [2, 3, 1, 4] or any other random permutation\n\t */\n\tfunction shuffle(sample, randomSource) {\n\t  // slice the original array so that it is not modified\n\t  sample = sample.slice();\n\t\n\t  // and then shuffle that shallow-copied array, in place\n\t  return shuffleInPlace(sample.slice(), randomSource);\n\t}\n\t\n\tmodule.exports = shuffle;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/*\n\t * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n\t * in-place - which means that it **will change the order of the original\n\t * array by reference**.\n\t *\n\t * This is an algorithm that generates a random [permutation](https://en.wikipedia.org/wiki/Permutation)\n\t * of a set.\n\t *\n\t * @param {Array} sample input array\n\t * @param {Function} [randomSource=Math.random] an optional source of entropy\n\t * @returns {Array} sample\n\t * @example\n\t * var sample = [1, 2, 3, 4];\n\t * shuffleInPlace(sample);\n\t * // sample is shuffled to a value like [2, 1, 4, 3]\n\t */\n\t\n\tfunction shuffleInPlace(sample, randomSource) {\n\t\n\t    // a custom random number source can be provided if you want to use\n\t    // a fixed seed or another random number generator, like\n\t    // [random-js](https://www.npmjs.org/package/random-js)\n\t    randomSource = randomSource || Math.random;\n\t\n\t    // store the current length of the sample to determine\n\t    // when no elements remain to shuffle.\n\t    var length = sample.length;\n\t\n\t    // temporary is used to hold an item when it is being\n\t    // swapped between indices.\n\t    var temporary;\n\t\n\t    // The index to swap at each stage.\n\t    var index;\n\t\n\t    // While there are still items to shuffle\n\t    while (length > 0) {\n\t        // chose a random index within the subset of the array\n\t        // that is not yet shuffled\n\t        index = Math.floor(randomSource() * length--);\n\t\n\t        // store the value that we'll move temporarily\n\t        temporary = sample[length];\n\t\n\t        // swap the value at `sample[length]` with `sample[index]`\n\t        sample[length] = sample[index];\n\t        sample[index] = temporary;\n\t    }\n\t\n\t    return sample;\n\t}\n\t\n\tmodule.exports = shuffleInPlace;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * For a sorted input, counting the number of unique values\n\t * is possible in constant time and constant memory. This is\n\t * a simple implementation of the algorithm.\n\t *\n\t * Values are compared with `===`, so objects and non-primitive objects\n\t * are not handled in any special way.\n\t *\n\t * @param {Array} input an array of primitive values.\n\t * @returns {number} count of unique values\n\t * @example\n\t * sortedUniqueCount([1, 2, 3]); // 3\n\t * sortedUniqueCount([1, 1, 1]); // 1\n\t */\n\t\n\tfunction sortedUniqueCount(input) {\n\t    var uniqueValueCount = 0,\n\t        lastSeenValue;\n\t    for (var i = 0; i < input.length; i++) {\n\t        if (i === 0 || input[i] !== lastSeenValue) {\n\t            lastSeenValue = input[i];\n\t            uniqueValueCount++;\n\t        }\n\t    }\n\t    return uniqueValueCount;\n\t}\n\t\n\tmodule.exports = sortedUniqueCount;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar variance = __webpack_require__(20);\n\t\n\t/**\n\t * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n\t * is the square root of the variance. It's useful for measuring the amount\n\t * of variation or dispersion in a set of values.\n\t *\n\t * Standard deviation is only appropriate for full-population knowledge: for\n\t * samples of a population, {@link sampleStandardDeviation} is\n\t * more appropriate.\n\t *\n\t * @param {Array<number>} x input\n\t * @returns {number} standard deviation\n\t * @example\n\t * var scores = [2, 4, 4, 4, 5, 5, 7, 9];\n\t * variance(scores); //= 4\n\t * standardDeviation(scores); //= 2\n\t */\n\tfunction standardDeviation(x) {\n\t  // The standard deviation of no numbers is null\n\t  if (x.length === 0) {\n\t    return null;\n\t  }\n\t\n\t  return Math.sqrt(variance(x));\n\t}\n\t\n\tmodule.exports = standardDeviation;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar SQRT_2PI = Math.sqrt(2 * Math.PI);\n\t\n\tfunction cumulativeDistribution(z) {\n\t    var sum = z,\n\t        tmp = z;\n\t\n\t    // 15 iterations are enough for 4-digit precision\n\t    for (var i = 1; i < 15; i++) {\n\t        tmp *= z * z / (2 * i + 1);\n\t        sum += tmp;\n\t    }\n\t    return Math.round((0.5 + sum / SQRT_2PI * Math.exp(-z * z / 2)) * 1e4) / 1e4;\n\t}\n\t\n\t/**\n\t * A standard normal table, also called the unit normal table or Z table,\n\t * is a mathematical table for the values of Φ (phi), which are the values of\n\t * the cumulative distribution function of the normal distribution.\n\t * It is used to find the probability that a statistic is observed below,\n\t * above, or between values on the standard normal distribution, and by\n\t * extension, any normal distribution.\n\t *\n\t * The probabilities are calculated using the\n\t * [Cumulative distribution function](https://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function).\n\t * The table used is the cumulative, and not cumulative from 0 to mean\n\t * (even though the latter has 5 digits precision, instead of 4).\n\t */\n\tvar standardNormalTable = [];\n\t\n\tfor (var z = 0; z <= 3.09; z += 0.01) {\n\t    standardNormalTable.push(cumulativeDistribution(z));\n\t}\n\t\n\tmodule.exports = standardNormalTable;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * The [sum](https://en.wikipedia.org/wiki/Summation) of an array\n\t * is the result of adding all numbers together, starting from zero.\n\t *\n\t * This runs on `O(n)`, linear time in respect to the array\n\t *\n\t * @param {Array<number>} x input\n\t * @return {number} sum of all input numbers\n\t * @example\n\t * console.log(sum([1, 2, 3])); // 6\n\t */\n\t\n\tfunction sum(x) {\n\t    var value = 0;\n\t    for (var i = 0; i < x.length; i++) {\n\t        value += x[i];\n\t    }\n\t    return value;\n\t}\n\t\n\tmodule.exports = sum;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar sumNthPowerDeviations = __webpack_require__(4);\n\t\n\t/**\n\t * The [variance](http://en.wikipedia.org/wiki/Variance)\n\t * is the sum of squared deviations from the mean.\n\t *\n\t * This is an implementation of variance, not sample variance:\n\t * see the `sampleVariance` method if you want a sample measure.\n\t *\n\t * @param {Array<number>} x a population\n\t * @returns {number} variance: a value greater than or equal to zero.\n\t * zero indicates that all values are identical.\n\t * @example\n\t * ss.variance([1, 2, 3, 4, 5, 6]); //= 2.917\n\t */\n\tfunction variance(x) {\n\t  // The variance of no numbers is null\n\t  if (x.length === 0) {\n\t    return null;\n\t  }\n\t\n\t  // Find the mean of squared deviations between the\n\t  // mean value and each value.\n\t  return sumNthPowerDeviations(x, 2) / x.length;\n\t}\n\t\n\tmodule.exports = variance;\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\n\t// css base code, injected by the css-loader\n\tmodule.exports = function () {\n\t\tvar list = [];\n\t\n\t\t// return the list of modules as css string\n\t\tlist.toString = function toString() {\n\t\t\tvar result = [];\n\t\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\t\tvar item = this[i];\n\t\t\t\tif (item[2]) {\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(item[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result.join(\"\");\n\t\t};\n\t\n\t\t// import a list of modules into the list\n\t\tlist.i = function (modules, mediaQuery) {\n\t\t\tif (typeof modules === \"string\") modules = [[null, modules, \"\"]];\n\t\t\tvar alreadyImportedModules = {};\n\t\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\t\tvar id = this[i][0];\n\t\t\t\tif (typeof id === \"number\") alreadyImportedModules[id] = true;\n\t\t\t}\n\t\t\tfor (i = 0; i < modules.length; i++) {\n\t\t\t\tvar item = modules[i];\n\t\t\t\t// skip already imported module\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\t\tif (typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\t\tif (mediaQuery && !item[2]) {\n\t\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t\t} else if (mediaQuery) {\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t\t}\n\t\t\t\t\tlist.push(item);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn list;\n\t};\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t// # simple-statistics\n\t//\n\t// A simple, literate statistics system.\n\t\n\tvar ss = module.exports = {};\n\t\n\t// Linear Regression\n\tss.linearRegression = __webpack_require__(34);\n\tss.linearRegressionLine = __webpack_require__(35);\n\tss.standardDeviation = __webpack_require__(17);\n\tss.rSquared = __webpack_require__(44);\n\tss.mode = __webpack_require__(40);\n\tss.min = __webpack_require__(38);\n\tss.max = __webpack_require__(37);\n\tss.sum = __webpack_require__(19);\n\tss.quantile = __webpack_require__(11);\n\tss.quantileSorted = __webpack_require__(12);\n\tss.iqr = ss.interquartileRange = __webpack_require__(33);\n\tss.medianAbsoluteDeviation = ss.mad = __webpack_require__(36);\n\tss.chunk = __webpack_require__(27);\n\tss.shuffle = __webpack_require__(14);\n\tss.shuffleInPlace = __webpack_require__(15);\n\tss.sample = __webpack_require__(46);\n\tss.ckmeans = __webpack_require__(28);\n\tss.sortedUniqueCount = __webpack_require__(16);\n\tss.sumNthPowerDeviations = __webpack_require__(4);\n\t\n\t// sample statistics\n\tss.sampleCovariance = __webpack_require__(13);\n\tss.sampleCorrelation = __webpack_require__(47);\n\tss.sampleVariance = __webpack_require__(7);\n\tss.sampleStandardDeviation = __webpack_require__(6);\n\tss.sampleSkewness = __webpack_require__(48);\n\t\n\t// measures of centrality\n\tss.geometricMean = __webpack_require__(31);\n\tss.harmonicMean = __webpack_require__(32);\n\tss.mean = ss.average = __webpack_require__(1);\n\tss.median = __webpack_require__(10);\n\t\n\tss.rootMeanSquare = ss.rms = __webpack_require__(45);\n\tss.variance = __webpack_require__(20);\n\tss.tTest = __webpack_require__(49);\n\tss.tTestTwoSample = __webpack_require__(50);\n\t// ss.jenks = require('./src/jenks');\n\t\n\t// Classifiers\n\tss.bayesian = __webpack_require__(23);\n\tss.perceptron = __webpack_require__(41);\n\t\n\t// Distribution-related methods\n\tss.epsilon = __webpack_require__(2); // We make ε available to the test suite.\n\tss.factorial = __webpack_require__(5);\n\tss.bernoulliDistribution = __webpack_require__(24);\n\tss.binomialDistribution = __webpack_require__(8);\n\tss.poissonDistribution = __webpack_require__(42);\n\tss.chiSquaredGoodnessOfFit = __webpack_require__(26);\n\t\n\t// Normal distribution\n\tss.zScore = __webpack_require__(51);\n\tss.cumulativeStdNormalProbability = __webpack_require__(29);\n\tss.standardNormalTable = __webpack_require__(18);\n\tss.errorFunction = ss.erf = __webpack_require__(30);\n\tss.inverseErrorFunction = __webpack_require__(9);\n\tss.probit = __webpack_require__(43);\n\tss.mixin = __webpack_require__(39);\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * [Bayesian Classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier)\n\t *\n\t * This is a naïve bayesian classifier that takes\n\t * singly-nested objects.\n\t *\n\t * @class\n\t * @example\n\t * var bayes = new BayesianClassifier();\n\t * bayes.train({\n\t *   species: 'Cat'\n\t * }, 'animal');\n\t * var result = bayes.score({\n\t *   species: 'Cat'\n\t * })\n\t * // result\n\t * // {\n\t * //   animal: 1\n\t * // }\n\t */\n\t\n\tfunction BayesianClassifier() {\n\t    // The number of items that are currently\n\t    // classified in the model\n\t    this.totalCount = 0;\n\t    // Every item classified in the model\n\t    this.data = {};\n\t}\n\t\n\t/**\n\t * Train the classifier with a new item, which has a single\n\t * dimension of Javascript literal keys and values.\n\t *\n\t * @param {Object} item an object with singly-deep properties\n\t * @param {string} category the category this item belongs to\n\t * @return {undefined} adds the item to the classifier\n\t */\n\tBayesianClassifier.prototype.train = function (item, category) {\n\t    // If the data object doesn't have any values\n\t    // for this category, create a new object for it.\n\t    if (!this.data[category]) {\n\t        this.data[category] = {};\n\t    }\n\t\n\t    // Iterate through each key in the item.\n\t    for (var k in item) {\n\t        var v = item[k];\n\t        // Initialize the nested object `data[category][k][item[k]]`\n\t        // with an object of keys that equal 0.\n\t        if (this.data[category][k] === undefined) {\n\t            this.data[category][k] = {};\n\t        }\n\t        if (this.data[category][k][v] === undefined) {\n\t            this.data[category][k][v] = 0;\n\t        }\n\t\n\t        // And increment the key for this key/value combination.\n\t        this.data[category][k][item[k]]++;\n\t    }\n\t\n\t    // Increment the number of items classified\n\t    this.totalCount++;\n\t};\n\t\n\t/**\n\t * Generate a score of how well this item matches all\n\t * possible categories based on its attributes\n\t *\n\t * @param {Object} item an item in the same format as with train\n\t * @returns {Object} of probabilities that this item belongs to a\n\t * given category.\n\t */\n\tBayesianClassifier.prototype.score = function (item) {\n\t    // Initialize an empty array of odds per category.\n\t    var odds = {},\n\t        category;\n\t    // Iterate through each key in the item,\n\t    // then iterate through each category that has been used\n\t    // in previous calls to `.train()`\n\t    for (var k in item) {\n\t        var v = item[k];\n\t        for (category in this.data) {\n\t            // Create an empty object for storing key - value combinations\n\t            // for this category.\n\t            if (odds[category] === undefined) {\n\t                odds[category] = {};\n\t            }\n\t\n\t            // If this item doesn't even have a property, it counts for nothing,\n\t            // but if it does have the property that we're looking for from\n\t            // the item to categorize, it counts based on how popular it is\n\t            // versus the whole population.\n\t            if (this.data[category][k]) {\n\t                odds[category][k + '_' + v] = (this.data[category][k][v] || 0) / this.totalCount;\n\t            } else {\n\t                odds[category][k + '_' + v] = 0;\n\t            }\n\t        }\n\t    }\n\t\n\t    // Set up a new object that will contain sums of these odds by category\n\t    var oddsSums = {};\n\t\n\t    for (category in odds) {\n\t        // Tally all of the odds for each category-combination pair -\n\t        // the non-existence of a category does not add anything to the\n\t        // score.\n\t        for (var combination in odds[category]) {\n\t            if (oddsSums[category] === undefined) {\n\t                oddsSums[category] = 0;\n\t            }\n\t            oddsSums[category] += odds[category][combination];\n\t        }\n\t    }\n\t\n\t    return oddsSums;\n\t};\n\t\n\tmodule.exports = BayesianClassifier;\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar binomialDistribution = __webpack_require__(8);\n\t\n\t/**\n\t * The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution)\n\t * is the probability discrete\n\t * distribution of a random variable which takes value 1 with success\n\t * probability `p` and value 0 with failure\n\t * probability `q` = 1 - `p`. It can be used, for example, to represent the\n\t * toss of a coin, where \"1\" is defined to mean \"heads\" and \"0\" is defined\n\t * to mean \"tails\" (or vice versa). It is\n\t * a special case of a Binomial Distribution\n\t * where `n` = 1.\n\t *\n\t * @param {number} p input value, between 0 and 1 inclusive\n\t * @returns {number} value of bernoulli distribution at this point\n\t */\n\tfunction bernoulliDistribution(p) {\n\t  // Check that `p` is a valid probability (0 ≤ p ≤ 1)\n\t  if (p < 0 || p > 1) {\n\t    return null;\n\t  }\n\t\n\t  return binomialDistribution(1, p);\n\t}\n\t\n\tmodule.exports = bernoulliDistribution;\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * **Percentage Points of the χ2 (Chi-Squared) Distribution**\n\t *\n\t * The [χ2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution) is used in the common\n\t * chi-squared tests for goodness of fit of an observed distribution to a theoretical one, the independence of two\n\t * criteria of classification of qualitative data, and in confidence interval estimation for a population standard\n\t * deviation of a normal distribution from a sample standard deviation.\n\t *\n\t * Values from Appendix 1, Table III of William W. Hines & Douglas C. Montgomery, \"Probability and Statistics in\n\t * Engineering and Management Science\", Wiley (1980).\n\t */\n\t\n\tvar chiSquaredDistributionTable = {\n\t    1: { 0.995: 0.00, 0.99: 0.00, 0.975: 0.00, 0.95: 0.00, 0.9: 0.02, 0.5: 0.45, 0.1: 2.71, 0.05: 3.84, 0.025: 5.02, 0.01: 6.63, 0.005: 7.88 },\n\t    2: { 0.995: 0.01, 0.99: 0.02, 0.975: 0.05, 0.95: 0.10, 0.9: 0.21, 0.5: 1.39, 0.1: 4.61, 0.05: 5.99, 0.025: 7.38, 0.01: 9.21, 0.005: 10.60 },\n\t    3: { 0.995: 0.07, 0.99: 0.11, 0.975: 0.22, 0.95: 0.35, 0.9: 0.58, 0.5: 2.37, 0.1: 6.25, 0.05: 7.81, 0.025: 9.35, 0.01: 11.34, 0.005: 12.84 },\n\t    4: { 0.995: 0.21, 0.99: 0.30, 0.975: 0.48, 0.95: 0.71, 0.9: 1.06, 0.5: 3.36, 0.1: 7.78, 0.05: 9.49, 0.025: 11.14, 0.01: 13.28, 0.005: 14.86 },\n\t    5: { 0.995: 0.41, 0.99: 0.55, 0.975: 0.83, 0.95: 1.15, 0.9: 1.61, 0.5: 4.35, 0.1: 9.24, 0.05: 11.07, 0.025: 12.83, 0.01: 15.09, 0.005: 16.75 },\n\t    6: { 0.995: 0.68, 0.99: 0.87, 0.975: 1.24, 0.95: 1.64, 0.9: 2.20, 0.5: 5.35, 0.1: 10.65, 0.05: 12.59, 0.025: 14.45, 0.01: 16.81, 0.005: 18.55 },\n\t    7: { 0.995: 0.99, 0.99: 1.25, 0.975: 1.69, 0.95: 2.17, 0.9: 2.83, 0.5: 6.35, 0.1: 12.02, 0.05: 14.07, 0.025: 16.01, 0.01: 18.48, 0.005: 20.28 },\n\t    8: { 0.995: 1.34, 0.99: 1.65, 0.975: 2.18, 0.95: 2.73, 0.9: 3.49, 0.5: 7.34, 0.1: 13.36, 0.05: 15.51, 0.025: 17.53, 0.01: 20.09, 0.005: 21.96 },\n\t    9: { 0.995: 1.73, 0.99: 2.09, 0.975: 2.70, 0.95: 3.33, 0.9: 4.17, 0.5: 8.34, 0.1: 14.68, 0.05: 16.92, 0.025: 19.02, 0.01: 21.67, 0.005: 23.59 },\n\t    10: { 0.995: 2.16, 0.99: 2.56, 0.975: 3.25, 0.95: 3.94, 0.9: 4.87, 0.5: 9.34, 0.1: 15.99, 0.05: 18.31, 0.025: 20.48, 0.01: 23.21, 0.005: 25.19 },\n\t    11: { 0.995: 2.60, 0.99: 3.05, 0.975: 3.82, 0.95: 4.57, 0.9: 5.58, 0.5: 10.34, 0.1: 17.28, 0.05: 19.68, 0.025: 21.92, 0.01: 24.72, 0.005: 26.76 },\n\t    12: { 0.995: 3.07, 0.99: 3.57, 0.975: 4.40, 0.95: 5.23, 0.9: 6.30, 0.5: 11.34, 0.1: 18.55, 0.05: 21.03, 0.025: 23.34, 0.01: 26.22, 0.005: 28.30 },\n\t    13: { 0.995: 3.57, 0.99: 4.11, 0.975: 5.01, 0.95: 5.89, 0.9: 7.04, 0.5: 12.34, 0.1: 19.81, 0.05: 22.36, 0.025: 24.74, 0.01: 27.69, 0.005: 29.82 },\n\t    14: { 0.995: 4.07, 0.99: 4.66, 0.975: 5.63, 0.95: 6.57, 0.9: 7.79, 0.5: 13.34, 0.1: 21.06, 0.05: 23.68, 0.025: 26.12, 0.01: 29.14, 0.005: 31.32 },\n\t    15: { 0.995: 4.60, 0.99: 5.23, 0.975: 6.27, 0.95: 7.26, 0.9: 8.55, 0.5: 14.34, 0.1: 22.31, 0.05: 25.00, 0.025: 27.49, 0.01: 30.58, 0.005: 32.80 },\n\t    16: { 0.995: 5.14, 0.99: 5.81, 0.975: 6.91, 0.95: 7.96, 0.9: 9.31, 0.5: 15.34, 0.1: 23.54, 0.05: 26.30, 0.025: 28.85, 0.01: 32.00, 0.005: 34.27 },\n\t    17: { 0.995: 5.70, 0.99: 6.41, 0.975: 7.56, 0.95: 8.67, 0.9: 10.09, 0.5: 16.34, 0.1: 24.77, 0.05: 27.59, 0.025: 30.19, 0.01: 33.41, 0.005: 35.72 },\n\t    18: { 0.995: 6.26, 0.99: 7.01, 0.975: 8.23, 0.95: 9.39, 0.9: 10.87, 0.5: 17.34, 0.1: 25.99, 0.05: 28.87, 0.025: 31.53, 0.01: 34.81, 0.005: 37.16 },\n\t    19: { 0.995: 6.84, 0.99: 7.63, 0.975: 8.91, 0.95: 10.12, 0.9: 11.65, 0.5: 18.34, 0.1: 27.20, 0.05: 30.14, 0.025: 32.85, 0.01: 36.19, 0.005: 38.58 },\n\t    20: { 0.995: 7.43, 0.99: 8.26, 0.975: 9.59, 0.95: 10.85, 0.9: 12.44, 0.5: 19.34, 0.1: 28.41, 0.05: 31.41, 0.025: 34.17, 0.01: 37.57, 0.005: 40.00 },\n\t    21: { 0.995: 8.03, 0.99: 8.90, 0.975: 10.28, 0.95: 11.59, 0.9: 13.24, 0.5: 20.34, 0.1: 29.62, 0.05: 32.67, 0.025: 35.48, 0.01: 38.93, 0.005: 41.40 },\n\t    22: { 0.995: 8.64, 0.99: 9.54, 0.975: 10.98, 0.95: 12.34, 0.9: 14.04, 0.5: 21.34, 0.1: 30.81, 0.05: 33.92, 0.025: 36.78, 0.01: 40.29, 0.005: 42.80 },\n\t    23: { 0.995: 9.26, 0.99: 10.20, 0.975: 11.69, 0.95: 13.09, 0.9: 14.85, 0.5: 22.34, 0.1: 32.01, 0.05: 35.17, 0.025: 38.08, 0.01: 41.64, 0.005: 44.18 },\n\t    24: { 0.995: 9.89, 0.99: 10.86, 0.975: 12.40, 0.95: 13.85, 0.9: 15.66, 0.5: 23.34, 0.1: 33.20, 0.05: 36.42, 0.025: 39.36, 0.01: 42.98, 0.005: 45.56 },\n\t    25: { 0.995: 10.52, 0.99: 11.52, 0.975: 13.12, 0.95: 14.61, 0.9: 16.47, 0.5: 24.34, 0.1: 34.28, 0.05: 37.65, 0.025: 40.65, 0.01: 44.31, 0.005: 46.93 },\n\t    26: { 0.995: 11.16, 0.99: 12.20, 0.975: 13.84, 0.95: 15.38, 0.9: 17.29, 0.5: 25.34, 0.1: 35.56, 0.05: 38.89, 0.025: 41.92, 0.01: 45.64, 0.005: 48.29 },\n\t    27: { 0.995: 11.81, 0.99: 12.88, 0.975: 14.57, 0.95: 16.15, 0.9: 18.11, 0.5: 26.34, 0.1: 36.74, 0.05: 40.11, 0.025: 43.19, 0.01: 46.96, 0.005: 49.65 },\n\t    28: { 0.995: 12.46, 0.99: 13.57, 0.975: 15.31, 0.95: 16.93, 0.9: 18.94, 0.5: 27.34, 0.1: 37.92, 0.05: 41.34, 0.025: 44.46, 0.01: 48.28, 0.005: 50.99 },\n\t    29: { 0.995: 13.12, 0.99: 14.26, 0.975: 16.05, 0.95: 17.71, 0.9: 19.77, 0.5: 28.34, 0.1: 39.09, 0.05: 42.56, 0.025: 45.72, 0.01: 49.59, 0.005: 52.34 },\n\t    30: { 0.995: 13.79, 0.99: 14.95, 0.975: 16.79, 0.95: 18.49, 0.9: 20.60, 0.5: 29.34, 0.1: 40.26, 0.05: 43.77, 0.025: 46.98, 0.01: 50.89, 0.005: 53.67 },\n\t    40: { 0.995: 20.71, 0.99: 22.16, 0.975: 24.43, 0.95: 26.51, 0.9: 29.05, 0.5: 39.34, 0.1: 51.81, 0.05: 55.76, 0.025: 59.34, 0.01: 63.69, 0.005: 66.77 },\n\t    50: { 0.995: 27.99, 0.99: 29.71, 0.975: 32.36, 0.95: 34.76, 0.9: 37.69, 0.5: 49.33, 0.1: 63.17, 0.05: 67.50, 0.025: 71.42, 0.01: 76.15, 0.005: 79.49 },\n\t    60: { 0.995: 35.53, 0.99: 37.48, 0.975: 40.48, 0.95: 43.19, 0.9: 46.46, 0.5: 59.33, 0.1: 74.40, 0.05: 79.08, 0.025: 83.30, 0.01: 88.38, 0.005: 91.95 },\n\t    70: { 0.995: 43.28, 0.99: 45.44, 0.975: 48.76, 0.95: 51.74, 0.9: 55.33, 0.5: 69.33, 0.1: 85.53, 0.05: 90.53, 0.025: 95.02, 0.01: 100.42, 0.005: 104.22 },\n\t    80: { 0.995: 51.17, 0.99: 53.54, 0.975: 57.15, 0.95: 60.39, 0.9: 64.28, 0.5: 79.33, 0.1: 96.58, 0.05: 101.88, 0.025: 106.63, 0.01: 112.33, 0.005: 116.32 },\n\t    90: { 0.995: 59.20, 0.99: 61.75, 0.975: 65.65, 0.95: 69.13, 0.9: 73.29, 0.5: 89.33, 0.1: 107.57, 0.05: 113.14, 0.025: 118.14, 0.01: 124.12, 0.005: 128.30 },\n\t    100: { 0.995: 67.33, 0.99: 70.06, 0.975: 74.22, 0.95: 77.93, 0.9: 82.36, 0.5: 99.33, 0.1: 118.50, 0.05: 124.34, 0.025: 129.56, 0.01: 135.81, 0.005: 140.17 }\n\t};\n\t\n\tmodule.exports = chiSquaredDistributionTable;\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar mean = __webpack_require__(1);\n\tvar chiSquaredDistributionTable = __webpack_require__(25);\n\t\n\t/**\n\t * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n\t * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n\t * (that is, counts of observations), each squared and divided by the number of observations expected given the\n\t * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution\n\t * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n\t * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n\t * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty\n\t * cells and `c` is the number of estimated parameters for the distribution.\n\t *\n\t * @param {Array<number>} data\n\t * @param {Function} distributionType a function that returns a point in a distribution:\n\t * for instance, binomial, bernoulli, or poisson\n\t * @param {number} significance\n\t * @returns {number} chi squared goodness of fit\n\t * @example\n\t * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,\n\t * // \"Probability and Statistics in Engineering and Management Science\", Wiley (1980).\n\t * var data1019 = [\n\t *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n\t *     2, 2, 2, 2, 2, 2, 2, 2, 2,\n\t *     3, 3, 3, 3\n\t * ];\n\t * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05)); //= false\n\t */\n\tfunction chiSquaredGoodnessOfFit(data, distributionType, significance) {\n\t    // Estimate from the sample data, a weighted mean.\n\t    var inputMean = mean(data),\n\t\n\t    // Calculated value of the χ2 statistic.\n\t    chiSquared = 0,\n\t\n\t    // Degrees of freedom, calculated as (number of class intervals -\n\t    // number of hypothesized distribution parameters estimated - 1)\n\t    degreesOfFreedom,\n\t\n\t    // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n\t    // Lose one degree of freedom for estimating `lambda` from the sample data.\n\t    c = 1,\n\t\n\t    // The hypothesized distribution.\n\t    // Generate the hypothesized distribution.\n\t    hypothesizedDistribution = distributionType(inputMean),\n\t        observedFrequencies = [],\n\t        expectedFrequencies = [],\n\t        k;\n\t\n\t    // Create an array holding a histogram from the sample data, of\n\t    // the form `{ value: numberOfOcurrences }`\n\t    for (var i = 0; i < data.length; i++) {\n\t        if (observedFrequencies[data[i]] === undefined) {\n\t            observedFrequencies[data[i]] = 0;\n\t        }\n\t        observedFrequencies[data[i]]++;\n\t    }\n\t\n\t    // The histogram we created might be sparse - there might be gaps\n\t    // between values. So we iterate through the histogram, making\n\t    // sure that instead of undefined, gaps have 0 values.\n\t    for (i = 0; i < observedFrequencies.length; i++) {\n\t        if (observedFrequencies[i] === undefined) {\n\t            observedFrequencies[i] = 0;\n\t        }\n\t    }\n\t\n\t    // Create an array holding a histogram of expected data given the\n\t    // sample size and hypothesized distribution.\n\t    for (k in hypothesizedDistribution) {\n\t        if (k in observedFrequencies) {\n\t            expectedFrequencies[k] = hypothesizedDistribution[k] * data.length;\n\t        }\n\t    }\n\t\n\t    // Working backward through the expected frequencies, collapse classes\n\t    // if less than three observations are expected for a class.\n\t    // This transformation is applied to the observed frequencies as well.\n\t    for (k = expectedFrequencies.length - 1; k >= 0; k--) {\n\t        if (expectedFrequencies[k] < 3) {\n\t            expectedFrequencies[k - 1] += expectedFrequencies[k];\n\t            expectedFrequencies.pop();\n\t\n\t            observedFrequencies[k - 1] += observedFrequencies[k];\n\t            observedFrequencies.pop();\n\t        }\n\t    }\n\t\n\t    // Iterate through the squared differences between observed & expected\n\t    // frequencies, accumulating the `chiSquared` statistic.\n\t    for (k = 0; k < observedFrequencies.length; k++) {\n\t        chiSquared += Math.pow(observedFrequencies[k] - expectedFrequencies[k], 2) / expectedFrequencies[k];\n\t    }\n\t\n\t    // Calculate degrees of freedom for this test and look it up in the\n\t    // `chiSquaredDistributionTable` in order to\n\t    // accept or reject the goodness-of-fit of the hypothesized distribution.\n\t    degreesOfFreedom = observedFrequencies.length - c - 1;\n\t    return chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared;\n\t}\n\t\n\tmodule.exports = chiSquaredGoodnessOfFit;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Split an array into chunks of a specified size. This function\n\t * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)\n\t * function, and thus will insert smaller-sized chunks at the end if\n\t * the input size is not divisible by the chunk size.\n\t *\n\t * `sample` is expected to be an array, and `chunkSize` a number.\n\t * The `sample` array can contain any kind of data.\n\t *\n\t * @param {Array} sample any array of values\n\t * @param {number} chunkSize size of each output array\n\t * @returns {Array<Array>} a chunked array\n\t * @example\n\t * console.log(chunk([1, 2, 3, 4], 2)); // [[1, 2], [3, 4]]\n\t */\n\t\n\tfunction chunk(sample, chunkSize) {\n\t\n\t    // a list of result chunks, as arrays in an array\n\t    var output = [];\n\t\n\t    // `chunkSize` must be zero or higher - otherwise the loop below,\n\t    // in which we call `start += chunkSize`, will loop infinitely.\n\t    // So, we'll detect and return null in that case to indicate\n\t    // invalid input.\n\t    if (chunkSize <= 0) {\n\t        return null;\n\t    }\n\t\n\t    // `start` is the index at which `.slice` will start selecting\n\t    // new array elements\n\t    for (var start = 0; start < sample.length; start += chunkSize) {\n\t\n\t        // for each chunk, slice that part of the array and add it\n\t        // to the output. The `.slice` function does not change\n\t        // the original array.\n\t        output.push(sample.slice(start, start + chunkSize));\n\t    }\n\t    return output;\n\t}\n\t\n\tmodule.exports = chunk;\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar sortedUniqueCount = __webpack_require__(16),\n\t    numericSort = __webpack_require__(3);\n\t\n\t/**\n\t * Create a new column x row matrix.\n\t *\n\t * @private\n\t * @param {number} columns\n\t * @param {number} rows\n\t * @return {Array<Array<number>>} matrix\n\t * @example\n\t * makeMatrix(10, 10);\n\t */\n\tfunction makeMatrix(columns, rows) {\n\t    var matrix = [];\n\t    for (var i = 0; i < columns; i++) {\n\t        var column = [];\n\t        for (var j = 0; j < rows; j++) {\n\t            column.push(0);\n\t        }\n\t        matrix.push(column);\n\t    }\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Ckmeans clustering is an improvement on heuristic-based clustering\n\t * approaches like Jenks. The algorithm was developed in\n\t * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n\t * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n\t * to the problem of clustering numeric data into groups with the least\n\t * within-group sum-of-squared-deviations.\n\t *\n\t * Minimizing the difference within groups - what Wang & Song refer to as\n\t * `withinss`, or within sum-of-squares, means that groups are optimally\n\t * homogenous within and the data is split into representative groups.\n\t * This is very useful for visualization, where you may want to represent\n\t * a continuous variable in discrete color or style groups. This function\n\t * can provide groups that emphasize differences between data.\n\t *\n\t * Being a dynamic approach, this algorithm is based on two matrices that\n\t * store incrementally-computed values for squared deviations and backtracking\n\t * indexes.\n\t *\n\t * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n\t * this implementation does not include any code to automatically determine\n\t * the optimal number of clusters: this information needs to be explicitly\n\t * provided.\n\t *\n\t * ### References\n\t * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n\t * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n\t *\n\t * from The R Journal Vol. 3/2, December 2011\n\t * @param {Array<number>} data input data, as an array of number values\n\t * @param {number} nClusters number of desired classes. This cannot be\n\t * greater than the number of values in the data array.\n\t * @returns {Array<Array<number>>} clustered input\n\t * @example\n\t * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n\t * // The input, clustered into groups of similar numbers.\n\t * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n\t */\n\tfunction ckmeans(data, nClusters) {\n\t\n\t    if (nClusters > data.length) {\n\t        throw new Error('Cannot generate more classes than there are data values');\n\t    }\n\t\n\t    var sorted = numericSort(data),\n\t\n\t    // we'll use this as the maximum number of clusters\n\t    uniqueCount = sortedUniqueCount(sorted);\n\t\n\t    // if all of the input values are identical, there's one cluster\n\t    // with all of the input in it.\n\t    if (uniqueCount === 1) {\n\t        return [sorted];\n\t    }\n\t\n\t    // named 'D' originally\n\t    var matrix = makeMatrix(nClusters, sorted.length),\n\t\n\t    // named 'B' originally\n\t    backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\t\n\t    // This is a dynamic programming way to solve the problem of minimizing\n\t    // within-cluster sum of squares. It's similar to linear regression\n\t    // in this way, and this calculation incrementally computes the\n\t    // sum of squares that are later read.\n\t\n\t    // The outer loop iterates through clusters, from 0 to nClusters.\n\t    for (var cluster = 0; cluster < nClusters; cluster++) {\n\t\n\t        // At the start of each loop, the mean starts as the first element\n\t        var firstClusterMean = sorted[0];\n\t\n\t        for (var sortedIdx = Math.max(cluster, 1); sortedIdx < sorted.length; sortedIdx++) {\n\t\n\t            if (cluster === 0) {\n\t\n\t                // Increase the running sum of squares calculation by this\n\t                // new value\n\t                var squaredDifference = Math.pow(sorted[sortedIdx] - firstClusterMean, 2);\n\t                matrix[cluster][sortedIdx] = matrix[cluster][sortedIdx - 1] + sortedIdx / (sortedIdx + 1) * squaredDifference;\n\t\n\t                // We're computing a running mean by taking the previous\n\t                // mean value, multiplying it by the number of elements\n\t                // seen so far, and then dividing it by the number of\n\t                // elements total.\n\t                var newSum = sortedIdx * firstClusterMean + sorted[sortedIdx];\n\t                firstClusterMean = newSum / (sortedIdx + 1);\n\t            } else {\n\t\n\t                var sumSquaredDistances = 0,\n\t                    meanXJ = 0;\n\t\n\t                for (var j = sortedIdx; j >= cluster; j--) {\n\t\n\t                    sumSquaredDistances += (sortedIdx - j) / (sortedIdx - j + 1) * Math.pow(sorted[j] - meanXJ, 2);\n\t\n\t                    meanXJ = (sorted[j] + (sortedIdx - j) * meanXJ) / (sortedIdx - j + 1);\n\t\n\t                    if (j === sortedIdx) {\n\t                        matrix[cluster][sortedIdx] = sumSquaredDistances;\n\t                        backtrackMatrix[cluster][sortedIdx] = j;\n\t                        if (j > 0) {\n\t                            matrix[cluster][sortedIdx] += matrix[cluster - 1][j - 1];\n\t                        }\n\t                    } else {\n\t                        if (j === 0) {\n\t                            if (sumSquaredDistances <= matrix[cluster][sortedIdx]) {\n\t                                matrix[cluster][sortedIdx] = sumSquaredDistances;\n\t                                backtrackMatrix[cluster][sortedIdx] = j;\n\t                            }\n\t                        } else if (sumSquaredDistances + matrix[cluster - 1][j - 1] < matrix[cluster][sortedIdx]) {\n\t                            matrix[cluster][sortedIdx] = sumSquaredDistances + matrix[cluster - 1][j - 1];\n\t                            backtrackMatrix[cluster][sortedIdx] = j;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    // The real work of Ckmeans clustering happens in the matrix generation:\n\t    // the generated matrices encode all possible clustering combinations, and\n\t    // once they're generated we can solve for the best clustering groups\n\t    // very quickly.\n\t    var clusters = [],\n\t        clusterRight = backtrackMatrix[0].length - 1;\n\t\n\t    // Backtrack the clusters from the dynamic programming matrix. This\n\t    // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n\t    // and moves the cluster target with the loop.\n\t    for (cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n\t\n\t        var clusterLeft = backtrackMatrix[cluster][clusterRight];\n\t\n\t        // fill the cluster from the sorted input by taking a slice of the\n\t        // array. the backtrack matrix makes this easy - it stores the\n\t        // indexes where the cluster should start and end.\n\t        clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\t\n\t        if (cluster > 0) {\n\t            clusterRight = clusterLeft - 1;\n\t        }\n\t    }\n\t\n\t    return clusters;\n\t}\n\t\n\tmodule.exports = ckmeans;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar standardNormalTable = __webpack_require__(18);\n\t\n\t/**\n\t * **[Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)**\n\t *\n\t * Since probability tables cannot be\n\t * printed for every normal distribution, as there are an infinite variety\n\t * of normal distributions, it is common practice to convert a normal to a\n\t * standard normal and then use the standard normal table to find probabilities.\n\t *\n\t * You can use `.5 + .5 * errorFunction(x / Math.sqrt(2))` to calculate the probability\n\t * instead of looking it up in a table.\n\t *\n\t * @param {number} z\n\t * @returns {number} cumulative standard normal probability\n\t */\n\tfunction cumulativeStdNormalProbability(z) {\n\t\n\t    // Calculate the position of this value.\n\t    var absZ = Math.abs(z),\n\t\n\t    // Each row begins with a different\n\t    // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table\n\t    // corresponds to a range of 0.01 in the input values, so the value is\n\t    // multiplied by 100.\n\t    index = Math.min(Math.round(absZ * 100), standardNormalTable.length - 1);\n\t\n\t    // The index we calculate must be in the table as a positive value,\n\t    // but we still pay attention to whether the input is positive\n\t    // or negative, and flip the output value as a last step.\n\t    if (z >= 0) {\n\t        return standardNormalTable[index];\n\t    } else {\n\t        // due to floating-point arithmetic, values in the table with\n\t        // 4 significant figures can nevertheless end up as repeating\n\t        // fractions when they're computed here.\n\t        return +(1 - standardNormalTable[index]).toFixed(4);\n\t    }\n\t}\n\t\n\tmodule.exports = cumulativeStdNormalProbability;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * **[Gaussian error function](http://en.wikipedia.org/wiki/Error_function)**\n\t *\n\t * The `errorFunction(x/(sd * Math.sqrt(2)))` is the probability that a value in a\n\t * normal distribution with standard deviation sd is within x of the mean.\n\t *\n\t * This function returns a numerical approximation to the exact value.\n\t *\n\t * @param {number} x input\n\t * @return {number} error estimation\n\t * @example\n\t * errorFunction(1); //= 0.8427\n\t */\n\t\n\tfunction errorFunction(x) {\n\t    var t = 1 / (1 + 0.5 * Math.abs(x));\n\t    var tau = t * Math.exp(-Math.pow(x, 2) - 1.26551223 + 1.00002368 * t + 0.37409196 * Math.pow(t, 2) + 0.09678418 * Math.pow(t, 3) - 0.18628806 * Math.pow(t, 4) + 0.27886807 * Math.pow(t, 5) - 1.13520398 * Math.pow(t, 6) + 1.48851587 * Math.pow(t, 7) - 0.82215223 * Math.pow(t, 8) + 0.17087277 * Math.pow(t, 9));\n\t    if (x >= 0) {\n\t        return 1 - tau;\n\t    } else {\n\t        return tau - 1;\n\t    }\n\t}\n\t\n\tmodule.exports = errorFunction;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * The [Geometric Mean](https://en.wikipedia.org/wiki/Geometric_mean) is\n\t * a mean function that is more useful for numbers in different\n\t * ranges.\n\t *\n\t * This is the nth root of the input numbers multiplied by each other.\n\t *\n\t * The geometric mean is often useful for\n\t * **[proportional growth](https://en.wikipedia.org/wiki/Geometric_mean#Proportional_growth)**: given\n\t * growth rates for multiple years, like _80%, 16.66% and 42.85%_, a simple\n\t * mean will incorrectly estimate an average growth rate, whereas a geometric\n\t * mean will correctly estimate a growth rate that, over those years,\n\t * will yield the same end value.\n\t *\n\t * This runs on `O(n)`, linear time in respect to the array\n\t *\n\t * @param {Array<number>} x input array\n\t * @returns {number} geometric mean\n\t * @example\n\t * var growthRates = [1.80, 1.166666, 1.428571];\n\t * var averageGrowth = geometricMean(growthRates);\n\t * var averageGrowthRates = [averageGrowth, averageGrowth, averageGrowth];\n\t * var startingValue = 10;\n\t * var startingValueMean = 10;\n\t * growthRates.forEach(function(rate) {\n\t *   startingValue *= rate;\n\t * });\n\t * averageGrowthRates.forEach(function(rate) {\n\t *   startingValueMean *= rate;\n\t * });\n\t * startingValueMean === startingValue;\n\t */\n\t\n\tfunction geometricMean(x) {\n\t    // The mean of no numbers is null\n\t    if (x.length === 0) {\n\t        return null;\n\t    }\n\t\n\t    // the starting value.\n\t    var value = 1;\n\t\n\t    for (var i = 0; i < x.length; i++) {\n\t        // the geometric mean is only valid for positive numbers\n\t        if (x[i] <= 0) {\n\t            return null;\n\t        }\n\t\n\t        // repeatedly multiply the value by each number\n\t        value *= x[i];\n\t    }\n\t\n\t    return Math.pow(value, 1 / x.length);\n\t}\n\t\n\tmodule.exports = geometricMean;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * The [Harmonic Mean](https://en.wikipedia.org/wiki/Harmonic_mean) is\n\t * a mean function typically used to find the average of rates.\n\t * This mean is calculated by taking the reciprocal of the arithmetic mean\n\t * of the reciprocals of the input numbers.\n\t *\n\t * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n\t * a method of finding a typical or central value of a set of numbers.\n\t *\n\t * This runs on `O(n)`, linear time in respect to the array.\n\t *\n\t * @param {Array<number>} x input\n\t * @returns {number} harmonic mean\n\t * @example\n\t * ss.harmonicMean([2, 3]) //= 2.4\n\t */\n\t\n\tfunction harmonicMean(x) {\n\t    // The mean of no numbers is null\n\t    if (x.length === 0) {\n\t        return null;\n\t    }\n\t\n\t    var reciprocalSum = 0;\n\t\n\t    for (var i = 0; i < x.length; i++) {\n\t        // the harmonic mean is only valid for positive numbers\n\t        if (x[i] <= 0) {\n\t            return null;\n\t        }\n\t\n\t        reciprocalSum += 1 / x[i];\n\t    }\n\t\n\t    // divide n by the the reciprocal sum\n\t    return x.length / reciprocalSum;\n\t}\n\t\n\tmodule.exports = harmonicMean;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar quantile = __webpack_require__(11);\n\t\n\t/**\n\t * The [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range) is\n\t * a measure of statistical dispersion, or how scattered, spread, or\n\t * concentrated a distribution is. It's computed as the difference between\n\t * the third quartile and first quartile.\n\t *\n\t * @param {Array<number>} sample\n\t * @returns {number} interquartile range: the span between lower and upper quartile,\n\t * 0.25 and 0.75\n\t * @example\n\t * interquartileRange([0, 1, 2, 3]); //= 2\n\t */\n\tfunction interquartileRange(sample) {\n\t  // We can't derive quantiles from an empty list\n\t  if (sample.length === 0) {\n\t    return null;\n\t  }\n\t\n\t  // Interquartile range is the span between the upper quartile,\n\t  // at `0.75`, and lower quartile, `0.25`\n\t  return quantile(sample, 0.75) - quantile(sample, 0.25);\n\t}\n\t\n\tmodule.exports = interquartileRange;\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n\t * is a simple way to find a fitted line\n\t * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line\n\t * using the least sum of squares.\n\t *\n\t * @param {Array<Array<number>>} data an array of two-element of arrays,\n\t * like `[[0, 1], [2, 3]]`\n\t * @returns {Object} object containing slope and intersect of regression line\n\t * @example\n\t * linearRegression([[0, 0], [1, 1]]); // { m: 1, b: 0 }\n\t */\n\t\n\tfunction linearRegression(data) {\n\t\n\t    var m, b;\n\t\n\t    // Store data length in a local variable to reduce\n\t    // repeated object property lookups\n\t    var dataLength = data.length;\n\t\n\t    //if there's only one point, arbitrarily choose a slope of 0\n\t    //and a y-intercept of whatever the y of the initial point is\n\t    if (dataLength === 1) {\n\t        m = 0;\n\t        b = data[0][1];\n\t    } else {\n\t        // Initialize our sums and scope the `m` and `b`\n\t        // variables that define the line.\n\t        var sumX = 0,\n\t            sumY = 0,\n\t            sumXX = 0,\n\t            sumXY = 0;\n\t\n\t        // Use local variables to grab point values\n\t        // with minimal object property lookups\n\t        var point, x, y;\n\t\n\t        // Gather the sum of all x values, the sum of all\n\t        // y values, and the sum of x^2 and (x*y) for each\n\t        // value.\n\t        //\n\t        // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy\n\t        for (var i = 0; i < dataLength; i++) {\n\t            point = data[i];\n\t            x = point[0];\n\t            y = point[1];\n\t\n\t            sumX += x;\n\t            sumY += y;\n\t\n\t            sumXX += x * x;\n\t            sumXY += x * y;\n\t        }\n\t\n\t        // `m` is the slope of the regression line\n\t        m = (dataLength * sumXY - sumX * sumY) / (dataLength * sumXX - sumX * sumX);\n\t\n\t        // `b` is the y-intercept of the line.\n\t        b = sumY / dataLength - m * sumX / dataLength;\n\t    }\n\t\n\t    // Return both values as an object.\n\t    return {\n\t        m: m,\n\t        b: b\n\t    };\n\t}\n\t\n\tmodule.exports = linearRegression;\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Given the output of `linearRegression`: an object\n\t * with `m` and `b` values indicating slope and intercept,\n\t * respectively, generate a line function that translates\n\t * x values into y values.\n\t *\n\t * @param {Object} mb object with `m` and `b` members, representing\n\t * slope and intersect of desired line\n\t * @returns {Function} method that computes y-value at any given\n\t * x-value on the line.\n\t * @example\n\t * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));\n\t * l(0) //= 0\n\t * l(2) //= 2\n\t */\n\t\n\tfunction linearRegressionLine(mb) {\n\t    // Return a function that computes a `y` value for each\n\t    // x value it is given, based on the values of `b` and `a`\n\t    // that we just computed.\n\t    return function (x) {\n\t        return mb.b + mb.m * x;\n\t    };\n\t}\n\t\n\tmodule.exports = linearRegressionLine;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar median = __webpack_require__(10);\n\t\n\t/**\n\t * The [Median Absolute Deviation](http://en.wikipedia.org/wiki/Median_absolute_deviation) is\n\t * a robust measure of statistical\n\t * dispersion. It is more resilient to outliers than the standard deviation.\n\t *\n\t * @param {Array<number>} x input array\n\t * @returns {number} median absolute deviation\n\t * @example\n\t * mad([1, 1, 2, 2, 4, 6, 9]); //= 1\n\t */\n\tfunction mad(x) {\n\t    // The mad of nothing is null\n\t    if (!x || x.length === 0) {\n\t        return null;\n\t    }\n\t\n\t    var medianValue = median(x),\n\t        medianAbsoluteDeviations = [];\n\t\n\t    // Make a list of absolute deviations from the median\n\t    for (var i = 0; i < x.length; i++) {\n\t        medianAbsoluteDeviations.push(Math.abs(x[i] - medianValue));\n\t    }\n\t\n\t    // Find the median value of that list\n\t    return median(medianAbsoluteDeviations);\n\t}\n\t\n\tmodule.exports = mad;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * This computes the maximum number in an array.\n\t *\n\t * This runs on `O(n)`, linear time in respect to the array\n\t *\n\t * @param {Array<number>} x input\n\t * @returns {number} maximum value\n\t * @example\n\t * console.log(max([1, 2, 3, 4])); // 4\n\t */\n\t\n\tfunction max(x) {\n\t    var value;\n\t    for (var i = 0; i < x.length; i++) {\n\t        // On the first iteration of this loop, max is\n\t        // undefined and is thus made the maximum element in the array\n\t        if (x[i] > value || value === undefined) {\n\t            value = x[i];\n\t        }\n\t    }\n\t    return value;\n\t}\n\t\n\tmodule.exports = max;\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * The min is the lowest number in the array. This runs on `O(n)`, linear time in respect to the array\n\t *\n\t * @param {Array<number>} x input\n\t * @returns {number} minimum value\n\t * @example\n\t * min([1, 5, -10, 100, 2]); // -100\n\t */\n\t\n\tfunction min(x) {\n\t    var value;\n\t    for (var i = 0; i < x.length; i++) {\n\t        // On the first iteration of this loop, min is\n\t        // undefined and is thus made the minimum element in the array\n\t        if (x[i] < value || value === undefined) {\n\t            value = x[i];\n\t        }\n\t    }\n\t    return value;\n\t}\n\t\n\tmodule.exports = min;\n\n/***/ },\n/* 39 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * **Mixin** simple_statistics to a single Array instance if provided\n\t * or the Array native object if not. This is an optional\n\t * feature that lets you treat simple_statistics as a native feature\n\t * of Javascript.\n\t *\n\t * @param {Object} ss simple statistics\n\t * @param {Array} [array=] a single array instance which will be augmented\n\t * with the extra methods. If omitted, mixin will apply to all arrays\n\t * by changing the global `Array.prototype`.\n\t * @returns {*} the extended Array, or Array.prototype if no object\n\t * is given.\n\t *\n\t * @example\n\t * var myNumbers = [1, 2, 3];\n\t * mixin(ss, myNumbers);\n\t * console.log(myNumbers.sum()); // 6\n\t */\n\t\n\tfunction mixin(ss, array) {\n\t    var support = !!(Object.defineProperty && Object.defineProperties);\n\t    // Coverage testing will never test this error.\n\t    /* istanbul ignore next */\n\t    if (!support) {\n\t        throw new Error('without defineProperty, simple-statistics cannot be mixed in');\n\t    }\n\t\n\t    // only methods which work on basic arrays in a single step\n\t    // are supported\n\t    var arrayMethods = ['median', 'standardDeviation', 'sum', 'sampleSkewness', 'mean', 'min', 'max', 'quantile', 'geometricMean', 'harmonicMean', 'root_mean_square'];\n\t\n\t    // create a closure with a method name so that a reference\n\t    // like `arrayMethods[i]` doesn't follow the loop increment\n\t    function wrap(method) {\n\t        return function () {\n\t            // cast any arguments into an array, since they're\n\t            // natively objects\n\t            var args = Array.prototype.slice.apply(arguments);\n\t            // make the first argument the array itself\n\t            args.unshift(this);\n\t            // return the result of the ss method\n\t            return ss[method].apply(ss, args);\n\t        };\n\t    }\n\t\n\t    // select object to extend\n\t    var extending;\n\t    if (array) {\n\t        // create a shallow copy of the array so that our internal\n\t        // operations do not change it by reference\n\t        extending = array.slice();\n\t    } else {\n\t        extending = Array.prototype;\n\t    }\n\t\n\t    // for each array function, define a function that gets\n\t    // the array as the first argument.\n\t    // We use [defineProperty](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\t    // because it allows these properties to be non-enumerable:\n\t    // `for (var in x)` loops will not run into problems with this\n\t    // implementation.\n\t    for (var i = 0; i < arrayMethods.length; i++) {\n\t        Object.defineProperty(extending, arrayMethods[i], {\n\t            value: wrap(arrayMethods[i]),\n\t            configurable: true,\n\t            enumerable: false,\n\t            writable: true\n\t        });\n\t    }\n\t\n\t    return extending;\n\t}\n\t\n\tmodule.exports = mixin;\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar numericSort = __webpack_require__(3);\n\t\n\t/**\n\t * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times.\n\t * There can be multiple modes in a list: in the event of a tie, this\n\t * algorithm will return the most recently seen mode.\n\t *\n\t * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n\t * a method of finding a typical or central value of a set of numbers.\n\t *\n\t * This runs on `O(n)`, linear time in respect to the array.\n\t *\n\t * @param {Array<number>} x input\n\t * @returns {number} mode\n\t * @example\n\t * mode([0, 0, 1]); //= 0\n\t */\n\tfunction mode(x) {\n\t\n\t    // Handle edge cases:\n\t    // The median of an empty list is null\n\t    if (x.length === 0) {\n\t        return null;\n\t    } else if (x.length === 1) {\n\t        return x[0];\n\t    }\n\t\n\t    // Sorting the array lets us iterate through it below and be sure\n\t    // that every time we see a new number it's new and we'll never\n\t    // see the same number twice\n\t    var sorted = numericSort(x);\n\t\n\t    // This assumes it is dealing with an array of size > 1, since size\n\t    // 0 and 1 are handled immediately. Hence it starts at index 1 in the\n\t    // array.\n\t    var last = sorted[0],\n\t\n\t    // store the mode as we find new modes\n\t    value,\n\t\n\t    // store how many times we've seen the mode\n\t    maxSeen = 0,\n\t\n\t    // how many times the current candidate for the mode\n\t    // has been seen\n\t    seenThis = 1;\n\t\n\t    // end at sorted.length + 1 to fix the case in which the mode is\n\t    // the highest number that occurs in the sequence. the last iteration\n\t    // compares sorted[i], which is undefined, to the highest number\n\t    // in the series\n\t    for (var i = 1; i < sorted.length + 1; i++) {\n\t        // we're seeing a new number pass by\n\t        if (sorted[i] !== last) {\n\t            // the last number is the new mode since we saw it more\n\t            // often than the old one\n\t            if (seenThis > maxSeen) {\n\t                maxSeen = seenThis;\n\t                value = last;\n\t            }\n\t            seenThis = 1;\n\t            last = sorted[i];\n\t            // if this isn't a new number, it's one more occurrence of\n\t            // the potential mode\n\t        } else {\n\t                seenThis++;\n\t            }\n\t    }\n\t    return value;\n\t}\n\t\n\tmodule.exports = mode;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * This is a single-layer [Perceptron Classifier](http://en.wikipedia.org/wiki/Perceptron) that takes\n\t * arrays of numbers and predicts whether they should be classified\n\t * as either 0 or 1 (negative or positive examples).\n\t * @class\n\t * @example\n\t * // Create the model\n\t * var p = new PerceptronModel();\n\t * // Train the model with input with a diagonal boundary.\n\t * for (var i = 0; i < 5; i++) {\n\t *     p.train([1, 1], 1);\n\t *     p.train([0, 1], 0);\n\t *     p.train([1, 0], 0);\n\t *     p.train([0, 0], 0);\n\t * }\n\t * p.predict([0, 0]); // 0\n\t * p.predict([0, 1]); // 0\n\t * p.predict([1, 0]); // 0\n\t * p.predict([1, 1]); // 1\n\t */\n\t\n\tfunction PerceptronModel() {\n\t    // The weights, or coefficients of the model;\n\t    // weights are only populated when training with data.\n\t    this.weights = [];\n\t    // The bias term, or intercept; it is also a weight but\n\t    // it's stored separately for convenience as it is always\n\t    // multiplied by one.\n\t    this.bias = 0;\n\t}\n\t\n\t/**\n\t * **Predict**: Use an array of features with the weight array and bias\n\t * to predict whether an example is labeled 0 or 1.\n\t *\n\t * @param {Array<number>} features an array of features as numbers\n\t * @returns {number} 1 if the score is over 0, otherwise 0\n\t */\n\tPerceptronModel.prototype.predict = function (features) {\n\t\n\t    // Only predict if previously trained\n\t    // on the same size feature array(s).\n\t    if (features.length !== this.weights.length) {\n\t        return null;\n\t    }\n\t\n\t    // Calculate the sum of features times weights,\n\t    // with the bias added (implicitly times one).\n\t    var score = 0;\n\t    for (var i = 0; i < this.weights.length; i++) {\n\t        score += this.weights[i] * features[i];\n\t    }\n\t    score += this.bias;\n\t\n\t    // Classify as 1 if the score is over 0, otherwise 0.\n\t    if (score > 0) {\n\t        return 1;\n\t    } else {\n\t        return 0;\n\t    }\n\t};\n\t\n\t/**\n\t * **Train** the classifier with a new example, which is\n\t * a numeric array of features and a 0 or 1 label.\n\t *\n\t * @param {Array<number>} features an array of features as numbers\n\t * @param {number} label either 0 or 1\n\t * @returns {PerceptronModel} this\n\t */\n\tPerceptronModel.prototype.train = function (features, label) {\n\t    // Require that only labels of 0 or 1 are considered.\n\t    if (label !== 0 && label !== 1) {\n\t        return null;\n\t    }\n\t    // The length of the feature array determines\n\t    // the length of the weight array.\n\t    // The perceptron will continue learning as long as\n\t    // it keeps seeing feature arrays of the same length.\n\t    // When it sees a new data shape, it initializes.\n\t    if (features.length !== this.weights.length) {\n\t        this.weights = features;\n\t        this.bias = 1;\n\t    }\n\t    // Make a prediction based on current weights.\n\t    var prediction = this.predict(features);\n\t    // Update the weights if the prediction is wrong.\n\t    if (prediction !== label) {\n\t        var gradient = label - prediction;\n\t        for (var i = 0; i < this.weights.length; i++) {\n\t            this.weights[i] += gradient * features[i];\n\t        }\n\t        this.bias += gradient;\n\t    }\n\t    return this;\n\t};\n\t\n\tmodule.exports = PerceptronModel;\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar epsilon = __webpack_require__(2);\n\tvar factorial = __webpack_require__(5);\n\t\n\t/**\n\t * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)\n\t * is a discrete probability distribution that expresses the probability\n\t * of a given number of events occurring in a fixed interval of time\n\t * and/or space if these events occur with a known average rate and\n\t * independently of the time since the last event.\n\t *\n\t * The Poisson Distribution is characterized by the strictly positive\n\t * mean arrival or occurrence rate, `λ`.\n\t *\n\t * @param {number} lambda location poisson distribution\n\t * @returns {number} value of poisson distribution at that point\n\t */\n\tfunction poissonDistribution(lambda) {\n\t    // Check that lambda is strictly positive\n\t    if (lambda <= 0) {\n\t        return null;\n\t    }\n\t\n\t    // our current place in the distribution\n\t    var x = 0,\n\t\n\t    // and we keep track of the current cumulative probability, in\n\t    // order to know when to stop calculating chances.\n\t    cumulativeProbability = 0,\n\t\n\t    // the calculated cells to be returned\n\t    cells = {};\n\t\n\t    // This algorithm iterates through each potential outcome,\n\t    // until the `cumulativeProbability` is very close to 1, at\n\t    // which point we've defined the vast majority of outcomes\n\t    do {\n\t        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n\t        cells[x] = Math.pow(Math.E, -lambda) * Math.pow(lambda, x) / factorial(x);\n\t        cumulativeProbability += cells[x];\n\t        x++;\n\t        // when the cumulativeProbability is nearly 1, we've calculated\n\t        // the useful range of this distribution\n\t    } while (cumulativeProbability < 1 - epsilon);\n\t\n\t    return cells;\n\t}\n\t\n\tmodule.exports = poissonDistribution;\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar epsilon = __webpack_require__(2);\n\tvar inverseErrorFunction = __webpack_require__(9);\n\t\n\t/**\n\t * The [Probit](http://en.wikipedia.org/wiki/Probit)\n\t * is the inverse of cumulativeStdNormalProbability(),\n\t * and is also known as the normal quantile function.\n\t *\n\t * It returns the number of standard deviations from the mean\n\t * where the p'th quantile of values can be found in a normal distribution.\n\t * So, for example, probit(0.5 + 0.6827/2) ≈ 1 because 68.27% of values are\n\t * normally found within 1 standard deviation above or below the mean.\n\t *\n\t * @param {number} p\n\t * @returns {number} probit\n\t */\n\tfunction probit(p) {\n\t    if (p === 0) {\n\t        p = epsilon;\n\t    } else if (p >= 1) {\n\t        p = 1 - epsilon;\n\t    }\n\t    return Math.sqrt(2) * inverseErrorFunction(2 * p - 1);\n\t}\n\t\n\tmodule.exports = probit;\n\n/***/ },\n/* 44 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * The [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)\n\t * value of data compared with a function `f`\n\t * is the sum of the squared differences between the prediction\n\t * and the actual value.\n\t *\n\t * @param {Array<Array<number>>} data input data: this should be doubly-nested\n\t * @param {Function} func function called on `[i][0]` values within the dataset\n\t * @returns {number} r-squared value\n\t * @example\n\t * var samples = [[0, 0], [1, 1]];\n\t * var regressionLine = linearRegressionLine(linearRegression(samples));\n\t * rSquared(samples, regressionLine); //= 1 this line is a perfect fit\n\t */\n\t\n\tfunction rSquared(data, func) {\n\t    if (data.length < 2) {\n\t        return 1;\n\t    }\n\t\n\t    // Compute the average y value for the actual\n\t    // data set in order to compute the\n\t    // _total sum of squares_\n\t    var sum = 0,\n\t        average;\n\t    for (var i = 0; i < data.length; i++) {\n\t        sum += data[i][1];\n\t    }\n\t    average = sum / data.length;\n\t\n\t    // Compute the total sum of squares - the\n\t    // squared difference between each point\n\t    // and the average of all points.\n\t    var sumOfSquares = 0;\n\t    for (var j = 0; j < data.length; j++) {\n\t        sumOfSquares += Math.pow(average - data[j][1], 2);\n\t    }\n\t\n\t    // Finally estimate the error: the squared\n\t    // difference between the estimate and the actual data\n\t    // value at each point.\n\t    var err = 0;\n\t    for (var k = 0; k < data.length; k++) {\n\t        err += Math.pow(data[k][1] - func(data[k][0]), 2);\n\t    }\n\t\n\t    // As the error grows larger, its ratio to the\n\t    // sum of squares increases and the r squared\n\t    // value grows lower.\n\t    return 1 - err / sumOfSquares;\n\t}\n\t\n\tmodule.exports = rSquared;\n\n/***/ },\n/* 45 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * The Root Mean Square (RMS) is\n\t * a mean function used as a measure of the magnitude of a set\n\t * of numbers, regardless of their sign.\n\t * This is the square root of the mean of the squares of the\n\t * input numbers.\n\t * This runs on `O(n)`, linear time in respect to the array\n\t *\n\t * @param {Array<number>} x input\n\t * @returns {number} root mean square\n\t * @example\n\t * rootMeanSquare([-1, 1, -1, 1]); //= 1\n\t */\n\t\n\tfunction rootMeanSquare(x) {\n\t    if (x.length === 0) {\n\t        return null;\n\t    }\n\t\n\t    var sumOfSquares = 0;\n\t    for (var i = 0; i < x.length; i++) {\n\t        sumOfSquares += Math.pow(x[i], 2);\n\t    }\n\t\n\t    return Math.sqrt(sumOfSquares / x.length);\n\t}\n\t\n\tmodule.exports = rootMeanSquare;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar shuffle = __webpack_require__(14);\n\t\n\t/**\n\t * Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)\n\t * from a given array of `n` elements.\n\t *\n\t * The sampled values will be in any order, not necessarily the order\n\t * they appear in the input.\n\t *\n\t * @param {Array} array input array. can contain any type\n\t * @param {number} n count of how many elements to take\n\t * @param {Function} [randomSource=Math.random] an optional source of entropy\n\t * instead of Math.random\n\t * @return {Array} subset of n elements in original array\n\t * @example\n\t * var values = [1, 2, 4, 5, 6, 7, 8, 9];\n\t * sample(values, 3); // returns 3 random values, like [2, 5, 8];\n\t */\n\tfunction sample(array, n, randomSource) {\n\t  // shuffle the original array using a fisher-yates shuffle\n\t  var shuffled = shuffle(array, randomSource);\n\t\n\t  // and then return a subset of it - the first `n` elements.\n\t  return shuffled.slice(0, n);\n\t}\n\t\n\tmodule.exports = sample;\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar sampleCovariance = __webpack_require__(13);\n\tvar sampleStandardDeviation = __webpack_require__(6);\n\t\n\t/**\n\t * The [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence) is\n\t * a measure of how correlated two datasets are, between -1 and 1\n\t *\n\t * @param {Array<number>} x first input\n\t * @param {Array<number>} y second input\n\t * @returns {number} sample correlation\n\t * @example\n\t * var a = [1, 2, 3, 4, 5, 6];\n\t * var b = [2, 2, 3, 4, 5, 60];\n\t * sampleCorrelation(a, b); //= 0.691\n\t */\n\tfunction sampleCorrelation(x, y) {\n\t    var cov = sampleCovariance(x, y),\n\t        xstd = sampleStandardDeviation(x),\n\t        ystd = sampleStandardDeviation(y);\n\t\n\t    if (cov === null || xstd === null || ystd === null) {\n\t        return null;\n\t    }\n\t\n\t    return cov / xstd / ystd;\n\t}\n\t\n\tmodule.exports = sampleCorrelation;\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar sumNthPowerDeviations = __webpack_require__(4);\n\tvar sampleStandardDeviation = __webpack_require__(6);\n\t\n\t/**\n\t * [Skewness](http://en.wikipedia.org/wiki/Skewness) is\n\t * a measure of the extent to which a probability distribution of a\n\t * real-valued random variable \"leans\" to one side of the mean.\n\t * The skewness value can be positive or negative, or even undefined.\n\t *\n\t * Implementation is based on the adjusted Fisher-Pearson standardized\n\t * moment coefficient, which is the version found in Excel and several\n\t * statistical packages including Minitab, SAS and SPSS.\n\t *\n\t * @param {Array<number>} x input\n\t * @returns {number} sample skewness\n\t * @example\n\t * var data = [2, 4, 6, 3, 1];\n\t * sampleSkewness(data); //= 0.5901286564\n\t */\n\tfunction sampleSkewness(x) {\n\t    // The skewness of less than three arguments is null\n\t    if (x.length < 3) {\n\t        return null;\n\t    }\n\t\n\t    var n = x.length,\n\t        cubedS = Math.pow(sampleStandardDeviation(x), 3),\n\t        sumCubedDeviations = sumNthPowerDeviations(x, 3);\n\t\n\t    return n * sumCubedDeviations / ((n - 1) * (n - 2) * cubedS);\n\t}\n\t\n\tmodule.exports = sampleSkewness;\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar standardDeviation = __webpack_require__(17);\n\tvar mean = __webpack_require__(1);\n\t\n\t/**\n\t * This is to compute [a one-sample t-test](https://en.wikipedia.org/wiki/Student%27s_t-test#One-sample_t-test), comparing the mean\n\t * of a sample to a known value, x.\n\t *\n\t * in this case, we're trying to determine whether the\n\t * population mean is equal to the value that we know, which is `x`\n\t * here. usually the results here are used to look up a\n\t * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n\t * a certain level of significance, will let you determine that the\n\t * null hypothesis can or cannot be rejected.\n\t *\n\t * @param {Array<number>} sample an array of numbers as input\n\t * @param {number} x expected vale of the population mean\n\t * @returns {number} value\n\t * @example\n\t * tTest([1, 2, 3, 4, 5, 6], 3.385); //= 0.16494154\n\t */\n\tfunction tTest(sample, x) {\n\t  // The mean of the sample\n\t  var sampleMean = mean(sample);\n\t\n\t  // The standard deviation of the sample\n\t  var sd = standardDeviation(sample);\n\t\n\t  // Square root the length of the sample\n\t  var rootN = Math.sqrt(sample.length);\n\t\n\t  // Compute the known value against the sample,\n\t  // returning the t value\n\t  return (sampleMean - x) / (sd / rootN);\n\t}\n\t\n\tmodule.exports = tTest;\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar mean = __webpack_require__(1);\n\tvar sampleVariance = __webpack_require__(7);\n\t\n\t/**\n\t * This is to compute [two sample t-test](http://en.wikipedia.org/wiki/Student's_t-test).\n\t * Tests whether \"mean(X)-mean(Y) = difference\", (\n\t * in the most common case, we often have `difference == 0` to test if two samples\n\t * are likely to be taken from populations with the same mean value) with\n\t * no prior knowledge on standard deviations of both samples\n\t * other than the fact that they have the same standard deviation.\n\t *\n\t * Usually the results here are used to look up a\n\t * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n\t * a certain level of significance, will let you determine that the\n\t * null hypothesis can or cannot be rejected.\n\t *\n\t * `diff` can be omitted if it equals 0.\n\t *\n\t * [This is used to confirm or deny](http://www.monarchlab.org/Lab/Research/Stats/2SampleT.aspx)\n\t * a null hypothesis that the two populations that have been sampled into\n\t * `sampleX` and `sampleY` are equal to each other.\n\t *\n\t * @param {Array<number>} sampleX a sample as an array of numbers\n\t * @param {Array<number>} sampleY a sample as an array of numbers\n\t * @param {number} [difference=0]\n\t * @returns {number} test result\n\t * @example\n\t * ss.tTestTwoSample([1, 2, 3, 4], [3, 4, 5, 6], 0); //= -2.1908902300206643\n\t */\n\tfunction tTestTwoSample(sampleX, sampleY, difference) {\n\t    var n = sampleX.length,\n\t        m = sampleY.length;\n\t\n\t    // If either sample doesn't actually have any values, we can't\n\t    // compute this at all, so we return `null`.\n\t    if (!n || !m) {\n\t        return null;\n\t    }\n\t\n\t    // default difference (mu) is zero\n\t    if (!difference) {\n\t        difference = 0;\n\t    }\n\t\n\t    var meanX = mean(sampleX),\n\t        meanY = mean(sampleY);\n\t\n\t    var weightedVariance = ((n - 1) * sampleVariance(sampleX) + (m - 1) * sampleVariance(sampleY)) / (n + m - 2);\n\t\n\t    return (meanX - meanY - difference) / Math.sqrt(weightedVariance * (1 / n + 1 / m));\n\t}\n\t\n\tmodule.exports = tTestTwoSample;\n\n/***/ },\n/* 51 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * The [Z-Score, or Standard Score](http://en.wikipedia.org/wiki/Standard_score).\n\t *\n\t * The standard score is the number of standard deviations an observation\n\t * or datum is above or below the mean. Thus, a positive standard score\n\t * represents a datum above the mean, while a negative standard score\n\t * represents a datum below the mean. It is a dimensionless quantity\n\t * obtained by subtracting the population mean from an individual raw\n\t * score and then dividing the difference by the population standard\n\t * deviation.\n\t *\n\t * The z-score is only defined if one knows the population parameters;\n\t * if one only has a sample set, then the analogous computation with\n\t * sample mean and sample standard deviation yields the\n\t * Student's t-statistic.\n\t *\n\t * @param {number} x\n\t * @param {number} mean\n\t * @param {number} standardDeviation\n\t * @return {number} z score\n\t * @example\n\t * ss.zScore(78, 80, 5); //= -0.4\n\t */\n\t\n\tfunction zScore(x, mean, standardDeviation) {\n\t  return (x - mean) / standardDeviation;\n\t}\n\t\n\tmodule.exports = zScore;\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/* global d3 */\n\t// Load stylesheet\n\t__webpack_require__(55);\n\t// Include and bundle simple statistics\n\tvar ss = __webpack_require__(22);\n\t\n\t/**\n\t * A reusable d3 scatterplot generator\n\t * @name scatterplot\n\t * @module scatterplot\n\t * @memberof hakaiCharts\n\t * @author Taylor Denouden\n\t * @see {@link ./examples/scatterplot_example.html|example}\n\t * @see {@link http://htmlpreview.github.io/?https://github.com/tayden-hakai/hakai-charts/blob/master/examples/scatterplot_example.html|example}\n\t * @param {String|DOM_node} parent A DOM element to append the chart to\n\t * @return {object} scatterplot chart\n\t */\n\tmodule.exports = function scatterplot(parent) {\n\t  var _width = undefined;\n\t  var _height = undefined;\n\t  var _margin = undefined;\n\t  var _data = undefined;\n\t  var _x = d3.scale.linear();\n\t  var _y = d3.scale.linear();\n\t  var _xLog = false;\n\t  var _yLog = false;\n\t  var _xAxis = undefined;\n\t  var _yAxis = undefined;\n\t  var _xAccessor = undefined;\n\t  var _yAccessor = undefined;\n\t  var _xLabel = undefined;\n\t  var _yLabel = undefined;\n\t  var _color = d3.scale.category10();\n\t  var _colorAccessor = function _colorAccessor() {\n\t    return 0;\n\t  };\n\t  var _keyAccessor = function _keyAccessor(d) {\n\t    return d.key;\n\t  };\n\t  var _radius = 5;\n\t  var _regLine = undefined;\n\t  var _rSquared = 1;\n\t  var _correlation = 1;\n\t  var _covariance = 1;\n\t  var _svg = undefined;\n\t\n\t  /**\n\t   * Return the base ten log of a Number\n\t   * @private\n\t   * @param {number} d - A number to apply the operation on\n\t   * @return {number} log base 10 of d\n\t   */\n\t  function log10(d) {\n\t    return Math.log(d) / Math.log(10);\n\t  }\n\t\n\t  /**\n\t   * Given an x value of un-transformed data (no log transform etc.),\n\t   * get the untransformed y coordinate from the regression line\n\t   * @private\n\t   * @param {number} x - The untransformed x value in linear space\n\t   * @param {function} regLine - The regression line calculated using\n\t   *    a transformed dataset that accounted for the log scales\n\t   * @return {number} y - The untransformed y value in linear space to plot on the chart\n\t   */\n\t  function getY(x, regLine) {\n\t    var y = regLine(_xLog ? log10(x) : x);\n\t    return _yLog ? Math.pow(10, y) : y;\n\t  }\n\t\n\t  /**\n\t   * Calculate all chart statistical values and regresslion linearRegression\n\t   * @private\n\t   * @param {Object[]} data - The dataset used to calculate the statistics\n\t   * @return {Object} stats - An object with all calculated statistics\n\t   */\n\t  function calculateStats(data) {\n\t    // Get regression line formula\n\t    var ssData = data.map(function ssData(d) {\n\t      var xD = _xLog ? log10(_xAccessor(d)) : _xAccessor(d);\n\t      var yD = _yLog ? log10(_yAccessor(d)) : _yAccessor(d);\n\t      return [xD, yD];\n\t    });\n\t    var mb = ss.linearRegression(ssData);\n\t    var regLine = ss.linearRegressionLine(mb);\n\t\n\t    // Calculated statistics\n\t    var rSquared = ss.rSquared(ssData, regLine);\n\t    var correlation = ss.sampleCorrelation(ssData.map(function (d) {\n\t      return d[0];\n\t    }), ssData.map(function (d) {\n\t      return d[1];\n\t    }));\n\t    var covariance = ss.sampleCovariance(ssData.map(function (d) {\n\t      return d[0];\n\t    }), ssData.map(function (d) {\n\t      return d[1];\n\t    }));\n\t\n\t    return {\n\t      reg: mb,\n\t      regLine: regLine,\n\t      rSquared: rSquared,\n\t      correlation: correlation,\n\t      covariance: covariance\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Generate the chart using private variables on call to chart.render()\n\t   * @private\n\t   * @returns {chart}\n\t   */\n\t  function _chart() {\n\t    // Create svg object\n\t    _svg = d3.select(parent).append('svg').attr('width', _width + _margin.left + _margin.right).attr('height', _height + _margin.top + _margin.bottom).append('g').attr('transform', 'translate(' + _margin.left + ',' + _margin.top + ')');\n\t\n\t    // Create cleaned dataset that doesn't include non numeric or log(0) values\n\t    var cleanData = _data.filter(function (d) {\n\t      return !(isNaN(_xAccessor(d)) || isNaN(_yAccessor(d)));\n\t    }).filter(function (d) {\n\t      return !(_xLog && _xAccessor(d) === 0 || _yLog && _yAccessor(d) === 0);\n\t    });\n\t\n\t    // Set x and y axis based on selected attributes\n\t    _x.domain(d3.extent(cleanData, _xAccessor)).range([0, _width]);\n\t    _y.domain(d3.extent(cleanData, _yAccessor)).range([_height, 0]);\n\t\n\t    // Create svg axis generators\n\t    _xAxis = d3.svg.axis().scale(_x).orient('bottom').tickSize(-_height);\n\t    _yAxis = d3.svg.axis().scale(_y).orient('left').tickSize(-_width);\n\t\n\t    // Add axes to chart\n\t    _svg.append('g').attr('class', 'x axis').attr('transform', 'translate(0, ' + _height + ')').call(_xAxis);\n\t    _svg.append('g').attr('class', 'y axis').call(_yAxis);\n\t\n\t    // Add axis labels\n\t    _svg.append('text').attr('class', 'x label').attr('text-anchor', 'end').attr('x', _width - 10).attr('y', _height - 5).text(_xLabel);\n\t    _svg.append('text').attr('class', 'y label').attr('transform', 'rotate(-90)').attr('text-anchor', 'end').attr('x', -7).attr('y', 15).text(_yLabel);\n\t\n\t    // Add frame around chart\n\t    _svg.append('rect').attr('class', 'frame').attr('width', _width).attr('height', _height);\n\t\n\t    // Create clip path\n\t    _svg.append('defs').append('clipPath').attr('id', 'chartClip').append('rect').attr('width', _width).attr('height', _height);\n\t\n\t    // Calculate statistics and regression line\n\t    var stats = calculateStats(cleanData);\n\t    _regLine = stats.regLine;\n\t    _rSquared = stats.rSquared;\n\t    _correlation = stats.correlation;\n\t    _covariance = stats.covariance;\n\t\n\t    // Add regression line to Chart\n\t    _svg.append('g').attr('class', 'regression').attr('clip-path', 'url(#chartClip)').append('line').style('stroke', 'black').style('stroke-width', '1').style('stroke-dasharray', '5,5,10,5').attr('x1', _x(_x.domain()[0])).attr('y1', _y(getY(_x.domain()[0], _regLine))).attr('x2', _x(_x.domain()[1])).attr('y2', _y(getY(_x.domain()[1], _regLine)));\n\t\n\t    // Add data marks to chart\n\t    var marks = _svg.selectAll('g.mark').data(cleanData).enter().append('g').attr('class', 'mark');\n\t\n\t    marks.append('circle').attr('cx', function (d) {\n\t      return _x(_xAccessor(d));\n\t    }).attr('cy', function (d) {\n\t      return _y(_yAccessor(d));\n\t    }).attr('r', _radius).attr('fill', function (d) {\n\t      return _color(_colorAccessor(d));\n\t    });\n\t\n\t    marks.append('text').text(_keyAccessor).attr('x', function (d) {\n\t      return _x(_xAccessor(d));\n\t    }).attr('y', function (d) {\n\t      return _y(_yAccessor(d));\n\t    }).attr('text-anchor', 'end').attr('dy', -5).attr('dx', -2);\n\t  }\n\t\n\t  /**\n\t   * Draw the chart after parameters have been set.\n\t   * @name render\n\t   * @instance\n\t   * @method\n\t   * @return {chart}\n\t   */\n\t  _chart.render = function render() {\n\t    this.call();\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Redraw and transform the chart after parameter changes.\n\t   * @name redraw\n\t   * @instance\n\t   * @method\n\t   * @return {chart}\n\t   */\n\t  _chart.redraw = function redraw() {\n\t    // Create cleaned dataset that doesn't include non numeric or log(0) values\n\t    var cleanData = _data.filter(function (d) {\n\t      return !(isNaN(_xAccessor(d)) || isNaN(_yAccessor(d)));\n\t    }).filter(function (d) {\n\t      return !(_xLog && _xAccessor(d) === 0 || _yLog && _yAccessor(d) === 0);\n\t    });\n\t\n\t    // Update x and y domain\n\t    _x.domain(d3.extent(cleanData, _xAccessor)).range([0, _width]);\n\t    _y.domain(d3.extent(cleanData, _yAccessor)).range([_height, 0]);\n\t\n\t    // Update axes generator scale\n\t    _xAxis.scale(_x);\n\t    _yAxis.scale(_y);\n\t\n\t    // Define consistent transition duration\n\t    var t = 1500;\n\t\n\t    // Update axes\n\t    _svg.select('.x.axis').transition().duration(t).call(_xAxis);\n\t    _svg.select('.y.axis').transition().duration(t).call(_yAxis);\n\t\n\t    // Update axis labels\n\t    _svg.select('.x.label').text(_xLabel);\n\t    _svg.select('.y.label').text(_yLabel);\n\t\n\t    // Calculate statistics and regression line\n\t    var stats = calculateStats(cleanData);\n\t    _regLine = stats.regLine;\n\t    _rSquared = stats.rSquared;\n\t    _correlation = stats.correlation;\n\t    _covariance = stats.covariance;\n\t\n\t    // Add regression line to Chart\n\t    _svg.select('.regression line').transition().duration(t).attr('x1', _x(_x.domain()[0])).attr('y1', _y(getY(_x.domain()[0], _regLine))).attr('x2', _x(_x.domain()[1])).attr('y2', _y(getY(_x.domain()[1], _regLine)));\n\t\n\t    // Update data and mark positions\n\t    var marks = _svg.selectAll('g.mark').data(cleanData, _keyAccessor);\n\t\n\t    // Update\n\t    marks.selectAll('circle').transition().duration(t).attr('cx', function (d) {\n\t      return _x(_xAccessor(d));\n\t    }).attr('cy', function (d) {\n\t      return _y(_yAccessor(d));\n\t    }).attr('r', _radius).attr('fill', function (d) {\n\t      return _color(_colorAccessor(d));\n\t    });\n\t\n\t    marks.selectAll('text').transition().duration(t).attr('x', function (d) {\n\t      return _x(_xAccessor(d));\n\t    }).attr('y', function (d) {\n\t      return _y(_yAccessor(d));\n\t    });\n\t\n\t    // Enter\n\t    var g = marks.enter().append('g').attr('class', 'mark');\n\t\n\t    g.append('circle').attr('cx', function (d) {\n\t      return _x(_xAccessor(d));\n\t    }).attr('cy', function (d) {\n\t      return _y(_yAccessor(d));\n\t    }).attr('r', _radius).attr('fill', function (d) {\n\t      return _color(_colorAccessor(d));\n\t    });\n\t\n\t    g.append('text').text(_keyAccessor).attr('x', function (d) {\n\t      return _x(_xAccessor(d));\n\t    }).attr('y', function (d) {\n\t      return _y(_yAccessor(d));\n\t    }).attr('text-anchor', 'end').attr('dy', -5).attr('dx', -2);\n\t\n\t    // Exit\n\t    marks.exit().remove();\n\t\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the width attribute of a chart.\n\t   * @name width\n\t   * @instance\n\t   * @param {int} [val] The chart width\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get the width attribute of a chart.\n\t   * @name width\n\t   * @instance\n\t   * @return {int}\n\t   */\n\t  _chart.width = function width(val) {\n\t    if (!arguments.length) {\n\t      return _width;\n\t    }\n\t    _width = val;\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the height attribute of a chart.\n\t   * @name height\n\t   * @instance\n\t   * @param {int} [val] The chart height\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get the height attribute of a chart.\n\t   * @name height\n\t   * @instance\n\t   * @return {int}\n\t   */\n\t  _chart.height = function height(val) {\n\t    if (!arguments.length) {\n\t      return _height;\n\t    }\n\t    _height = val;\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the margin attribute of a chart.\n\t   * @name margin\n\t   * @instance\n\t   * @param {Object} [val] The chart margins in format {top: 5, left: 5, right: 10, bottom: 15}\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get the margin attribute of a chart.\n\t   * @name margin\n\t   * @instance\n\t   * @return {Object}\n\t   */\n\t  _chart.margin = function margin(val) {\n\t    if (!arguments.length) {\n\t      return _margin;\n\t    }\n\t    _margin = val;\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the data that accessor functions refer to.\n\t   * @name data\n\t   * @instance\n\t   * @param {Object[]} [val] JSON data being accessed by all accessor functions\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get the data that accessor functions refer to.\n\t   * @name data\n\t   * @instance\n\t   * @return {Object[]}\n\t   */\n\t  _chart.data = function data(val) {\n\t    if (!arguments.length) {\n\t      return _data;\n\t    }\n\t    _data = val;\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the function used to access the data shown on the y axis.\n\t   * @name xAccessor\n\t   * @instance\n\t   * @param {Function|Number} [val] The x axis data accessor function\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get the function used to access the data shown on the x axis.\n\t   * @name xAccessor\n\t   * @instance\n\t   * @return {Function|Number} The x axis data accessor\n\t   */\n\t  _chart.xAccessor = function xAccessor(val) {\n\t    if (!arguments.length) {\n\t      return _xAccessor;\n\t    }\n\t    _xAccessor = val;\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the function used to access the data shown on the y axis.\n\t   * @name yAccessor\n\t   * @instance\n\t   * @param {Function|Number} [val] The y axis data accessor function\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get the function used to access the data shown on the y axis.\n\t   * @name yAccessor\n\t   * @instance\n\t   * @return {Function|Number} The y axis data accessor\n\t   */\n\t  _chart.yAccessor = function yAccessor(val) {\n\t    if (!arguments.length) {\n\t      return _yAccessor;\n\t    }\n\t    _yAccessor = val;\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the x axis label.\n\t   * @name xLabel\n\t   * @instance\n\t   * @param {String} [val] The x label\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get the x axis label.\n\t   * @name xLabel\n\t   * @instance\n\t   * @return {String}\n\t   */\n\t  _chart.xLabel = function xLabel(val) {\n\t    if (!arguments.length) {\n\t      return _xLabel;\n\t    }\n\t    _xLabel = val;\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the y axis label.\n\t   * @name yLabel\n\t   * @instance\n\t   * @param {String} [val] The y label\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get the y axis label.\n\t   * @name yLabel\n\t   * @instance\n\t   * @return {String}\n\t   */\n\t  _chart.yLabel = function yLabel(val) {\n\t    if (!arguments.length) {\n\t      return _yLabel;\n\t    }\n\t    _yLabel = val;\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the x axis scale as log transformed or not.\n\t   * @name xLog\n\t   * @instance\n\t   * @param {Boolean} [val=false] Flag to transform x axis\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get boolean of whether the x axis scale is log transformed.\n\t   * @name xLog\n\t   * @instance\n\t   * @return {Boolean}\n\t   */\n\t  _chart.xLog = function xLog(val) {\n\t    if (!arguments.length) {\n\t      return _xLog;\n\t    }\n\t    _xLog = val;\n\t    _x = _xLog ? d3.scale.log() : d3.scale.linear();\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the y axis scale as log transformed or not.\n\t   * @name yLog\n\t   * @instance\n\t   * @param {Boolean} [val=false] Flag to transform y axis\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get boolean of whether the y axis scale is log transformed.\n\t   * @name yLog\n\t   * @instance\n\t   * @return {Boolean}\n\t   */\n\t  _chart.yLog = function yLog(val) {\n\t    if (!arguments.length) {\n\t      return _yLog;\n\t    }\n\t    _yLog = val;\n\t    _y = _yLog ? d3.scale.log() : d3.scale.linear();\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the color scale function that accepts a data value and returns a color.\n\t   * @name color\n\t   * @instance\n\t   * @param {Function} [val=d3.scale.category10()] The color scale function\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get the color scale function\n\t   * @name color\n\t   * @instance\n\t   * @return {Function}\n\t   */\n\t  _chart.color = function color(val) {\n\t    if (!arguments.length) {\n\t      return _color;\n\t    }\n\t    _color = val;\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the function used to access the data and pass the value to the color function.\n\t   * @name colorAccessor\n\t   * @instance\n\t   * @param {Function} [val=function(){ return 0; }] The colorAccessor function\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get the function used to access the data point color.\n\t   * @name colorAccessor\n\t   * @instance\n\t   * @return {Function}\n\t   */\n\t  _chart.colorAccessor = function colorAccessor(val) {\n\t    if (!arguments.length) {\n\t      return _colorAccessor;\n\t    }\n\t    _colorAccessor = val;\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set a function used to determine which points shown are the same data point.\n\t   * Allows for mark translation on redraw.\n\t   * @name keyAccessor\n\t   * @instance\n\t   * @param {Function} [val=function(d){ return d.key; }] The keyAccessor function\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get the function used to determine which points shown are the same datum.\n\t   * @name keyAccessor\n\t   * @instance\n\t   * @return {int}\n\t   */\n\t  _chart.keyAccessor = function keyAccessor(val) {\n\t    if (!arguments.length) {\n\t      return _keyAccessor;\n\t    }\n\t    _keyAccessor = val;\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Set the radius value of the scatterplot\n\t   * @name radius\n\t   * @instance\n\t   * @param {Number} [val=5] The radius in px\n\t   * @return {chart}\n\t   */\n\t  /**\n\t   * Get the radius value of the scatterplot\n\t   * @name radius\n\t   * @instance\n\t   * @return {int|Function}\n\t   */\n\t  _chart.radius = function radius(val) {\n\t    if (!arguments.length) {\n\t      return _radius;\n\t    }\n\t    _radius = val;\n\t    return _chart;\n\t  };\n\t\n\t  /**\n\t   * Return the R squared value determined by the linear regression function.\n\t   * @name rSquared\n\t   * @instance\n\t   * @return {float}\n\t   */\n\t  _chart.rSquared = function rSquared() {\n\t    return _rSquared;\n\t  };\n\t\n\t  /**\n\t   * Return the correlation value determined by the linear regression function.\n\t   * @name correlation\n\t   * @instance\n\t   * @return {float}\n\t   */\n\t  _chart.correlation = function correlation() {\n\t    return _correlation;\n\t  };\n\t\n\t  /**\n\t   * Return the covariance value determined by the linear regression function.\n\t   * @name covariance\n\t   * @instance\n\t   * @return {float}\n\t   */\n\t  _chart.covariance = function covariance() {\n\t    return _covariance;\n\t  };\n\t\n\t  return _chart;\n\t};\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(21)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"body{background:#fff;font-family:Helvetica Neue,Helvetica,sans-serif}.rot-x .x.axis text{text-anchor:start;transform:rotate(90deg) translate(7px,-13px)}svg{font:10px sans-serif}.axis line{stroke:#ddd}.axis path{display:none}.frame{fill:none;stroke:#aaa}.label{font:11px sans-serif;font-weight:700}circle{fill-opacity:.7}.mark text{display:none}.mark:hover text{display:block}.log-checkbox input{margin-right:5px}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0,\r\n\t\tstyleElementsInsertedAtTop = [];\r\n\t\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(false) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\t\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\t\r\n\t\t// By default, add <style> tags to the bottom of <head>.\r\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\t\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\t\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\t\r\n\tfunction insertStyleElement(options, styleElement) {\r\n\t\tvar head = getHeadElement();\r\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\t\tif (options.insertAt === \"top\") {\r\n\t\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t\t} else {\r\n\t\t\t\thead.appendChild(styleElement);\r\n\t\t\t}\r\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t\t} else if (options.insertAt === \"bottom\") {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeStyleElement(styleElement) {\r\n\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\t\tif(idx >= 0) {\r\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createStyleElement(options) {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\tinsertStyleElement(options, styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\t\r\n\tfunction createLinkElement(options) {\r\n\t\tvar linkElement = document.createElement(\"link\");\r\n\t\tlinkElement.rel = \"stylesheet\";\r\n\t\tinsertStyleElement(options, linkElement);\r\n\t\treturn linkElement;\r\n\t}\r\n\t\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\t\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else if(obj.sourceMap &&\r\n\t\t\ttypeof URL === \"function\" &&\r\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\t\ttypeof Blob === \"function\" &&\r\n\t\t\ttypeof btoa === \"function\") {\r\n\t\t\tstyleElement = createLinkElement(options);\r\n\t\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t\tif(styleElement.href)\r\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement(options);\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tupdate(obj);\r\n\t\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\t\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\t\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif(media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media)\r\n\t\t}\r\n\t\r\n\t\tif(styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateLink(linkElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif(sourceMap) {\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\t\r\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\t\r\n\t\tvar oldSrc = linkElement.href;\r\n\t\r\n\t\tlinkElement.href = URL.createObjectURL(blob);\r\n\t\r\n\t\tif(oldSrc)\r\n\t\t\tURL.revokeObjectURL(oldSrc);\r\n\t}\r\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(53);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(54)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./scatterplot.scss\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./scatterplot.scss\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** hakai_charts.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 83620798f1309724b066\n **/","/**\n * Main module used for namespacing all charts under hakaiCharts\n * @module hakaiCharts\n */\nmodule.exports = {\n  // parallelCoordinates: require('./src/js/parallel_coordinates'),\n  scatterplot: require('./src/js/scatterplot'),\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./index.js\n **/","'use strict';\n\nvar sum = require('./sum');\n\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input values\n * @returns {number} mean\n * @example\n * console.log(mean([0, 10])); // 5\n */\nfunction mean(x) {\n    // The mean of no numbers is null\n    if (x.length === 0) { return null; }\n\n    return sum(x) / x.length;\n}\n\nmodule.exports = mean;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/mean.js\n **/","'use strict';\n\n/**\n * We use `ε`, epsilon, as a stopping criterion when we want to iterate\n * until we're \"close enough\". Epsilon is a very small number: for\n * simple statistics, that number is **0.0001**\n *\n * This is used in calculations like the binomialDistribution, in which\n * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):\n * it progresses until it is close enough.\n *\n * Below is an example of using epsilon in [gradient descent](https://en.wikipedia.org/wiki/Gradient_descent),\n * where we're trying to find a local minimum of a function's derivative,\n * given by the `fDerivative` method.\n *\n * @example\n * // From calculation, we expect that the local minimum occurs at x=9/4\n * var x_old = 0;\n * // The algorithm starts at x=6\n * var x_new = 6;\n * var stepSize = 0.01;\n *\n * function fDerivative(x) {\n *   return 4 * Math.pow(x, 3) - 9 * Math.pow(x, 2);\n * }\n *\n * // The loop runs until the difference between the previous\n * // value and the current value is smaller than epsilon - a rough\n * // meaure of 'close enough'\n * while (Math.abs(x_new - x_old) > ss.epsilon) {\n *   x_old = x_new;\n *   x_new = x_old - stepSize * fDerivative(x_old);\n * }\n *\n * console.log('Local minimum occurs at', x_new);\n */\nvar epsilon = 0.0001;\n\nmodule.exports = epsilon;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/epsilon.js\n **/","'use strict';\n\n/**\n * Sort an array of numbers by their numeric value, ensuring that the\n * array is not changed in place.\n *\n * This is necessary because the default behavior of .sort\n * in JavaScript is to sort arrays as string values\n *\n *     [1, 10, 12, 102, 20].sort()\n *     // output\n *     [1, 10, 102, 12, 20]\n *\n * @param {Array<number>} array input array\n * @return {Array<number>} sorted array\n * @private\n * @example\n * numericSort([3, 2, 1]) // [1, 2, 3]\n */\nfunction numericSort(array) {\n    return array\n        // ensure the array is changed in-place\n        .slice()\n        // comparator function that treats input as numeric\n        .sort(function(a, b) {\n            return a - b;\n        });\n}\n\nmodule.exports = numericSort;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/numeric_sort.js\n **/","'use strict';\n\nvar mean = require('./mean');\n\n/**\n * The sum of deviations to the Nth power.\n * When n=2 it's the sum of squared deviations.\n * When n=3 it's the sum of cubed deviations.\n *\n * @param {Array<number>} x\n * @param {number} n power\n * @returns {number} sum of nth power deviations\n * @example\n * var input = [1, 2, 3];\n * // since the variance of a set is the mean squared\n * // deviations, we can calculate that with sumNthPowerDeviations:\n * var variance = sumNthPowerDeviations(input) / input.length;\n */\nfunction sumNthPowerDeviations(x, n) {\n    var meanValue = mean(x),\n        sum = 0;\n\n    for (var i = 0; i < x.length; i++) {\n        sum += Math.pow(x[i] - meanValue, n);\n    }\n\n    return sum;\n}\n\nmodule.exports = sumNthPowerDeviations;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/sum_nth_power_deviations.js\n **/","'use strict';\n\n/**\n * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive\n * integers less than or equal to n. Often factorial is implemented\n * recursively, but this iterative approach is significantly faster\n * and simpler.\n *\n * @param {number} n input\n * @returns {number} factorial: n!\n * @example\n * console.log(factorial(5)); // 120\n */\nfunction factorial(n) {\n\n    // factorial is mathematically undefined for negative numbers\n    if (n < 0 ) { return null; }\n\n    // typically you'll expand the factorial function going down, like\n    // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n    // counting from 2 up to the number in question, and since anything\n    // multiplied by 1 is itself, the loop only needs to start at 2.\n    var accumulator = 1;\n    for (var i = 2; i <= n; i++) {\n        // for each number up to and including the number `n`, multiply\n        // the accumulator my that number.\n        accumulator *= i;\n    }\n    return accumulator;\n}\n\nmodule.exports = factorial;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/factorial.js\n **/","'use strict';\n\nvar sampleVariance = require('./sample_variance');\n\n/**\n * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n * is the square root of the variance.\n *\n * @param {Array<number>} x input array\n * @returns {number} sample standard deviation\n * @example\n * ss.sampleStandardDeviation([2, 4, 4, 4, 5, 5, 7, 9]);\n * //= 2.138\n */\nfunction sampleStandardDeviation(x) {\n    // The standard deviation of no numbers is null\n    if (x.length <= 1) { return null; }\n\n    return Math.sqrt(sampleVariance(x));\n}\n\nmodule.exports = sampleStandardDeviation;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/sample_standard_deviation.js\n **/","'use strict';\n\nvar sumNthPowerDeviations = require('./sum_nth_power_deviations');\n\n/*\n * The [sample variance](https://en.wikipedia.org/wiki/Variance#Sample_variance)\n * is the sum of squared deviations from the mean. The sample variance\n * is distinguished from the variance by the usage of [Bessel's Correction](https://en.wikipedia.org/wiki/Bessel's_correction):\n * instead of dividing the sum of squared deviations by the length of the input,\n * it is divided by the length minus one. This corrects the bias in estimating\n * a value from a set that you don't know if full.\n *\n * References:\n * * [Wolfram MathWorld on Sample Variance](http://mathworld.wolfram.com/SampleVariance.html)\n *\n * @param {Array<number>} x input array\n * @return {number} sample variance\n * @example\n * sampleVariance([1, 2, 3, 4, 5]); //= 2.5\n */\nfunction sampleVariance(x) {\n    // The variance of no numbers is null\n    if (x.length <= 1) { return null; }\n\n    var sumSquaredDeviationsValue = sumNthPowerDeviations(x, 2);\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    var besselsCorrection = x.length - 1;\n\n    // Find the mean value of that list\n    return sumSquaredDeviationsValue / besselsCorrection;\n}\n\nmodule.exports = sampleVariance;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/sample_variance.js\n **/","'use strict';\n\nvar epsilon = require('./epsilon');\nvar factorial = require('./factorial');\n\n/**\n * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n *\n * @param {number} trials number of trials to simulate\n * @param {number} probability\n * @returns {number} output\n */\nfunction binomialDistribution(trials, probability) {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1),\n    // that `n` is an integer, strictly positive.\n    if (probability < 0 || probability > 1 ||\n        trials <= 0 || trials % 1 !== 0) {\n        return null;\n    }\n\n    // We initialize `x`, the random variable, and `accumulator`, an accumulator\n    // for the cumulative distribution function to 0. `distribution_functions`\n    // is the object we'll return with the `probability_of_x` and the\n    // `cumulativeProbability_of_x`, as well as the calculated mean &\n    // variance. We iterate until the `cumulativeProbability_of_x` is\n    // within `epsilon` of 1.0.\n    var x = 0,\n        cumulativeProbability = 0,\n        cells = {};\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] = factorial(trials) /\n            (factorial(x) * factorial(trials - x)) *\n            (Math.pow(probability, x) * Math.pow(1 - probability, trials - x));\n        cumulativeProbability += cells[x];\n        x++;\n    // when the cumulativeProbability is nearly 1, we've calculated\n    // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nmodule.exports = binomialDistribution;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/binomial_distribution.js\n **/","'use strict';\n\n/**\n * The Inverse [Gaussian error function](http://en.wikipedia.org/wiki/Error_function)\n * returns a numerical approximation to the value that would have caused\n * `errorFunction()` to return x.\n *\n * @param {number} x value of error function\n * @returns {number} estimated inverted value\n */\nfunction inverseErrorFunction(x) {\n    var a = (8 * (Math.PI - 3)) / (3 * Math.PI * (4 - Math.PI));\n\n    var inv = Math.sqrt(Math.sqrt(\n        Math.pow(2 / (Math.PI * a) + Math.log(1 - x * x) / 2, 2) -\n        Math.log(1 - x * x) / a) -\n        (2 / (Math.PI * a) + Math.log(1 - x * x) / 2));\n\n    if (x >= 0) {\n        return inv;\n    } else {\n        return -inv;\n    }\n}\n\nmodule.exports = inverseErrorFunction;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/inverse_error_function.js\n **/","'use strict';\n\nvar numericSort = require('./numeric_sort');\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of 'the middle'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn't necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} x input\n * @returns {number} median value\n * @example\n * var incomes = [10, 2, 5, 100, 2, 1];\n * median(incomes); //= 3.5\n */\nfunction median(x) {\n    // The median of an empty list is null\n    if (x.length === 0) { return null; }\n\n    // Sorting the array makes it easy to find the center, but\n    // use `.slice()` to ensure the original array `x` is not modified\n    var sorted = numericSort(x);\n\n    // If the length of the list is odd, it's the central number\n    if (sorted.length % 2 === 1) {\n        return sorted[(sorted.length - 1) / 2];\n    // Otherwise, the median is the average of the two numbers\n    // at the center of the list\n    } else {\n        var a = sorted[sorted.length / 2 - 1];\n        var b = sorted[sorted.length / 2];\n        return (a + b) / 2;\n    }\n}\n\nmodule.exports = median;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/median.js\n **/","'use strict';\n\nvar quantileSorted = require('./quantile_sorted');\nvar numericSort = require('./numeric_sort');\n\n/**\n * The [quantile](https://en.wikipedia.org/wiki/Quantile):\n * this is a population quantile, since we assume to know the entire\n * dataset in this library. This is an implementation of the\n * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n * algorithm from wikipedia.\n *\n * Sample is a one-dimensional array of numbers,\n * and p is either a decimal number from 0 to 1 or an array of decimal\n * numbers from 0 to 1.\n * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing\n * with decimal values.\n * When p is an array, the result of the function is also an array containing the appropriate\n * quantiles in input order\n *\n * @param {Array<number>} sample a sample from the population\n * @param {number} p the desired quantile, as a number between 0 and 1\n * @returns {number} quantile\n * @example\n * var data = [3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20];\n * quantile(data, 1); //= max(data);\n * quantile(data, 0); //= min(data);\n * quantile(data, 0.5); //= 9\n */\nfunction quantile(sample, p) {\n\n    // We can't derive quantiles from an empty list\n    if (sample.length === 0) { return null; }\n\n    // Sort a copy of the array. We'll need a sorted array to index\n    // the values in sorted order.\n    var sorted = numericSort(sample);\n\n    if (p.length) {\n        // Initialize the result array\n        var results = [];\n        // For each requested quantile\n        for (var i = 0; i < p.length; i++) {\n            results[i] = quantileSorted(sorted, p[i]);\n        }\n        return results;\n    } else {\n        return quantileSorted(sorted, p);\n    }\n}\n\nmodule.exports = quantile;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/quantile.js\n **/","'use strict';\n\n/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don't need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} sample input data\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @example\n * var data = [3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20];\n * quantileSorted(data, 1); //= max(data);\n * quantileSorted(data, 0); //= min(data);\n * quantileSorted(data, 0.5); //= 9\n */\nfunction quantileSorted(sample, p) {\n    var idx = sample.length * p;\n    if (p < 0 || p > 1) {\n        return null;\n    } else if (p === 1) {\n        // If p is 1, directly return the last element\n        return sample[sample.length - 1];\n    } else if (p === 0) {\n        // If p is 0, directly return the first element\n        return sample[0];\n    } else if (idx % 1 !== 0) {\n        // If p is not integer, return the next element in array\n        return sample[Math.ceil(idx) - 1];\n    } else if (sample.length % 2 === 0) {\n        // If the list has even-length, we'll take the average of this number\n        // and the next value, if there is one\n        return (sample[idx - 1] + sample[idx]) / 2;\n    } else {\n        // Finally, in the simple case of an integer value\n        // with an odd-length list, return the sample value at the index.\n        return sample[idx];\n    }\n}\n\nmodule.exports = quantileSorted;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/quantile_sorted.js\n **/","'use strict';\n\nvar mean = require('./mean');\n\n/**\n * [Sample covariance](https://en.wikipedia.org/wiki/Sample_mean_and_sampleCovariance) of two datasets:\n * how much do the two datasets move together?\n * x and y are two datasets, represented as arrays of numbers.\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample covariance\n * @example\n * var x = [1, 2, 3, 4, 5, 6];\n * var y = [6, 5, 4, 3, 2, 1];\n * sampleCovariance(x, y); //= -3.5\n */\nfunction sampleCovariance(x, y) {\n\n    // The two datasets must have the same length which must be more than 1\n    if (x.length <= 1 || x.length !== y.length) {\n        return null;\n    }\n\n    // determine the mean of each dataset so that we can judge each\n    // value of the dataset fairly as the difference from the mean. this\n    // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance\n    // does not suffer because of the difference in absolute values\n    var xmean = mean(x),\n        ymean = mean(y),\n        sum = 0;\n\n    // for each pair of values, the covariance increases when their\n    // difference from the mean is associated - if both are well above\n    // or if both are well below\n    // the mean, the covariance increases significantly.\n    for (var i = 0; i < x.length; i++) {\n        sum += (x[i] - xmean) * (y[i] - ymean);\n    }\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    var besselsCorrection = x.length - 1;\n\n    // the covariance is weighted by the length of the datasets.\n    return sum / besselsCorrection;\n}\n\nmodule.exports = sampleCovariance;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/sample_covariance.js\n **/","'use strict';\n\nvar shuffleInPlace = require('./shuffle_in_place');\n\n/*\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * is a fast way to create a random permutation of a finite set. This is\n * a function around `shuffle_in_place` that adds the guarantee that\n * it will not modify its input.\n *\n * @param {Array} sample an array of any kind of element\n * @param {Function} [randomSource=Math.random] an optional entropy source\n * @return {Array} shuffled version of input\n * @example\n * var shuffled = shuffle([1, 2, 3, 4]);\n * shuffled; // = [2, 3, 1, 4] or any other random permutation\n */\nfunction shuffle(sample, randomSource) {\n    // slice the original array so that it is not modified\n    sample = sample.slice();\n\n    // and then shuffle that shallow-copied array, in place\n    return shuffleInPlace(sample.slice(), randomSource);\n}\n\nmodule.exports = shuffle;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/shuffle.js\n **/","'use strict';\n\n/*\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * in-place - which means that it **will change the order of the original\n * array by reference**.\n *\n * This is an algorithm that generates a random [permutation](https://en.wikipedia.org/wiki/Permutation)\n * of a set.\n *\n * @param {Array} sample input array\n * @param {Function} [randomSource=Math.random] an optional source of entropy\n * @returns {Array} sample\n * @example\n * var sample = [1, 2, 3, 4];\n * shuffleInPlace(sample);\n * // sample is shuffled to a value like [2, 1, 4, 3]\n */\nfunction shuffleInPlace(sample, randomSource) {\n\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    // store the current length of the sample to determine\n    // when no elements remain to shuffle.\n    var length = sample.length;\n\n    // temporary is used to hold an item when it is being\n    // swapped between indices.\n    var temporary;\n\n    // The index to swap at each stage.\n    var index;\n\n    // While there are still items to shuffle\n    while (length > 0) {\n        // chose a random index within the subset of the array\n        // that is not yet shuffled\n        index = Math.floor(randomSource() * length--);\n\n        // store the value that we'll move temporarily\n        temporary = sample[length];\n\n        // swap the value at `sample[length]` with `sample[index]`\n        sample[length] = sample[index];\n        sample[index] = temporary;\n    }\n\n    return sample;\n}\n\nmodule.exports = shuffleInPlace;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/shuffle_in_place.js\n **/","'use strict';\n\n/**\n * For a sorted input, counting the number of unique values\n * is possible in constant time and constant memory. This is\n * a simple implementation of the algorithm.\n *\n * Values are compared with `===`, so objects and non-primitive objects\n * are not handled in any special way.\n *\n * @param {Array} input an array of primitive values.\n * @returns {number} count of unique values\n * @example\n * sortedUniqueCount([1, 2, 3]); // 3\n * sortedUniqueCount([1, 1, 1]); // 1\n */\nfunction sortedUniqueCount(input) {\n    var uniqueValueCount = 0,\n        lastSeenValue;\n    for (var i = 0; i < input.length; i++) {\n        if (i === 0 || input[i] !== lastSeenValue) {\n            lastSeenValue = input[i];\n            uniqueValueCount++;\n        }\n    }\n    return uniqueValueCount;\n}\n\nmodule.exports = sortedUniqueCount;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/sorted_unique_count.js\n **/","'use strict';\n\nvar variance = require('./variance');\n\n/**\n * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n * is the square root of the variance. It's useful for measuring the amount\n * of variation or dispersion in a set of values.\n *\n * Standard deviation is only appropriate for full-population knowledge: for\n * samples of a population, {@link sampleStandardDeviation} is\n * more appropriate.\n *\n * @param {Array<number>} x input\n * @returns {number} standard deviation\n * @example\n * var scores = [2, 4, 4, 4, 5, 5, 7, 9];\n * variance(scores); //= 4\n * standardDeviation(scores); //= 2\n */\nfunction standardDeviation(x) {\n    // The standard deviation of no numbers is null\n    if (x.length === 0) { return null; }\n\n    return Math.sqrt(variance(x));\n}\n\nmodule.exports = standardDeviation;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/standard_deviation.js\n **/","'use strict';\n\nvar SQRT_2PI = Math.sqrt(2 * Math.PI);\n\nfunction cumulativeDistribution(z) {\n    var sum = z,\n        tmp = z;\n\n    // 15 iterations are enough for 4-digit precision\n    for (var i = 1; i < 15; i++) {\n        tmp *= z * z / (2 * i + 1);\n        sum += tmp;\n    }\n    return Math.round((0.5 + (sum / SQRT_2PI) * Math.exp(-z * z / 2)) * 1e4) / 1e4;\n}\n\n/**\n * A standard normal table, also called the unit normal table or Z table,\n * is a mathematical table for the values of Φ (phi), which are the values of\n * the cumulative distribution function of the normal distribution.\n * It is used to find the probability that a statistic is observed below,\n * above, or between values on the standard normal distribution, and by\n * extension, any normal distribution.\n *\n * The probabilities are calculated using the\n * [Cumulative distribution function](https://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function).\n * The table used is the cumulative, and not cumulative from 0 to mean\n * (even though the latter has 5 digits precision, instead of 4).\n */\nvar standardNormalTable = [];\n\nfor (var z = 0; z <= 3.09; z += 0.01) {\n    standardNormalTable.push(cumulativeDistribution(z));\n}\n\nmodule.exports = standardNormalTable;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/standard_normal_table.js\n **/","'use strict';\n\n/**\n * The [sum](https://en.wikipedia.org/wiki/Summation) of an array\n * is the result of adding all numbers together, starting from zero.\n *\n * This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * console.log(sum([1, 2, 3])); // 6\n */\nfunction sum(x) {\n    var value = 0;\n    for (var i = 0; i < x.length; i++) {\n        value += x[i];\n    }\n    return value;\n}\n\nmodule.exports = sum;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/sum.js\n **/","'use strict';\n\nvar sumNthPowerDeviations = require('./sum_nth_power_deviations');\n\n/**\n * The [variance](http://en.wikipedia.org/wiki/Variance)\n * is the sum of squared deviations from the mean.\n *\n * This is an implementation of variance, not sample variance:\n * see the `sampleVariance` method if you want a sample measure.\n *\n * @param {Array<number>} x a population\n * @returns {number} variance: a value greater than or equal to zero.\n * zero indicates that all values are identical.\n * @example\n * ss.variance([1, 2, 3, 4, 5, 6]); //= 2.917\n */\nfunction variance(x) {\n    // The variance of no numbers is null\n    if (x.length === 0) { return null; }\n\n    // Find the mean of squared deviations between the\n    // mean value and each value.\n    return sumNthPowerDeviations(x, 2) / x.length;\n}\n\nmodule.exports = variance;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/variance.js\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/css-loader/lib/css-base.js\n **/","'use strict';\n\n// # simple-statistics\n//\n// A simple, literate statistics system.\n\nvar ss = module.exports = {};\n\n// Linear Regression\nss.linearRegression = require('./src/linear_regression');\nss.linearRegressionLine = require('./src/linear_regression_line');\nss.standardDeviation = require('./src/standard_deviation');\nss.rSquared = require('./src/r_squared');\nss.mode = require('./src/mode');\nss.min = require('./src/min');\nss.max = require('./src/max');\nss.sum = require('./src/sum');\nss.quantile = require('./src/quantile');\nss.quantileSorted = require('./src/quantile_sorted');\nss.iqr = ss.interquartileRange = require('./src/interquartile_range');\nss.medianAbsoluteDeviation = ss.mad = require('./src/mad');\nss.chunk = require('./src/chunk');\nss.shuffle = require('./src/shuffle');\nss.shuffleInPlace = require('./src/shuffle_in_place');\nss.sample = require('./src/sample');\nss.ckmeans = require('./src/ckmeans');\nss.sortedUniqueCount = require('./src/sorted_unique_count');\nss.sumNthPowerDeviations = require('./src/sum_nth_power_deviations');\n\n// sample statistics\nss.sampleCovariance = require('./src/sample_covariance');\nss.sampleCorrelation = require('./src/sample_correlation');\nss.sampleVariance = require('./src/sample_variance');\nss.sampleStandardDeviation = require('./src/sample_standard_deviation');\nss.sampleSkewness = require('./src/sample_skewness');\n\n// measures of centrality\nss.geometricMean = require('./src/geometric_mean');\nss.harmonicMean = require('./src/harmonic_mean');\nss.mean = ss.average = require('./src/mean');\nss.median = require('./src/median');\n\nss.rootMeanSquare = ss.rms = require('./src/root_mean_square');\nss.variance = require('./src/variance');\nss.tTest = require('./src/t_test');\nss.tTestTwoSample = require('./src/t_test_two_sample');\n// ss.jenks = require('./src/jenks');\n\n// Classifiers\nss.bayesian = require('./src/bayesian_classifier');\nss.perceptron = require('./src/perceptron');\n\n// Distribution-related methods\nss.epsilon = require('./src/epsilon'); // We make ε available to the test suite.\nss.factorial = require('./src/factorial');\nss.bernoulliDistribution = require('./src/bernoulli_distribution');\nss.binomialDistribution = require('./src/binomial_distribution');\nss.poissonDistribution = require('./src/poisson_distribution');\nss.chiSquaredGoodnessOfFit = require('./src/chi_squared_goodness_of_fit');\n\n// Normal distribution\nss.zScore = require('./src/z_score');\nss.cumulativeStdNormalProbability = require('./src/cumulative_std_normal_probability');\nss.standardNormalTable = require('./src/standard_normal_table');\nss.errorFunction = ss.erf = require('./src/error_function');\nss.inverseErrorFunction = require('./src/inverse_error_function');\nss.probit = require('./src/probit');\nss.mixin = require('./src/mixin');\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/index.js\n **/","'use strict';\n\n/**\n * [Bayesian Classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier)\n *\n * This is a naïve bayesian classifier that takes\n * singly-nested objects.\n *\n * @class\n * @example\n * var bayes = new BayesianClassifier();\n * bayes.train({\n *   species: 'Cat'\n * }, 'animal');\n * var result = bayes.score({\n *   species: 'Cat'\n * })\n * // result\n * // {\n * //   animal: 1\n * // }\n */\nfunction BayesianClassifier() {\n    // The number of items that are currently\n    // classified in the model\n    this.totalCount = 0;\n    // Every item classified in the model\n    this.data = {};\n}\n\n/**\n * Train the classifier with a new item, which has a single\n * dimension of Javascript literal keys and values.\n *\n * @param {Object} item an object with singly-deep properties\n * @param {string} category the category this item belongs to\n * @return {undefined} adds the item to the classifier\n */\nBayesianClassifier.prototype.train = function(item, category) {\n    // If the data object doesn't have any values\n    // for this category, create a new object for it.\n    if (!this.data[category]) {\n        this.data[category] = {};\n    }\n\n    // Iterate through each key in the item.\n    for (var k in item) {\n        var v = item[k];\n        // Initialize the nested object `data[category][k][item[k]]`\n        // with an object of keys that equal 0.\n        if (this.data[category][k] === undefined) {\n            this.data[category][k] = {};\n        }\n        if (this.data[category][k][v] === undefined) {\n            this.data[category][k][v] = 0;\n        }\n\n        // And increment the key for this key/value combination.\n        this.data[category][k][item[k]]++;\n    }\n\n    // Increment the number of items classified\n    this.totalCount++;\n};\n\n/**\n * Generate a score of how well this item matches all\n * possible categories based on its attributes\n *\n * @param {Object} item an item in the same format as with train\n * @returns {Object} of probabilities that this item belongs to a\n * given category.\n */\nBayesianClassifier.prototype.score = function(item) {\n    // Initialize an empty array of odds per category.\n    var odds = {}, category;\n    // Iterate through each key in the item,\n    // then iterate through each category that has been used\n    // in previous calls to `.train()`\n    for (var k in item) {\n        var v = item[k];\n        for (category in this.data) {\n            // Create an empty object for storing key - value combinations\n            // for this category.\n            if (odds[category] === undefined) { odds[category] = {}; }\n\n            // If this item doesn't even have a property, it counts for nothing,\n            // but if it does have the property that we're looking for from\n            // the item to categorize, it counts based on how popular it is\n            // versus the whole population.\n            if (this.data[category][k]) {\n                odds[category][k + '_' + v] = (this.data[category][k][v] || 0) / this.totalCount;\n            } else {\n                odds[category][k + '_' + v] = 0;\n            }\n        }\n    }\n\n    // Set up a new object that will contain sums of these odds by category\n    var oddsSums = {};\n\n    for (category in odds) {\n        // Tally all of the odds for each category-combination pair -\n        // the non-existence of a category does not add anything to the\n        // score.\n        for (var combination in odds[category]) {\n            if (oddsSums[category] === undefined) {\n                oddsSums[category] = 0;\n            }\n            oddsSums[category] += odds[category][combination];\n        }\n    }\n\n    return oddsSums;\n};\n\nmodule.exports = BayesianClassifier;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/bayesian_classifier.js\n **/","'use strict';\n\nvar binomialDistribution = require('./binomial_distribution');\n\n/**\n * The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution)\n * is the probability discrete\n * distribution of a random variable which takes value 1 with success\n * probability `p` and value 0 with failure\n * probability `q` = 1 - `p`. It can be used, for example, to represent the\n * toss of a coin, where \"1\" is defined to mean \"heads\" and \"0\" is defined\n * to mean \"tails\" (or vice versa). It is\n * a special case of a Binomial Distribution\n * where `n` = 1.\n *\n * @param {number} p input value, between 0 and 1 inclusive\n * @returns {number} value of bernoulli distribution at this point\n */\nfunction bernoulliDistribution(p) {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1)\n    if (p < 0 || p > 1 ) { return null; }\n\n    return binomialDistribution(1, p);\n}\n\nmodule.exports = bernoulliDistribution;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/bernoulli_distribution.js\n **/","'use strict';\n\n/**\n * **Percentage Points of the χ2 (Chi-Squared) Distribution**\n *\n * The [χ2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution) is used in the common\n * chi-squared tests for goodness of fit of an observed distribution to a theoretical one, the independence of two\n * criteria of classification of qualitative data, and in confidence interval estimation for a population standard\n * deviation of a normal distribution from a sample standard deviation.\n *\n * Values from Appendix 1, Table III of William W. Hines & Douglas C. Montgomery, \"Probability and Statistics in\n * Engineering and Management Science\", Wiley (1980).\n */\nvar chiSquaredDistributionTable = {\n    1: { 0.995:  0.00, 0.99:  0.00, 0.975:  0.00, 0.95:  0.00, 0.9:  0.02, 0.5:  0.45, 0.1:  2.71, 0.05:  3.84, 0.025:  5.02, 0.01:  6.63, 0.005:  7.88 },\n    2: { 0.995:  0.01, 0.99:  0.02, 0.975:  0.05, 0.95:  0.10, 0.9:  0.21, 0.5:  1.39, 0.1:  4.61, 0.05:  5.99, 0.025:  7.38, 0.01:  9.21, 0.005: 10.60 },\n    3: { 0.995:  0.07, 0.99:  0.11, 0.975:  0.22, 0.95:  0.35, 0.9:  0.58, 0.5:  2.37, 0.1:  6.25, 0.05:  7.81, 0.025:  9.35, 0.01: 11.34, 0.005: 12.84 },\n    4: { 0.995:  0.21, 0.99:  0.30, 0.975:  0.48, 0.95:  0.71, 0.9:  1.06, 0.5:  3.36, 0.1:  7.78, 0.05:  9.49, 0.025: 11.14, 0.01: 13.28, 0.005: 14.86 },\n    5: { 0.995:  0.41, 0.99:  0.55, 0.975:  0.83, 0.95:  1.15, 0.9:  1.61, 0.5:  4.35, 0.1:  9.24, 0.05: 11.07, 0.025: 12.83, 0.01: 15.09, 0.005: 16.75 },\n    6: { 0.995:  0.68, 0.99:  0.87, 0.975:  1.24, 0.95:  1.64, 0.9:  2.20, 0.5:  5.35, 0.1: 10.65, 0.05: 12.59, 0.025: 14.45, 0.01: 16.81, 0.005: 18.55 },\n    7: { 0.995:  0.99, 0.99:  1.25, 0.975:  1.69, 0.95:  2.17, 0.9:  2.83, 0.5:  6.35, 0.1: 12.02, 0.05: 14.07, 0.025: 16.01, 0.01: 18.48, 0.005: 20.28 },\n    8: { 0.995:  1.34, 0.99:  1.65, 0.975:  2.18, 0.95:  2.73, 0.9:  3.49, 0.5:  7.34, 0.1: 13.36, 0.05: 15.51, 0.025: 17.53, 0.01: 20.09, 0.005: 21.96 },\n    9: { 0.995:  1.73, 0.99:  2.09, 0.975:  2.70, 0.95:  3.33, 0.9:  4.17, 0.5:  8.34, 0.1: 14.68, 0.05: 16.92, 0.025: 19.02, 0.01: 21.67, 0.005: 23.59 },\n    10: { 0.995:  2.16, 0.99:  2.56, 0.975:  3.25, 0.95:  3.94, 0.9:  4.87, 0.5:  9.34, 0.1: 15.99, 0.05: 18.31, 0.025: 20.48, 0.01: 23.21, 0.005: 25.19 },\n    11: { 0.995:  2.60, 0.99:  3.05, 0.975:  3.82, 0.95:  4.57, 0.9:  5.58, 0.5: 10.34, 0.1: 17.28, 0.05: 19.68, 0.025: 21.92, 0.01: 24.72, 0.005: 26.76 },\n    12: { 0.995:  3.07, 0.99:  3.57, 0.975:  4.40, 0.95:  5.23, 0.9:  6.30, 0.5: 11.34, 0.1: 18.55, 0.05: 21.03, 0.025: 23.34, 0.01: 26.22, 0.005: 28.30 },\n    13: { 0.995:  3.57, 0.99:  4.11, 0.975:  5.01, 0.95:  5.89, 0.9:  7.04, 0.5: 12.34, 0.1: 19.81, 0.05: 22.36, 0.025: 24.74, 0.01: 27.69, 0.005: 29.82 },\n    14: { 0.995:  4.07, 0.99:  4.66, 0.975:  5.63, 0.95:  6.57, 0.9:  7.79, 0.5: 13.34, 0.1: 21.06, 0.05: 23.68, 0.025: 26.12, 0.01: 29.14, 0.005: 31.32 },\n    15: { 0.995:  4.60, 0.99:  5.23, 0.975:  6.27, 0.95:  7.26, 0.9:  8.55, 0.5: 14.34, 0.1: 22.31, 0.05: 25.00, 0.025: 27.49, 0.01: 30.58, 0.005: 32.80 },\n    16: { 0.995:  5.14, 0.99:  5.81, 0.975:  6.91, 0.95:  7.96, 0.9:  9.31, 0.5: 15.34, 0.1: 23.54, 0.05: 26.30, 0.025: 28.85, 0.01: 32.00, 0.005: 34.27 },\n    17: { 0.995:  5.70, 0.99:  6.41, 0.975:  7.56, 0.95:  8.67, 0.9: 10.09, 0.5: 16.34, 0.1: 24.77, 0.05: 27.59, 0.025: 30.19, 0.01: 33.41, 0.005: 35.72 },\n    18: { 0.995:  6.26, 0.99:  7.01, 0.975:  8.23, 0.95:  9.39, 0.9: 10.87, 0.5: 17.34, 0.1: 25.99, 0.05: 28.87, 0.025: 31.53, 0.01: 34.81, 0.005: 37.16 },\n    19: { 0.995:  6.84, 0.99:  7.63, 0.975:  8.91, 0.95: 10.12, 0.9: 11.65, 0.5: 18.34, 0.1: 27.20, 0.05: 30.14, 0.025: 32.85, 0.01: 36.19, 0.005: 38.58 },\n    20: { 0.995:  7.43, 0.99:  8.26, 0.975:  9.59, 0.95: 10.85, 0.9: 12.44, 0.5: 19.34, 0.1: 28.41, 0.05: 31.41, 0.025: 34.17, 0.01: 37.57, 0.005: 40.00 },\n    21: { 0.995:  8.03, 0.99:  8.90, 0.975: 10.28, 0.95: 11.59, 0.9: 13.24, 0.5: 20.34, 0.1: 29.62, 0.05: 32.67, 0.025: 35.48, 0.01: 38.93, 0.005: 41.40 },\n    22: { 0.995:  8.64, 0.99:  9.54, 0.975: 10.98, 0.95: 12.34, 0.9: 14.04, 0.5: 21.34, 0.1: 30.81, 0.05: 33.92, 0.025: 36.78, 0.01: 40.29, 0.005: 42.80 },\n    23: { 0.995:  9.26, 0.99: 10.20, 0.975: 11.69, 0.95: 13.09, 0.9: 14.85, 0.5: 22.34, 0.1: 32.01, 0.05: 35.17, 0.025: 38.08, 0.01: 41.64, 0.005: 44.18 },\n    24: { 0.995:  9.89, 0.99: 10.86, 0.975: 12.40, 0.95: 13.85, 0.9: 15.66, 0.5: 23.34, 0.1: 33.20, 0.05: 36.42, 0.025: 39.36, 0.01: 42.98, 0.005: 45.56 },\n    25: { 0.995: 10.52, 0.99: 11.52, 0.975: 13.12, 0.95: 14.61, 0.9: 16.47, 0.5: 24.34, 0.1: 34.28, 0.05: 37.65, 0.025: 40.65, 0.01: 44.31, 0.005: 46.93 },\n    26: { 0.995: 11.16, 0.99: 12.20, 0.975: 13.84, 0.95: 15.38, 0.9: 17.29, 0.5: 25.34, 0.1: 35.56, 0.05: 38.89, 0.025: 41.92, 0.01: 45.64, 0.005: 48.29 },\n    27: { 0.995: 11.81, 0.99: 12.88, 0.975: 14.57, 0.95: 16.15, 0.9: 18.11, 0.5: 26.34, 0.1: 36.74, 0.05: 40.11, 0.025: 43.19, 0.01: 46.96, 0.005: 49.65 },\n    28: { 0.995: 12.46, 0.99: 13.57, 0.975: 15.31, 0.95: 16.93, 0.9: 18.94, 0.5: 27.34, 0.1: 37.92, 0.05: 41.34, 0.025: 44.46, 0.01: 48.28, 0.005: 50.99 },\n    29: { 0.995: 13.12, 0.99: 14.26, 0.975: 16.05, 0.95: 17.71, 0.9: 19.77, 0.5: 28.34, 0.1: 39.09, 0.05: 42.56, 0.025: 45.72, 0.01: 49.59, 0.005: 52.34 },\n    30: { 0.995: 13.79, 0.99: 14.95, 0.975: 16.79, 0.95: 18.49, 0.9: 20.60, 0.5: 29.34, 0.1: 40.26, 0.05: 43.77, 0.025: 46.98, 0.01: 50.89, 0.005: 53.67 },\n    40: { 0.995: 20.71, 0.99: 22.16, 0.975: 24.43, 0.95: 26.51, 0.9: 29.05, 0.5: 39.34, 0.1: 51.81, 0.05: 55.76, 0.025: 59.34, 0.01: 63.69, 0.005: 66.77 },\n    50: { 0.995: 27.99, 0.99: 29.71, 0.975: 32.36, 0.95: 34.76, 0.9: 37.69, 0.5: 49.33, 0.1: 63.17, 0.05: 67.50, 0.025: 71.42, 0.01: 76.15, 0.005: 79.49 },\n    60: { 0.995: 35.53, 0.99: 37.48, 0.975: 40.48, 0.95: 43.19, 0.9: 46.46, 0.5: 59.33, 0.1: 74.40, 0.05: 79.08, 0.025: 83.30, 0.01: 88.38, 0.005: 91.95 },\n    70: { 0.995: 43.28, 0.99: 45.44, 0.975: 48.76, 0.95: 51.74, 0.9: 55.33, 0.5: 69.33, 0.1: 85.53, 0.05: 90.53, 0.025: 95.02, 0.01: 100.42, 0.005: 104.22 },\n    80: { 0.995: 51.17, 0.99: 53.54, 0.975: 57.15, 0.95: 60.39, 0.9: 64.28, 0.5: 79.33, 0.1: 96.58, 0.05: 101.88, 0.025: 106.63, 0.01: 112.33, 0.005: 116.32 },\n    90: { 0.995: 59.20, 0.99: 61.75, 0.975: 65.65, 0.95: 69.13, 0.9: 73.29, 0.5: 89.33, 0.1: 107.57, 0.05: 113.14, 0.025: 118.14, 0.01: 124.12, 0.005: 128.30 },\n    100: { 0.995: 67.33, 0.99: 70.06, 0.975: 74.22, 0.95: 77.93, 0.9: 82.36, 0.5: 99.33, 0.1: 118.50, 0.05: 124.34, 0.025: 129.56, 0.01: 135.81, 0.005: 140.17 }\n};\n\nmodule.exports = chiSquaredDistributionTable;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/chi_squared_distribution_table.js\n **/","'use strict';\n\nvar mean = require('./mean');\nvar chiSquaredDistributionTable = require('./chi_squared_distribution_table');\n\n/**\n * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n * (that is, counts of observations), each squared and divided by the number of observations expected given the\n * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution\n * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty\n * cells and `c` is the number of estimated parameters for the distribution.\n *\n * @param {Array<number>} data\n * @param {Function} distributionType a function that returns a point in a distribution:\n * for instance, binomial, bernoulli, or poisson\n * @param {number} significance\n * @returns {number} chi squared goodness of fit\n * @example\n * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,\n * // \"Probability and Statistics in Engineering and Management Science\", Wiley (1980).\n * var data1019 = [\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n *     2, 2, 2, 2, 2, 2, 2, 2, 2,\n *     3, 3, 3, 3\n * ];\n * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05)); //= false\n */\nfunction chiSquaredGoodnessOfFit(data, distributionType, significance) {\n    // Estimate from the sample data, a weighted mean.\n    var inputMean = mean(data),\n        // Calculated value of the χ2 statistic.\n        chiSquared = 0,\n        // Degrees of freedom, calculated as (number of class intervals -\n        // number of hypothesized distribution parameters estimated - 1)\n        degreesOfFreedom,\n        // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n        // Lose one degree of freedom for estimating `lambda` from the sample data.\n        c = 1,\n        // The hypothesized distribution.\n        // Generate the hypothesized distribution.\n        hypothesizedDistribution = distributionType(inputMean),\n        observedFrequencies = [],\n        expectedFrequencies = [],\n        k;\n\n    // Create an array holding a histogram from the sample data, of\n    // the form `{ value: numberOfOcurrences }`\n    for (var i = 0; i < data.length; i++) {\n        if (observedFrequencies[data[i]] === undefined) {\n            observedFrequencies[data[i]] = 0;\n        }\n        observedFrequencies[data[i]]++;\n    }\n\n    // The histogram we created might be sparse - there might be gaps\n    // between values. So we iterate through the histogram, making\n    // sure that instead of undefined, gaps have 0 values.\n    for (i = 0; i < observedFrequencies.length; i++) {\n        if (observedFrequencies[i] === undefined) {\n            observedFrequencies[i] = 0;\n        }\n    }\n\n    // Create an array holding a histogram of expected data given the\n    // sample size and hypothesized distribution.\n    for (k in hypothesizedDistribution) {\n        if (k in observedFrequencies) {\n            expectedFrequencies[k] = hypothesizedDistribution[k] * data.length;\n        }\n    }\n\n    // Working backward through the expected frequencies, collapse classes\n    // if less than three observations are expected for a class.\n    // This transformation is applied to the observed frequencies as well.\n    for (k = expectedFrequencies.length - 1; k >= 0; k--) {\n        if (expectedFrequencies[k] < 3) {\n            expectedFrequencies[k - 1] += expectedFrequencies[k];\n            expectedFrequencies.pop();\n\n            observedFrequencies[k - 1] += observedFrequencies[k];\n            observedFrequencies.pop();\n        }\n    }\n\n    // Iterate through the squared differences between observed & expected\n    // frequencies, accumulating the `chiSquared` statistic.\n    for (k = 0; k < observedFrequencies.length; k++) {\n        chiSquared += Math.pow(\n            observedFrequencies[k] - expectedFrequencies[k], 2) /\n            expectedFrequencies[k];\n    }\n\n    // Calculate degrees of freedom for this test and look it up in the\n    // `chiSquaredDistributionTable` in order to\n    // accept or reject the goodness-of-fit of the hypothesized distribution.\n    degreesOfFreedom = observedFrequencies.length - c - 1;\n    return chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared;\n}\n\nmodule.exports = chiSquaredGoodnessOfFit;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/chi_squared_goodness_of_fit.js\n **/","'use strict';\n\n/**\n * Split an array into chunks of a specified size. This function\n * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)\n * function, and thus will insert smaller-sized chunks at the end if\n * the input size is not divisible by the chunk size.\n *\n * `sample` is expected to be an array, and `chunkSize` a number.\n * The `sample` array can contain any kind of data.\n *\n * @param {Array} sample any array of values\n * @param {number} chunkSize size of each output array\n * @returns {Array<Array>} a chunked array\n * @example\n * console.log(chunk([1, 2, 3, 4], 2)); // [[1, 2], [3, 4]]\n */\nfunction chunk(sample, chunkSize) {\n\n    // a list of result chunks, as arrays in an array\n    var output = [];\n\n    // `chunkSize` must be zero or higher - otherwise the loop below,\n    // in which we call `start += chunkSize`, will loop infinitely.\n    // So, we'll detect and return null in that case to indicate\n    // invalid input.\n    if (chunkSize <= 0) {\n        return null;\n    }\n\n    // `start` is the index at which `.slice` will start selecting\n    // new array elements\n    for (var start = 0; start < sample.length; start += chunkSize) {\n\n        // for each chunk, slice that part of the array and add it\n        // to the output. The `.slice` function does not change\n        // the original array.\n        output.push(sample.slice(start, start + chunkSize));\n    }\n    return output;\n}\n\nmodule.exports = chunk;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/chunk.js\n **/","'use strict';\n\nvar sortedUniqueCount = require('./sorted_unique_count'),\n    numericSort = require('./numeric_sort');\n\n/**\n * Create a new column x row matrix.\n *\n * @private\n * @param {number} columns\n * @param {number} rows\n * @return {Array<Array<number>>} matrix\n * @example\n * makeMatrix(10, 10);\n */\nfunction makeMatrix(columns, rows) {\n    var matrix = [];\n    for (var i = 0; i < columns; i++) {\n        var column = [];\n        for (var j = 0; j < rows; j++) {\n            column.push(0);\n        }\n        matrix.push(column);\n    }\n    return matrix;\n}\n\n/**\n * Ckmeans clustering is an improvement on heuristic-based clustering\n * approaches like Jenks. The algorithm was developed in\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n * to the problem of clustering numeric data into groups with the least\n * within-group sum-of-squared-deviations.\n *\n * Minimizing the difference within groups - what Wang & Song refer to as\n * `withinss`, or within sum-of-squares, means that groups are optimally\n * homogenous within and the data is split into representative groups.\n * This is very useful for visualization, where you may want to represent\n * a continuous variable in discrete color or style groups. This function\n * can provide groups that emphasize differences between data.\n *\n * Being a dynamic approach, this algorithm is based on two matrices that\n * store incrementally-computed values for squared deviations and backtracking\n * indexes.\n *\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n * this implementation does not include any code to automatically determine\n * the optimal number of clusters: this information needs to be explicitly\n * provided.\n *\n * ### References\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n *\n * from The R Journal Vol. 3/2, December 2011\n * @param {Array<number>} data input data, as an array of number values\n * @param {number} nClusters number of desired classes. This cannot be\n * greater than the number of values in the data array.\n * @returns {Array<Array<number>>} clustered input\n * @example\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n * // The input, clustered into groups of similar numbers.\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n */\nfunction ckmeans(data, nClusters) {\n\n    if (nClusters > data.length) {\n        throw new Error('Cannot generate more classes than there are data values');\n    }\n\n    var sorted = numericSort(data),\n        // we'll use this as the maximum number of clusters\n        uniqueCount = sortedUniqueCount(sorted);\n\n    // if all of the input values are identical, there's one cluster\n    // with all of the input in it.\n    if (uniqueCount === 1) {\n        return [sorted];\n    }\n\n    // named 'D' originally\n    var matrix = makeMatrix(nClusters, sorted.length),\n        // named 'B' originally\n        backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\n    // This is a dynamic programming way to solve the problem of minimizing\n    // within-cluster sum of squares. It's similar to linear regression\n    // in this way, and this calculation incrementally computes the\n    // sum of squares that are later read.\n\n    // The outer loop iterates through clusters, from 0 to nClusters.\n    for (var cluster = 0; cluster < nClusters; cluster++) {\n\n        // At the start of each loop, the mean starts as the first element\n        var firstClusterMean = sorted[0];\n\n        for (var sortedIdx = Math.max(cluster, 1);\n             sortedIdx < sorted.length;\n             sortedIdx++) {\n\n            if (cluster === 0) {\n\n                // Increase the running sum of squares calculation by this\n                // new value\n                var squaredDifference = Math.pow(\n                    sorted[sortedIdx] - firstClusterMean, 2);\n                matrix[cluster][sortedIdx] = matrix[cluster][sortedIdx - 1] +\n                    (sortedIdx / (sortedIdx + 1)) * squaredDifference;\n\n                // We're computing a running mean by taking the previous\n                // mean value, multiplying it by the number of elements\n                // seen so far, and then dividing it by the number of\n                // elements total.\n                var newSum = sortedIdx * firstClusterMean + sorted[sortedIdx];\n                firstClusterMean = newSum / (sortedIdx + 1);\n\n            } else {\n\n                var sumSquaredDistances = 0,\n                    meanXJ = 0;\n\n                for (var j = sortedIdx; j >= cluster; j--) {\n\n                    sumSquaredDistances += (sortedIdx - j) /\n                        (sortedIdx - j + 1) *\n                        Math.pow(sorted[j] - meanXJ, 2);\n\n                    meanXJ = (sorted[j] + (sortedIdx - j) * meanXJ) /\n                        (sortedIdx - j + 1);\n\n                    if (j === sortedIdx) {\n                        matrix[cluster][sortedIdx] = sumSquaredDistances;\n                        backtrackMatrix[cluster][sortedIdx] = j;\n                        if (j > 0) {\n                            matrix[cluster][sortedIdx] += matrix[cluster - 1][j - 1];\n                        }\n                    } else {\n                        if (j === 0) {\n                            if (sumSquaredDistances <= matrix[cluster][sortedIdx]) {\n                                matrix[cluster][sortedIdx] = sumSquaredDistances;\n                                backtrackMatrix[cluster][sortedIdx] = j;\n                            }\n                        } else if (sumSquaredDistances + matrix[cluster - 1][j - 1] < matrix[cluster][sortedIdx]) {\n                            matrix[cluster][sortedIdx] = sumSquaredDistances + matrix[cluster - 1][j - 1];\n                            backtrackMatrix[cluster][sortedIdx] = j;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // The real work of Ckmeans clustering happens in the matrix generation:\n    // the generated matrices encode all possible clustering combinations, and\n    // once they're generated we can solve for the best clustering groups\n    // very quickly.\n    var clusters = [],\n        clusterRight = backtrackMatrix[0].length - 1;\n\n    // Backtrack the clusters from the dynamic programming matrix. This\n    // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n    // and moves the cluster target with the loop.\n    for (cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n\n        var clusterLeft = backtrackMatrix[cluster][clusterRight];\n\n        // fill the cluster from the sorted input by taking a slice of the\n        // array. the backtrack matrix makes this easy - it stores the\n        // indexes where the cluster should start and end.\n        clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\n        if (cluster > 0) {\n            clusterRight = clusterLeft - 1;\n        }\n    }\n\n    return clusters;\n}\n\nmodule.exports = ckmeans;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/ckmeans.js\n **/","'use strict';\n\nvar standardNormalTable = require('./standard_normal_table');\n\n/**\n * **[Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)**\n *\n * Since probability tables cannot be\n * printed for every normal distribution, as there are an infinite variety\n * of normal distributions, it is common practice to convert a normal to a\n * standard normal and then use the standard normal table to find probabilities.\n *\n * You can use `.5 + .5 * errorFunction(x / Math.sqrt(2))` to calculate the probability\n * instead of looking it up in a table.\n *\n * @param {number} z\n * @returns {number} cumulative standard normal probability\n */\nfunction cumulativeStdNormalProbability(z) {\n\n    // Calculate the position of this value.\n    var absZ = Math.abs(z),\n        // Each row begins with a different\n        // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table\n        // corresponds to a range of 0.01 in the input values, so the value is\n        // multiplied by 100.\n        index = Math.min(Math.round(absZ * 100), standardNormalTable.length - 1);\n\n    // The index we calculate must be in the table as a positive value,\n    // but we still pay attention to whether the input is positive\n    // or negative, and flip the output value as a last step.\n    if (z >= 0) {\n        return standardNormalTable[index];\n    } else {\n        // due to floating-point arithmetic, values in the table with\n        // 4 significant figures can nevertheless end up as repeating\n        // fractions when they're computed here.\n        return +(1 - standardNormalTable[index]).toFixed(4);\n    }\n}\n\nmodule.exports = cumulativeStdNormalProbability;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/cumulative_std_normal_probability.js\n **/","'use strict';\n\n/**\n * **[Gaussian error function](http://en.wikipedia.org/wiki/Error_function)**\n *\n * The `errorFunction(x/(sd * Math.sqrt(2)))` is the probability that a value in a\n * normal distribution with standard deviation sd is within x of the mean.\n *\n * This function returns a numerical approximation to the exact value.\n *\n * @param {number} x input\n * @return {number} error estimation\n * @example\n * errorFunction(1); //= 0.8427\n */\nfunction errorFunction(x) {\n    var t = 1 / (1 + 0.5 * Math.abs(x));\n    var tau = t * Math.exp(-Math.pow(x, 2) -\n        1.26551223 +\n        1.00002368 * t +\n        0.37409196 * Math.pow(t, 2) +\n        0.09678418 * Math.pow(t, 3) -\n        0.18628806 * Math.pow(t, 4) +\n        0.27886807 * Math.pow(t, 5) -\n        1.13520398 * Math.pow(t, 6) +\n        1.48851587 * Math.pow(t, 7) -\n        0.82215223 * Math.pow(t, 8) +\n        0.17087277 * Math.pow(t, 9));\n    if (x >= 0) {\n        return 1 - tau;\n    } else {\n        return tau - 1;\n    }\n}\n\nmodule.exports = errorFunction;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/error_function.js\n **/","'use strict';\n\n/**\n * The [Geometric Mean](https://en.wikipedia.org/wiki/Geometric_mean) is\n * a mean function that is more useful for numbers in different\n * ranges.\n *\n * This is the nth root of the input numbers multiplied by each other.\n *\n * The geometric mean is often useful for\n * **[proportional growth](https://en.wikipedia.org/wiki/Geometric_mean#Proportional_growth)**: given\n * growth rates for multiple years, like _80%, 16.66% and 42.85%_, a simple\n * mean will incorrectly estimate an average growth rate, whereas a geometric\n * mean will correctly estimate a growth rate that, over those years,\n * will yield the same end value.\n *\n * This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input array\n * @returns {number} geometric mean\n * @example\n * var growthRates = [1.80, 1.166666, 1.428571];\n * var averageGrowth = geometricMean(growthRates);\n * var averageGrowthRates = [averageGrowth, averageGrowth, averageGrowth];\n * var startingValue = 10;\n * var startingValueMean = 10;\n * growthRates.forEach(function(rate) {\n *   startingValue *= rate;\n * });\n * averageGrowthRates.forEach(function(rate) {\n *   startingValueMean *= rate;\n * });\n * startingValueMean === startingValue;\n */\nfunction geometricMean(x) {\n    // The mean of no numbers is null\n    if (x.length === 0) { return null; }\n\n    // the starting value.\n    var value = 1;\n\n    for (var i = 0; i < x.length; i++) {\n        // the geometric mean is only valid for positive numbers\n        if (x[i] <= 0) { return null; }\n\n        // repeatedly multiply the value by each number\n        value *= x[i];\n    }\n\n    return Math.pow(value, 1 / x.length);\n}\n\nmodule.exports = geometricMean;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/geometric_mean.js\n **/","'use strict';\n\n/**\n * The [Harmonic Mean](https://en.wikipedia.org/wiki/Harmonic_mean) is\n * a mean function typically used to find the average of rates.\n * This mean is calculated by taking the reciprocal of the arithmetic mean\n * of the reciprocals of the input numbers.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs on `O(n)`, linear time in respect to the array.\n *\n * @param {Array<number>} x input\n * @returns {number} harmonic mean\n * @example\n * ss.harmonicMean([2, 3]) //= 2.4\n */\nfunction harmonicMean(x) {\n    // The mean of no numbers is null\n    if (x.length === 0) { return null; }\n\n    var reciprocalSum = 0;\n\n    for (var i = 0; i < x.length; i++) {\n        // the harmonic mean is only valid for positive numbers\n        if (x[i] <= 0) { return null; }\n\n        reciprocalSum += 1 / x[i];\n    }\n\n    // divide n by the the reciprocal sum\n    return x.length / reciprocalSum;\n}\n\nmodule.exports = harmonicMean;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/harmonic_mean.js\n **/","'use strict';\n\nvar quantile = require('./quantile');\n\n/**\n * The [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range) is\n * a measure of statistical dispersion, or how scattered, spread, or\n * concentrated a distribution is. It's computed as the difference between\n * the third quartile and first quartile.\n *\n * @param {Array<number>} sample\n * @returns {number} interquartile range: the span between lower and upper quartile,\n * 0.25 and 0.75\n * @example\n * interquartileRange([0, 1, 2, 3]); //= 2\n */\nfunction interquartileRange(sample) {\n    // We can't derive quantiles from an empty list\n    if (sample.length === 0) { return null; }\n\n    // Interquartile range is the span between the upper quartile,\n    // at `0.75`, and lower quartile, `0.25`\n    return quantile(sample, 0.75) - quantile(sample, 0.25);\n}\n\nmodule.exports = interquartileRange;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/interquartile_range.js\n **/","'use strict';\n\n/**\n * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n * is a simple way to find a fitted line\n * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line\n * using the least sum of squares.\n *\n * @param {Array<Array<number>>} data an array of two-element of arrays,\n * like `[[0, 1], [2, 3]]`\n * @returns {Object} object containing slope and intersect of regression line\n * @example\n * linearRegression([[0, 0], [1, 1]]); // { m: 1, b: 0 }\n */\nfunction linearRegression(data) {\n\n    var m, b;\n\n    // Store data length in a local variable to reduce\n    // repeated object property lookups\n    var dataLength = data.length;\n\n    //if there's only one point, arbitrarily choose a slope of 0\n    //and a y-intercept of whatever the y of the initial point is\n    if (dataLength === 1) {\n        m = 0;\n        b = data[0][1];\n    } else {\n        // Initialize our sums and scope the `m` and `b`\n        // variables that define the line.\n        var sumX = 0, sumY = 0,\n            sumXX = 0, sumXY = 0;\n\n        // Use local variables to grab point values\n        // with minimal object property lookups\n        var point, x, y;\n\n        // Gather the sum of all x values, the sum of all\n        // y values, and the sum of x^2 and (x*y) for each\n        // value.\n        //\n        // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy\n        for (var i = 0; i < dataLength; i++) {\n            point = data[i];\n            x = point[0];\n            y = point[1];\n\n            sumX += x;\n            sumY += y;\n\n            sumXX += x * x;\n            sumXY += x * y;\n        }\n\n        // `m` is the slope of the regression line\n        m = ((dataLength * sumXY) - (sumX * sumY)) /\n            ((dataLength * sumXX) - (sumX * sumX));\n\n        // `b` is the y-intercept of the line.\n        b = (sumY / dataLength) - ((m * sumX) / dataLength);\n    }\n\n    // Return both values as an object.\n    return {\n        m: m,\n        b: b\n    };\n}\n\n\nmodule.exports = linearRegression;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/linear_regression.js\n **/","'use strict';\n\n/**\n * Given the output of `linearRegression`: an object\n * with `m` and `b` values indicating slope and intercept,\n * respectively, generate a line function that translates\n * x values into y values.\n *\n * @param {Object} mb object with `m` and `b` members, representing\n * slope and intersect of desired line\n * @returns {Function} method that computes y-value at any given\n * x-value on the line.\n * @example\n * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));\n * l(0) //= 0\n * l(2) //= 2\n */\nfunction linearRegressionLine(mb) {\n    // Return a function that computes a `y` value for each\n    // x value it is given, based on the values of `b` and `a`\n    // that we just computed.\n    return function(x) {\n        return mb.b + (mb.m * x);\n    };\n}\n\nmodule.exports = linearRegressionLine;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/linear_regression_line.js\n **/","'use strict';\n\nvar median = require('./median');\n\n/**\n * The [Median Absolute Deviation](http://en.wikipedia.org/wiki/Median_absolute_deviation) is\n * a robust measure of statistical\n * dispersion. It is more resilient to outliers than the standard deviation.\n *\n * @param {Array<number>} x input array\n * @returns {number} median absolute deviation\n * @example\n * mad([1, 1, 2, 2, 4, 6, 9]); //= 1\n */\nfunction mad(x) {\n    // The mad of nothing is null\n    if (!x || x.length === 0) { return null; }\n\n    var medianValue = median(x),\n        medianAbsoluteDeviations = [];\n\n    // Make a list of absolute deviations from the median\n    for (var i = 0; i < x.length; i++) {\n        medianAbsoluteDeviations.push(Math.abs(x[i] - medianValue));\n    }\n\n    // Find the median value of that list\n    return median(medianAbsoluteDeviations);\n}\n\nmodule.exports = mad;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/mad.js\n **/","'use strict';\n\n/**\n * This computes the maximum number in an array.\n *\n * This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input\n * @returns {number} maximum value\n * @example\n * console.log(max([1, 2, 3, 4])); // 4\n */\nfunction max(x) {\n    var value;\n    for (var i = 0; i < x.length; i++) {\n        // On the first iteration of this loop, max is\n        // undefined and is thus made the maximum element in the array\n        if (x[i] > value || value === undefined) {\n            value = x[i];\n        }\n    }\n    return value;\n}\n\nmodule.exports = max;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/max.js\n **/","'use strict';\n\n/**\n * The min is the lowest number in the array. This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input\n * @returns {number} minimum value\n * @example\n * min([1, 5, -10, 100, 2]); // -100\n */\nfunction min(x) {\n    var value;\n    for (var i = 0; i < x.length; i++) {\n        // On the first iteration of this loop, min is\n        // undefined and is thus made the minimum element in the array\n        if (x[i] < value || value === undefined) {\n            value = x[i];\n        }\n    }\n    return value;\n}\n\nmodule.exports = min;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/min.js\n **/","'use strict';\n\n/**\n * **Mixin** simple_statistics to a single Array instance if provided\n * or the Array native object if not. This is an optional\n * feature that lets you treat simple_statistics as a native feature\n * of Javascript.\n *\n * @param {Object} ss simple statistics\n * @param {Array} [array=] a single array instance which will be augmented\n * with the extra methods. If omitted, mixin will apply to all arrays\n * by changing the global `Array.prototype`.\n * @returns {*} the extended Array, or Array.prototype if no object\n * is given.\n *\n * @example\n * var myNumbers = [1, 2, 3];\n * mixin(ss, myNumbers);\n * console.log(myNumbers.sum()); // 6\n */\nfunction mixin(ss, array) {\n    var support = !!(Object.defineProperty && Object.defineProperties);\n    // Coverage testing will never test this error.\n    /* istanbul ignore next */\n    if (!support) {\n        throw new Error('without defineProperty, simple-statistics cannot be mixed in');\n    }\n\n    // only methods which work on basic arrays in a single step\n    // are supported\n    var arrayMethods = ['median', 'standardDeviation', 'sum',\n        'sampleSkewness',\n        'mean', 'min', 'max', 'quantile', 'geometricMean',\n        'harmonicMean', 'root_mean_square'];\n\n    // create a closure with a method name so that a reference\n    // like `arrayMethods[i]` doesn't follow the loop increment\n    function wrap(method) {\n        return function() {\n            // cast any arguments into an array, since they're\n            // natively objects\n            var args = Array.prototype.slice.apply(arguments);\n            // make the first argument the array itself\n            args.unshift(this);\n            // return the result of the ss method\n            return ss[method].apply(ss, args);\n        };\n    }\n\n    // select object to extend\n    var extending;\n    if (array) {\n        // create a shallow copy of the array so that our internal\n        // operations do not change it by reference\n        extending = array.slice();\n    } else {\n        extending = Array.prototype;\n    }\n\n    // for each array function, define a function that gets\n    // the array as the first argument.\n    // We use [defineProperty](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty)\n    // because it allows these properties to be non-enumerable:\n    // `for (var in x)` loops will not run into problems with this\n    // implementation.\n    for (var i = 0; i < arrayMethods.length; i++) {\n        Object.defineProperty(extending, arrayMethods[i], {\n            value: wrap(arrayMethods[i]),\n            configurable: true,\n            enumerable: false,\n            writable: true\n        });\n    }\n\n    return extending;\n}\n\nmodule.exports = mixin;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/mixin.js\n **/","'use strict';\n\nvar numericSort = require('./numeric_sort');\n\n/**\n * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs on `O(n)`, linear time in respect to the array.\n *\n * @param {Array<number>} x input\n * @returns {number} mode\n * @example\n * mode([0, 0, 1]); //= 0\n */\nfunction mode(x) {\n\n    // Handle edge cases:\n    // The median of an empty list is null\n    if (x.length === 0) { return null; }\n    else if (x.length === 1) { return x[0]; }\n\n    // Sorting the array lets us iterate through it below and be sure\n    // that every time we see a new number it's new and we'll never\n    // see the same number twice\n    var sorted = numericSort(x);\n\n    // This assumes it is dealing with an array of size > 1, since size\n    // 0 and 1 are handled immediately. Hence it starts at index 1 in the\n    // array.\n    var last = sorted[0],\n        // store the mode as we find new modes\n        value,\n        // store how many times we've seen the mode\n        maxSeen = 0,\n        // how many times the current candidate for the mode\n        // has been seen\n        seenThis = 1;\n\n    // end at sorted.length + 1 to fix the case in which the mode is\n    // the highest number that occurs in the sequence. the last iteration\n    // compares sorted[i], which is undefined, to the highest number\n    // in the series\n    for (var i = 1; i < sorted.length + 1; i++) {\n        // we're seeing a new number pass by\n        if (sorted[i] !== last) {\n            // the last number is the new mode since we saw it more\n            // often than the old one\n            if (seenThis > maxSeen) {\n                maxSeen = seenThis;\n                value = last;\n            }\n            seenThis = 1;\n            last = sorted[i];\n        // if this isn't a new number, it's one more occurrence of\n        // the potential mode\n        } else { seenThis++; }\n    }\n    return value;\n}\n\nmodule.exports = mode;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/mode.js\n **/","'use strict';\n\n/**\n * This is a single-layer [Perceptron Classifier](http://en.wikipedia.org/wiki/Perceptron) that takes\n * arrays of numbers and predicts whether they should be classified\n * as either 0 or 1 (negative or positive examples).\n * @class\n * @example\n * // Create the model\n * var p = new PerceptronModel();\n * // Train the model with input with a diagonal boundary.\n * for (var i = 0; i < 5; i++) {\n *     p.train([1, 1], 1);\n *     p.train([0, 1], 0);\n *     p.train([1, 0], 0);\n *     p.train([0, 0], 0);\n * }\n * p.predict([0, 0]); // 0\n * p.predict([0, 1]); // 0\n * p.predict([1, 0]); // 0\n * p.predict([1, 1]); // 1\n */\nfunction PerceptronModel() {\n    // The weights, or coefficients of the model;\n    // weights are only populated when training with data.\n    this.weights = [];\n    // The bias term, or intercept; it is also a weight but\n    // it's stored separately for convenience as it is always\n    // multiplied by one.\n    this.bias = 0;\n}\n\n/**\n * **Predict**: Use an array of features with the weight array and bias\n * to predict whether an example is labeled 0 or 1.\n *\n * @param {Array<number>} features an array of features as numbers\n * @returns {number} 1 if the score is over 0, otherwise 0\n */\nPerceptronModel.prototype.predict = function(features) {\n\n    // Only predict if previously trained\n    // on the same size feature array(s).\n    if (features.length !== this.weights.length) { return null; }\n\n    // Calculate the sum of features times weights,\n    // with the bias added (implicitly times one).\n    var score = 0;\n    for (var i = 0; i < this.weights.length; i++) {\n        score += this.weights[i] * features[i];\n    }\n    score += this.bias;\n\n    // Classify as 1 if the score is over 0, otherwise 0.\n    if (score > 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n};\n\n/**\n * **Train** the classifier with a new example, which is\n * a numeric array of features and a 0 or 1 label.\n *\n * @param {Array<number>} features an array of features as numbers\n * @param {number} label either 0 or 1\n * @returns {PerceptronModel} this\n */\nPerceptronModel.prototype.train = function(features, label) {\n    // Require that only labels of 0 or 1 are considered.\n    if (label !== 0 && label !== 1) { return null; }\n    // The length of the feature array determines\n    // the length of the weight array.\n    // The perceptron will continue learning as long as\n    // it keeps seeing feature arrays of the same length.\n    // When it sees a new data shape, it initializes.\n    if (features.length !== this.weights.length) {\n        this.weights = features;\n        this.bias = 1;\n    }\n    // Make a prediction based on current weights.\n    var prediction = this.predict(features);\n    // Update the weights if the prediction is wrong.\n    if (prediction !== label) {\n        var gradient = label - prediction;\n        for (var i = 0; i < this.weights.length; i++) {\n            this.weights[i] += gradient * features[i];\n        }\n        this.bias += gradient;\n    }\n    return this;\n};\n\nmodule.exports = PerceptronModel;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/perceptron.js\n **/","'use strict';\n\nvar epsilon = require('./epsilon');\nvar factorial = require('./factorial');\n\n/**\n * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)\n * is a discrete probability distribution that expresses the probability\n * of a given number of events occurring in a fixed interval of time\n * and/or space if these events occur with a known average rate and\n * independently of the time since the last event.\n *\n * The Poisson Distribution is characterized by the strictly positive\n * mean arrival or occurrence rate, `λ`.\n *\n * @param {number} lambda location poisson distribution\n * @returns {number} value of poisson distribution at that point\n */\nfunction poissonDistribution(lambda) {\n    // Check that lambda is strictly positive\n    if (lambda <= 0) { return null; }\n\n    // our current place in the distribution\n    var x = 0,\n        // and we keep track of the current cumulative probability, in\n        // order to know when to stop calculating chances.\n        cumulativeProbability = 0,\n        // the calculated cells to be returned\n        cells = {};\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] = (Math.pow(Math.E, -lambda) * Math.pow(lambda, x)) / factorial(x);\n        cumulativeProbability += cells[x];\n        x++;\n    // when the cumulativeProbability is nearly 1, we've calculated\n    // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nmodule.exports = poissonDistribution;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/poisson_distribution.js\n **/","'use strict';\n\nvar epsilon = require('./epsilon');\nvar inverseErrorFunction = require('./inverse_error_function');\n\n/**\n * The [Probit](http://en.wikipedia.org/wiki/Probit)\n * is the inverse of cumulativeStdNormalProbability(),\n * and is also known as the normal quantile function.\n *\n * It returns the number of standard deviations from the mean\n * where the p'th quantile of values can be found in a normal distribution.\n * So, for example, probit(0.5 + 0.6827/2) ≈ 1 because 68.27% of values are\n * normally found within 1 standard deviation above or below the mean.\n *\n * @param {number} p\n * @returns {number} probit\n */\nfunction probit(p) {\n    if (p === 0) {\n        p = epsilon;\n    } else if (p >= 1) {\n        p = 1 - epsilon;\n    }\n    return Math.sqrt(2) * inverseErrorFunction(2 * p - 1);\n}\n\nmodule.exports = probit;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/probit.js\n **/","'use strict';\n\n/**\n * The [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)\n * value of data compared with a function `f`\n * is the sum of the squared differences between the prediction\n * and the actual value.\n *\n * @param {Array<Array<number>>} data input data: this should be doubly-nested\n * @param {Function} func function called on `[i][0]` values within the dataset\n * @returns {number} r-squared value\n * @example\n * var samples = [[0, 0], [1, 1]];\n * var regressionLine = linearRegressionLine(linearRegression(samples));\n * rSquared(samples, regressionLine); //= 1 this line is a perfect fit\n */\nfunction rSquared(data, func) {\n    if (data.length < 2) { return 1; }\n\n    // Compute the average y value for the actual\n    // data set in order to compute the\n    // _total sum of squares_\n    var sum = 0, average;\n    for (var i = 0; i < data.length; i++) {\n        sum += data[i][1];\n    }\n    average = sum / data.length;\n\n    // Compute the total sum of squares - the\n    // squared difference between each point\n    // and the average of all points.\n    var sumOfSquares = 0;\n    for (var j = 0; j < data.length; j++) {\n        sumOfSquares += Math.pow(average - data[j][1], 2);\n    }\n\n    // Finally estimate the error: the squared\n    // difference between the estimate and the actual data\n    // value at each point.\n    var err = 0;\n    for (var k = 0; k < data.length; k++) {\n        err += Math.pow(data[k][1] - func(data[k][0]), 2);\n    }\n\n    // As the error grows larger, its ratio to the\n    // sum of squares increases and the r squared\n    // value grows lower.\n    return 1 - err / sumOfSquares;\n}\n\nmodule.exports = rSquared;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/r_squared.js\n **/","'use strict';\n\n/**\n * The Root Mean Square (RMS) is\n * a mean function used as a measure of the magnitude of a set\n * of numbers, regardless of their sign.\n * This is the square root of the mean of the squares of the\n * input numbers.\n * This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input\n * @returns {number} root mean square\n * @example\n * rootMeanSquare([-1, 1, -1, 1]); //= 1\n */\nfunction rootMeanSquare(x) {\n    if (x.length === 0) { return null; }\n\n    var sumOfSquares = 0;\n    for (var i = 0; i < x.length; i++) {\n        sumOfSquares += Math.pow(x[i], 2);\n    }\n\n    return Math.sqrt(sumOfSquares / x.length);\n}\n\nmodule.exports = rootMeanSquare;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/root_mean_square.js\n **/","'use strict';\n\nvar shuffle = require('./shuffle');\n\n/**\n * Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)\n * from a given array of `n` elements.\n *\n * The sampled values will be in any order, not necessarily the order\n * they appear in the input.\n *\n * @param {Array} array input array. can contain any type\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional source of entropy\n * instead of Math.random\n * @return {Array} subset of n elements in original array\n * @example\n * var values = [1, 2, 4, 5, 6, 7, 8, 9];\n * sample(values, 3); // returns 3 random values, like [2, 5, 8];\n */\nfunction sample(array, n, randomSource) {\n    // shuffle the original array using a fisher-yates shuffle\n    var shuffled = shuffle(array, randomSource);\n\n    // and then return a subset of it - the first `n` elements.\n    return shuffled.slice(0, n);\n}\n\nmodule.exports = sample;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/sample.js\n **/","'use strict';\n\nvar sampleCovariance = require('./sample_covariance');\nvar sampleStandardDeviation = require('./sample_standard_deviation');\n\n/**\n * The [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence) is\n * a measure of how correlated two datasets are, between -1 and 1\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample correlation\n * @example\n * var a = [1, 2, 3, 4, 5, 6];\n * var b = [2, 2, 3, 4, 5, 60];\n * sampleCorrelation(a, b); //= 0.691\n */\nfunction sampleCorrelation(x, y) {\n    var cov = sampleCovariance(x, y),\n        xstd = sampleStandardDeviation(x),\n        ystd = sampleStandardDeviation(y);\n\n    if (cov === null || xstd === null || ystd === null) {\n        return null;\n    }\n\n    return cov / xstd / ystd;\n}\n\nmodule.exports = sampleCorrelation;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/sample_correlation.js\n **/","'use strict';\n\nvar sumNthPowerDeviations = require('./sum_nth_power_deviations');\nvar sampleStandardDeviation = require('./sample_standard_deviation');\n\n/**\n * [Skewness](http://en.wikipedia.org/wiki/Skewness) is\n * a measure of the extent to which a probability distribution of a\n * real-valued random variable \"leans\" to one side of the mean.\n * The skewness value can be positive or negative, or even undefined.\n *\n * Implementation is based on the adjusted Fisher-Pearson standardized\n * moment coefficient, which is the version found in Excel and several\n * statistical packages including Minitab, SAS and SPSS.\n *\n * @param {Array<number>} x input\n * @returns {number} sample skewness\n * @example\n * var data = [2, 4, 6, 3, 1];\n * sampleSkewness(data); //= 0.5901286564\n */\nfunction sampleSkewness(x) {\n    // The skewness of less than three arguments is null\n    if (x.length < 3) { return null; }\n\n    var n = x.length,\n        cubedS = Math.pow(sampleStandardDeviation(x), 3),\n        sumCubedDeviations = sumNthPowerDeviations(x, 3);\n\n    return n * sumCubedDeviations / ((n - 1) * (n - 2) * cubedS);\n}\n\nmodule.exports = sampleSkewness;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/sample_skewness.js\n **/","'use strict';\n\nvar standardDeviation = require('./standard_deviation');\nvar mean = require('./mean');\n\n/**\n * This is to compute [a one-sample t-test](https://en.wikipedia.org/wiki/Student%27s_t-test#One-sample_t-test), comparing the mean\n * of a sample to a known value, x.\n *\n * in this case, we're trying to determine whether the\n * population mean is equal to the value that we know, which is `x`\n * here. usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * @param {Array<number>} sample an array of numbers as input\n * @param {number} x expected vale of the population mean\n * @returns {number} value\n * @example\n * tTest([1, 2, 3, 4, 5, 6], 3.385); //= 0.16494154\n */\nfunction tTest(sample, x) {\n    // The mean of the sample\n    var sampleMean = mean(sample);\n\n    // The standard deviation of the sample\n    var sd = standardDeviation(sample);\n\n    // Square root the length of the sample\n    var rootN = Math.sqrt(sample.length);\n\n    // Compute the known value against the sample,\n    // returning the t value\n    return (sampleMean - x) / (sd / rootN);\n}\n\nmodule.exports = tTest;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/t_test.js\n **/","'use strict';\n\nvar mean = require('./mean');\nvar sampleVariance = require('./sample_variance');\n\n/**\n * This is to compute [two sample t-test](http://en.wikipedia.org/wiki/Student's_t-test).\n * Tests whether \"mean(X)-mean(Y) = difference\", (\n * in the most common case, we often have `difference == 0` to test if two samples\n * are likely to be taken from populations with the same mean value) with\n * no prior knowledge on standard deviations of both samples\n * other than the fact that they have the same standard deviation.\n *\n * Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * `diff` can be omitted if it equals 0.\n *\n * [This is used to confirm or deny](http://www.monarchlab.org/Lab/Research/Stats/2SampleT.aspx)\n * a null hypothesis that the two populations that have been sampled into\n * `sampleX` and `sampleY` are equal to each other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @param {number} [difference=0]\n * @returns {number} test result\n * @example\n * ss.tTestTwoSample([1, 2, 3, 4], [3, 4, 5, 6], 0); //= -2.1908902300206643\n */\nfunction tTestTwoSample(sampleX, sampleY, difference) {\n    var n = sampleX.length,\n        m = sampleY.length;\n\n    // If either sample doesn't actually have any values, we can't\n    // compute this at all, so we return `null`.\n    if (!n || !m) { return null; }\n\n    // default difference (mu) is zero\n    if (!difference) {\n        difference = 0;\n    }\n\n    var meanX = mean(sampleX),\n        meanY = mean(sampleY);\n\n    var weightedVariance = ((n - 1) * sampleVariance(sampleX) +\n        (m - 1) * sampleVariance(sampleY)) / (n + m - 2);\n\n    return (meanX - meanY - difference) /\n        Math.sqrt(weightedVariance * (1 / n + 1 / m));\n}\n\nmodule.exports = tTestTwoSample;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/t_test_two_sample.js\n **/","'use strict';\n\n/**\n * The [Z-Score, or Standard Score](http://en.wikipedia.org/wiki/Standard_score).\n *\n * The standard score is the number of standard deviations an observation\n * or datum is above or below the mean. Thus, a positive standard score\n * represents a datum above the mean, while a negative standard score\n * represents a datum below the mean. It is a dimensionless quantity\n * obtained by subtracting the population mean from an individual raw\n * score and then dividing the difference by the population standard\n * deviation.\n *\n * The z-score is only defined if one knows the population parameters;\n * if one only has a sample set, then the analogous computation with\n * sample mean and sample standard deviation yields the\n * Student's t-statistic.\n *\n * @param {number} x\n * @param {number} mean\n * @param {number} standardDeviation\n * @return {number} z score\n * @example\n * ss.zScore(78, 80, 5); //= -0.4\n */\nfunction zScore(x, mean, standardDeviation) {\n    return (x - mean) / standardDeviation;\n}\n\nmodule.exports = zScore;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/simple-statistics/src/z_score.js\n **/","/* global d3 */\n// Load stylesheet\nrequire('../styles/scatterplot.scss');\n// Include and bundle simple statistics\nconst ss = require('simple-statistics');\n\n/**\n * A reusable d3 scatterplot generator\n * @name scatterplot\n * @module scatterplot\n * @memberof hakaiCharts\n * @author Taylor Denouden\n * @see {@link ./examples/scatterplot_example.html|example}\n * @see {@link http://htmlpreview.github.io/?https://github.com/tayden-hakai/hakai-charts/blob/master/examples/scatterplot_example.html|example}\n * @param {String|DOM_node} parent A DOM element to append the chart to\n * @return {object} scatterplot chart\n */\nmodule.exports = function scatterplot(parent) {\n  let _width;\n  let _height;\n  let _margin;\n  let _data;\n  let _x = d3.scale.linear();\n  let _y = d3.scale.linear();\n  let _xLog = false;\n  let _yLog = false;\n  let _xAxis;\n  let _yAxis;\n  let _xAccessor;\n  let _yAccessor;\n  let _xLabel;\n  let _yLabel;\n  let _color = d3.scale.category10();\n  let _colorAccessor = () => 0;\n  let _keyAccessor = d => d.key;\n  let _radius = 5;\n  let _regLine;\n  let _rSquared = 1;\n  let _correlation = 1;\n  let _covariance = 1;\n  let _svg;\n\n  /**\n   * Return the base ten log of a Number\n   * @private\n   * @param {number} d - A number to apply the operation on\n   * @return {number} log base 10 of d\n   */\n  function log10(d) {\n    return Math.log(d) / Math.log(10);\n  }\n\n  /**\n   * Given an x value of un-transformed data (no log transform etc.),\n   * get the untransformed y coordinate from the regression line\n   * @private\n   * @param {number} x - The untransformed x value in linear space\n   * @param {function} regLine - The regression line calculated using\n   *    a transformed dataset that accounted for the log scales\n   * @return {number} y - The untransformed y value in linear space to plot on the chart\n   */\n  function getY(x, regLine) {\n    const y = regLine(_xLog ? log10(x) : x);\n    return _yLog ? Math.pow(10, y) : y;\n  }\n\n  /**\n   * Calculate all chart statistical values and regresslion linearRegression\n   * @private\n   * @param {Object[]} data - The dataset used to calculate the statistics\n   * @return {Object} stats - An object with all calculated statistics\n   */\n  function calculateStats(data) {\n    // Get regression line formula\n    const ssData = data.map(function ssData(d) {\n      const xD = _xLog ? log10(_xAccessor(d)) : _xAccessor(d);\n      const yD = _yLog ? log10(_yAccessor(d)) : _yAccessor(d);\n      return [xD, yD];\n    });\n    const mb = ss.linearRegression(ssData);\n    const regLine = ss.linearRegressionLine(mb);\n\n    // Calculated statistics\n    const rSquared = ss.rSquared(ssData, regLine);\n    const correlation = ss.sampleCorrelation(\n      ssData.map(d => d[0]),\n      ssData.map(d => d[1])\n    );\n    const covariance = ss.sampleCovariance(\n      ssData.map(d => d[0]),\n      ssData.map(d => d[1])\n    );\n\n    return {\n      reg: mb,\n      regLine,\n      rSquared,\n      correlation,\n      covariance,\n    };\n  }\n\n  /**\n   * Generate the chart using private variables on call to chart.render()\n   * @private\n   * @returns {chart}\n   */\n  function _chart() {\n    // Create svg object\n    _svg = d3.select(parent).append('svg')\n      .attr('width', _width + _margin.left + _margin.right)\n      .attr('height', _height + _margin.top + _margin.bottom)\n    .append('g')\n      .attr('transform', 'translate(' + _margin.left + ',' + _margin.top + ')');\n\n    // Create cleaned dataset that doesn't include non numeric or log(0) values\n    const cleanData = _data\n        .filter(d => !(isNaN(_xAccessor(d)) || isNaN(_yAccessor(d))))\n        .filter(d => !((_xLog && _xAccessor(d) === 0) || (_yLog && _yAccessor(d) === 0)));\n\n    // Set x and y axis based on selected attributes\n    _x.domain(d3.extent(cleanData, _xAccessor))\n      .range([0, _width]);\n    _y.domain(d3.extent(cleanData, _yAccessor))\n      .range([_height, 0]);\n\n    // Create svg axis generators\n    _xAxis = d3.svg.axis()\n      .scale(_x)\n      .orient('bottom')\n      .tickSize(-_height);\n    _yAxis = d3.svg.axis()\n      .scale(_y)\n      .orient('left')\n      .tickSize(-_width);\n\n    // Add axes to chart\n    _svg.append('g')\n        .attr('class', 'x axis')\n        .attr('transform', 'translate(0, ' + _height + ')')\n        .call(_xAxis);\n    _svg.append('g')\n        .attr('class', 'y axis')\n        .call(_yAxis);\n\n    // Add axis labels\n    _svg.append('text')\n        .attr('class', 'x label')\n        .attr('text-anchor', 'end')\n        .attr('x', _width - 10)\n        .attr('y', _height - 5)\n        .text(_xLabel);\n    _svg.append('text')\n        .attr('class', 'y label')\n        .attr('transform', 'rotate(-90)')\n        .attr('text-anchor', 'end')\n        .attr('x', -7)\n        .attr('y', 15)\n        .text(_yLabel);\n\n    // Add frame around chart\n    _svg.append('rect')\n        .attr('class', 'frame')\n        .attr('width', _width)\n        .attr('height', _height);\n\n    // Create clip path\n    _svg.append('defs')\n      .append('clipPath')\n        .attr('id', 'chartClip')\n      .append('rect')\n        .attr('width', _width)\n        .attr('height', _height);\n\n    // Calculate statistics and regression line\n    const stats = calculateStats(cleanData);\n    _regLine = stats.regLine;\n    _rSquared = stats.rSquared;\n    _correlation = stats.correlation;\n    _covariance = stats.covariance;\n\n    // Add regression line to Chart\n    _svg.append('g')\n        .attr('class', 'regression')\n        .attr('clip-path', 'url(#chartClip)')\n      .append('line')\n        .style('stroke', 'black')\n        .style('stroke-width', '1')\n        .style('stroke-dasharray', '5,5,10,5')\n        .attr('x1', _x(_x.domain()[0]))\n        .attr('y1', _y(getY(_x.domain()[0], _regLine)))\n        .attr('x2', _x(_x.domain()[1]))\n        .attr('y2', _y(getY(_x.domain()[1], _regLine)));\n\n    // Add data marks to chart\n    const marks = _svg.selectAll('g.mark')\n        .data(cleanData)\n      .enter().append('g')\n        .attr('class', 'mark');\n\n    marks.append('circle')\n        .attr('cx', d => _x(_xAccessor(d)))\n        .attr('cy', d => _y(_yAccessor(d)))\n        .attr('r', _radius)\n        .attr('fill', d => _color(_colorAccessor(d)));\n\n    marks.append('text')\n        .text(_keyAccessor)\n        .attr('x', d => _x(_xAccessor(d)))\n        .attr('y', d => _y(_yAccessor(d)))\n        .attr('text-anchor', 'end')\n        .attr('dy', -5)\n        .attr('dx', -2);\n  }\n\n  /**\n   * Draw the chart after parameters have been set.\n   * @name render\n   * @instance\n   * @method\n   * @return {chart}\n   */\n  _chart.render = function render() {\n    this.call();\n    return _chart;\n  };\n\n  /**\n   * Redraw and transform the chart after parameter changes.\n   * @name redraw\n   * @instance\n   * @method\n   * @return {chart}\n   */\n  _chart.redraw = function redraw() {\n    // Create cleaned dataset that doesn't include non numeric or log(0) values\n    const cleanData = _data\n        .filter(d => !(isNaN(_xAccessor(d)) || isNaN(_yAccessor(d))))\n        .filter(d => !((_xLog && _xAccessor(d) === 0) || (_yLog && _yAccessor(d) === 0)));\n\n    // Update x and y domain\n    _x.domain(d3.extent(cleanData, _xAccessor))\n      .range([0, _width]);\n    _y.domain(d3.extent(cleanData, _yAccessor))\n      .range([_height, 0]);\n\n    // Update axes generator scale\n    _xAxis.scale(_x);\n    _yAxis.scale(_y);\n\n    // Define consistent transition duration\n    const t = 1500;\n\n    // Update axes\n    _svg.select('.x.axis')\n        .transition().duration(t)\n        .call(_xAxis);\n    _svg.select('.y.axis')\n        .transition().duration(t)\n        .call(_yAxis);\n\n    // Update axis labels\n    _svg.select('.x.label')\n        .text(_xLabel);\n    _svg.select('.y.label')\n        .text(_yLabel);\n\n    // Calculate statistics and regression line\n    const stats = calculateStats(cleanData);\n    _regLine = stats.regLine;\n    _rSquared = stats.rSquared;\n    _correlation = stats.correlation;\n    _covariance = stats.covariance;\n\n    // Add regression line to Chart\n    _svg.select('.regression line')\n      .transition().duration(t)\n        .attr('x1', _x(_x.domain()[0]))\n        .attr('y1', _y(getY(_x.domain()[0], _regLine)))\n        .attr('x2', _x(_x.domain()[1]))\n        .attr('y2', _y(getY(_x.domain()[1], _regLine)));\n\n    // Update data and mark positions\n    const marks = _svg.selectAll('g.mark')\n        .data(cleanData, _keyAccessor);\n\n    // Update\n    marks.selectAll('circle')\n      .transition().duration(t)\n        .attr('cx', d => _x(_xAccessor(d)))\n        .attr('cy', d => _y(_yAccessor(d)))\n        .attr('r', _radius)\n        .attr('fill', d => _color(_colorAccessor(d)));\n\n    marks.selectAll('text')\n      .transition().duration(t)\n        .attr('x', d => _x(_xAccessor(d)))\n        .attr('y', d => _y(_yAccessor(d)));\n\n    // Enter\n    const g = marks.enter().append('g')\n        .attr('class', 'mark');\n\n    g.append('circle')\n        .attr('cx', d => _x(_xAccessor(d)))\n        .attr('cy', d => _y(_yAccessor(d)))\n        .attr('r', _radius)\n        .attr('fill', d => _color(_colorAccessor(d)));\n\n    g.append('text')\n        .text(_keyAccessor)\n        .attr('x', d => _x(_xAccessor(d)))\n        .attr('y', d => _y(_yAccessor(d)))\n        .attr('text-anchor', 'end')\n        .attr('dy', -5)\n        .attr('dx', -2);\n\n    // Exit\n    marks.exit().remove();\n\n    return _chart;\n  };\n\n  /**\n   * Set the width attribute of a chart.\n   * @name width\n   * @instance\n   * @param {int} [val] The chart width\n   * @return {chart}\n   */\n  /**\n   * Get the width attribute of a chart.\n   * @name width\n   * @instance\n   * @return {int}\n   */\n  _chart.width = function width(val) {\n    if (!arguments.length) { return _width; }\n    _width = val;\n    return _chart;\n  };\n\n  /**\n   * Set the height attribute of a chart.\n   * @name height\n   * @instance\n   * @param {int} [val] The chart height\n   * @return {chart}\n   */\n  /**\n   * Get the height attribute of a chart.\n   * @name height\n   * @instance\n   * @return {int}\n   */\n  _chart.height = function height(val) {\n    if (!arguments.length) { return _height; }\n    _height = val;\n    return _chart;\n  };\n\n  /**\n   * Set the margin attribute of a chart.\n   * @name margin\n   * @instance\n   * @param {Object} [val] The chart margins in format {top: 5, left: 5, right: 10, bottom: 15}\n   * @return {chart}\n   */\n  /**\n   * Get the margin attribute of a chart.\n   * @name margin\n   * @instance\n   * @return {Object}\n   */\n  _chart.margin = function margin(val) {\n    if (!arguments.length) { return _margin; }\n    _margin = val;\n    return _chart;\n  };\n\n  /**\n   * Set the data that accessor functions refer to.\n   * @name data\n   * @instance\n   * @param {Object[]} [val] JSON data being accessed by all accessor functions\n   * @return {chart}\n   */\n  /**\n   * Get the data that accessor functions refer to.\n   * @name data\n   * @instance\n   * @return {Object[]}\n   */\n  _chart.data = function data(val) {\n    if (!arguments.length) { return _data; }\n    _data = val;\n    return _chart;\n  };\n\n  /**\n   * Set the function used to access the data shown on the y axis.\n   * @name xAccessor\n   * @instance\n   * @param {Function|Number} [val] The x axis data accessor function\n   * @return {chart}\n   */\n  /**\n   * Get the function used to access the data shown on the x axis.\n   * @name xAccessor\n   * @instance\n   * @return {Function|Number} The x axis data accessor\n   */\n  _chart.xAccessor = function xAccessor(val) {\n    if (!arguments.length) { return _xAccessor; }\n    _xAccessor = val;\n    return _chart;\n  };\n\n  /**\n   * Set the function used to access the data shown on the y axis.\n   * @name yAccessor\n   * @instance\n   * @param {Function|Number} [val] The y axis data accessor function\n   * @return {chart}\n   */\n  /**\n   * Get the function used to access the data shown on the y axis.\n   * @name yAccessor\n   * @instance\n   * @return {Function|Number} The y axis data accessor\n   */\n  _chart.yAccessor = function yAccessor(val) {\n    if (!arguments.length) { return _yAccessor; }\n    _yAccessor = val;\n    return _chart;\n  };\n\n  /**\n   * Set the x axis label.\n   * @name xLabel\n   * @instance\n   * @param {String} [val] The x label\n   * @return {chart}\n   */\n  /**\n   * Get the x axis label.\n   * @name xLabel\n   * @instance\n   * @return {String}\n   */\n  _chart.xLabel = function xLabel(val) {\n    if (!arguments.length) { return _xLabel; }\n    _xLabel = val;\n    return _chart;\n  };\n\n  /**\n   * Set the y axis label.\n   * @name yLabel\n   * @instance\n   * @param {String} [val] The y label\n   * @return {chart}\n   */\n  /**\n   * Get the y axis label.\n   * @name yLabel\n   * @instance\n   * @return {String}\n   */\n  _chart.yLabel = function yLabel(val) {\n    if (!arguments.length) { return _yLabel; }\n    _yLabel = val;\n    return _chart;\n  };\n\n  /**\n   * Set the x axis scale as log transformed or not.\n   * @name xLog\n   * @instance\n   * @param {Boolean} [val=false] Flag to transform x axis\n   * @return {chart}\n   */\n  /**\n   * Get boolean of whether the x axis scale is log transformed.\n   * @name xLog\n   * @instance\n   * @return {Boolean}\n   */\n  _chart.xLog = function xLog(val) {\n    if (!arguments.length) { return _xLog; }\n    _xLog = val;\n    _x = _xLog ? d3.scale.log() : d3.scale.linear();\n    return _chart;\n  };\n\n  /**\n   * Set the y axis scale as log transformed or not.\n   * @name yLog\n   * @instance\n   * @param {Boolean} [val=false] Flag to transform y axis\n   * @return {chart}\n   */\n  /**\n   * Get boolean of whether the y axis scale is log transformed.\n   * @name yLog\n   * @instance\n   * @return {Boolean}\n   */\n  _chart.yLog = function yLog(val) {\n    if (!arguments.length) { return _yLog; }\n    _yLog = val;\n    _y = _yLog ? d3.scale.log() : d3.scale.linear();\n    return _chart;\n  };\n\n  /**\n   * Set the color scale function that accepts a data value and returns a color.\n   * @name color\n   * @instance\n   * @param {Function} [val=d3.scale.category10()] The color scale function\n   * @return {chart}\n   */\n  /**\n   * Get the color scale function\n   * @name color\n   * @instance\n   * @return {Function}\n   */\n  _chart.color = function color(val) {\n    if (!arguments.length) { return _color; }\n    _color = val;\n    return _chart;\n  };\n\n  /**\n   * Set the function used to access the data and pass the value to the color function.\n   * @name colorAccessor\n   * @instance\n   * @param {Function} [val=function(){ return 0; }] The colorAccessor function\n   * @return {chart}\n   */\n  /**\n   * Get the function used to access the data point color.\n   * @name colorAccessor\n   * @instance\n   * @return {Function}\n   */\n  _chart.colorAccessor = function colorAccessor(val) {\n    if (!arguments.length) { return _colorAccessor; }\n    _colorAccessor = val;\n    return _chart;\n  };\n\n  /**\n   * Set a function used to determine which points shown are the same data point.\n   * Allows for mark translation on redraw.\n   * @name keyAccessor\n   * @instance\n   * @param {Function} [val=function(d){ return d.key; }] The keyAccessor function\n   * @return {chart}\n   */\n  /**\n   * Get the function used to determine which points shown are the same datum.\n   * @name keyAccessor\n   * @instance\n   * @return {int}\n   */\n  _chart.keyAccessor = function keyAccessor(val) {\n    if (!arguments.length) { return _keyAccessor; }\n    _keyAccessor = val;\n    return _chart;\n  };\n\n  /**\n   * Set the radius value of the scatterplot\n   * @name radius\n   * @instance\n   * @param {Number} [val=5] The radius in px\n   * @return {chart}\n   */\n  /**\n   * Get the radius value of the scatterplot\n   * @name radius\n   * @instance\n   * @return {int|Function}\n   */\n  _chart.radius = function radius(val) {\n    if (!arguments.length) { return _radius; }\n    _radius = val;\n    return _chart;\n  };\n\n  /**\n   * Return the R squared value determined by the linear regression function.\n   * @name rSquared\n   * @instance\n   * @return {float}\n   */\n  _chart.rSquared = function rSquared() {\n    return _rSquared;\n  };\n\n  /**\n   * Return the correlation value determined by the linear regression function.\n   * @name correlation\n   * @instance\n   * @return {float}\n   */\n  _chart.correlation = function correlation() {\n    return _correlation;\n  };\n\n  /**\n   * Return the covariance value determined by the linear regression function.\n   * @name covariance\n   * @instance\n   * @return {float}\n   */\n  _chart.covariance = function covariance() {\n    return _covariance;\n  };\n\n  return _chart;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/js/scatterplot.js\n **/","exports = module.exports = require(\"./../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"body{background:#fff;font-family:Helvetica Neue,Helvetica,sans-serif}.rot-x .x.axis text{text-anchor:start;transform:rotate(90deg) translate(7px,-13px)}svg{font:10px sans-serif}.axis line{stroke:#ddd}.axis path{display:none}.frame{fill:none;stroke:#aaa}.label{font:11px sans-serif;font-weight:700}circle{fill-opacity:.7}.mark text{display:none}.mark:hover text{display:block}.log-checkbox input{margin-right:5px}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./~/sass-loader!./src/styles/scatterplot.scss\n ** module id = 53\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader/addStyles.js\n ** module id = 54\n ** module chunks = 0\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./scatterplot.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./scatterplot.scss\", function() {\n\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./scatterplot.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/styles/scatterplot.scss\n ** module id = 55\n ** module chunks = 0\n **/"],"sourceRoot":""}