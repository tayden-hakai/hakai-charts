{"version":3,"sources":["node_modules/browser-pack/_prelude.js","hakai_charts.min.js","index.js","src/js/parallel_coordinates.js","src/js/scatterplot.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","parallelCoordinates","scatterplot","./src/js/parallel_coordinates","./src/js/scatterplot",2,"parent","position","d","v","_dragging","_x","path","_line","_dimensions","map","p","_y","dataToLines","data","result","forEach","dim","line","name","zScore","col","mean","d3","sigma","deviation","changeColor","dimension","_svg","selectAll","style","classed","filter","z","_lineData","parseFloat","select","_color","transition","g","duration","brushstart","event","sourceEvent","stopPropagation","brush","actives","empty","extents","extent","_foreground","every","x","Math","round","_chart","append","attr","_width","_margin","left","right","_height","top","bottom","_data","scale","linear","domain","range","ordinal","rangePoints","_background","enter","behavior","drag","origin","on","min","max","sort","b","this","delay","each","_axis","text","svg","y","axis","orient","interpolate","interpolateLab","undefined","render","redraw","remove","width","val","arguments","height","margin",3,"log10","log","getY","regLine","_xLog","_yLog","pow","calculateStats","ssData","xD","_xAccessor","yD","_yAccessor","mb","ss","linearRegression","linearRegressionLine","rSquared","correlation","sampleCorrelation","covariance","sampleCovariance","reg","cleanData","isNaN","_xAxis","tickSize","_yAxis","_xLabel","_yLabel","stats","_regLine","_rSquared","_correlation","_covariance","marks","_radius","_colorAccessor","_keyAccessor","category10","key","exit","xAccessor","yAccessor","xLabel","yLabel","xLog","yLog","color","colorAccessor","keyAccessor","radius"],"mappings":"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","file":"hakai_charts.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  parallelCoordinates: require('./src/js/parallel_coordinates'),\n  scatterplot: require('./src/js/scatterplot')\n};\n\n},{\"./src/js/parallel_coordinates\":2,\"./src/js/scatterplot\":3}],2:[function(require,module,exports){\n'use strict';\n\n/* global d3 */\n\n/**\n * A reusable d3 parallel coordinates generator with statistical coloring\n * @name parallelCoordinates\n * @author Taylor Denouden\n * @param {string} parent | {DOM element} parent - A dom element to append the vis to\n * @return {object} parallelCoordinates\n */\nmodule.exports = function parallelCoordinates(parent) {\n  var _y = {};\n  var _dragging = {};\n  var _line = d3.svg.line();\n  var _axis = d3.svg.axis().orient('left');\n  var _color = d3.scale.linear().domain([-2, -0.5, 0.5, 2]).range(['#f46d43', '#74add1', '#74add1', '#66bd63']).interpolate(d3.interpolateLab);\n\n  var _width = undefined;\n  var _height = undefined;\n  var _margin = undefined;\n  var _svg = undefined;\n  var _x = undefined;\n  var _background = undefined;\n  var _foreground = undefined;\n  var _dimensions = undefined;\n  var _data = undefined;\n  var _lineData = undefined;\n\n  /**\n   * Get the x axis position for some dimension and initialize dragging\n   * @param {string} d - The dimension name\n   * @return {float} - The distance to the right of the origin\n   */\n  function position(d) {\n    var v = _dragging[d];\n    return v ? v : _x(d);\n  }\n\n  /**\n   * Generate the line path for a datum.\n   * @param {object} d - An object with axis attributes\n   * @return {string} - SVG path text\n   */\n  function path(d) {\n    return _line(_dimensions.map(function (p) {\n      return [position(p), _y[p](d[p])];\n    }));\n  }\n\n  /**\n   * Map a list of objects where each object is an attribute with line values to\n   *     a list of objects where each object is a line with its attributes listed\n   * @param {list} data - A list of objects\n   *      eg {\n   *        name: Area,\n   *        data: [14234, 34132],\n   *        scale : d3.scale.linear()\n   *      }\n   *\n   * @return {list} - A list of line objects\n   *      eg {\n   *        Area: 14234\n   *        Bird species: 67\n   *        Distance to Mainland: 14165.85749\n   *        Land within 500m: 2.60546\n   *      }\n   */\n  function dataToLines(data) {\n    var result = [];\n    data[0].data.forEach(function (d, i) {\n      return result[i] = {};\n    });\n    data.forEach(function forEachDim(dim) {\n      result.forEach(function addDimData(line, i) {\n        result[i][dim.name] = dim.data[i];\n      });\n    });\n    return result;\n  }\n\n  /**\n   * color by zScore\n   * @param {list} col - A list of values to generate a z-score function from\n   * @return {object} - Function that returns z-score relative to values in col\n   */\n  function zScore(col) {\n    var mean = d3.mean(col);\n    var sigma = d3.deviation(col);\n    // Return zScore if std_dev is not 0, else 0\n    return function (d) {\n      return sigma ? (d - mean) / sigma : 0;\n    };\n  }\n\n  /**\n   * Change foreground line color\n   * @param {string} dimension - The name of the dimension to change\n   * @returns {void}\n   */\n  function changeColor(dimension) {\n    _svg.selectAll('.dimension').style('font-weight', 'normal').classed('z-scored', false).filter(function (d) {\n      return d === dimension;\n    }).style('font-weight', 'bold').classed('z-scored', true);\n    var z = zScore(_lineData.map(function (i) {\n      return parseFloat(i[dimension]);\n    }));\n\n    // lines\n    _svg.select('.foreground').selectAll('path').style('stroke', function (d) {\n      return _color(z(d[dimension]));\n    });\n  }\n\n  /**\n   * Provide a consisten transition length\n   * @param {object} g - An d3 selection that can be transitioned\n   * @return {object} - A d3 transition object\n   */\n  function transition(g) {\n    return g.transition().duration(500);\n  }\n\n  /**\n   * A brushstart callback control\n   * @returns {void}\n   */\n  function brushstart() {\n    d3.event.sourceEvent.stopPropagation();\n  }\n\n  /**\n   * Handles a brush event, toggling the display of foreground lines.\n   * @returns {void}\n   */\n  function brush() {\n    var actives = _dimensions.filter(function (p) {\n      return !_y[p].brush.empty();\n    });\n    var extents = actives.map(function (p) {\n      return _y[p].brush.extent();\n    });\n    _foreground.style('display', function toggleDisplay(d) {\n      return actives.every(function brushed(p, i) {\n        var x = Math.round(d[p] * 100) / 100;\n        return Math.round(extents[i][0] * 100) / 100 <= x && x <= Math.round(extents[i][1] * 100) / 100;\n      }) ? null : 'none';\n    });\n  }\n\n  /**\n   * Generate the chart using private variables on call to chart.render()\n   * @returns {void}\n   */\n  function _chart() {\n    _svg = d3.select(parent).append('svg').attr('width', _width + _margin.left + _margin.right).attr('height', _height + _margin.top + _margin.bottom).append('g').attr('transform', 'translate(' + _margin.left + ',' + _margin.top + ')');\n\n    // Create a scale for each dimension\n    _data.forEach(function initScale(d) {\n      _y[d.name] = (d.scale || d3.scale.linear()).domain(d3.extent(d.data)).range([_height, 0]);\n    });\n\n    // Extract the list of _dimensions\n    _dimensions = _data.map(function (d) {\n      return d.name;\n    });\n    _x = d3.scale.ordinal().domain(_dimensions).rangePoints([0, _width], 1);\n\n    // Add grey background lines for context.\n    _background = _svg.append('g').attr('class', 'background').selectAll('path').data(_lineData).enter().append('path').attr('d', path);\n\n    // Add blue foreground lines for focus.\n    _foreground = _svg.append('g').attr('class', 'foreground').selectAll('path').data(_lineData).enter().append('path').attr('d', path);\n\n    // Add a group element for each dimension.\n    var g = _svg.selectAll('.dimension').data(_dimensions).enter().append('g').attr('class', 'dimension').attr('transform', function (d) {\n      return 'translate(' + _x(d) + ')';\n    }).call(d3.behavior.drag().origin(function (d) {\n      return { x: _x(d) };\n    }).on('dragstart', function onDragStart(d) {\n      _dragging[d] = _x(d);\n      _background.attr('visibility', 'hidden');\n    }).on('drag', function onDrag(d) {\n      _dragging[d] = Math.min(_width, Math.max(0, d3.event.x));\n      _foreground.attr('d', path);\n      _dimensions.sort(function (a, b) {\n        return position(a) - position(b);\n      });\n      _x.domain(_dimensions);\n      g.attr('transform', function (b) {\n        return 'translate(' + position(b) + ')';\n      });\n    }).on('dragend', function onDragEnd(d) {\n      delete _dragging[d];\n      transition(d3.select(this)).attr('transform', 'translate(' + _x(d) + ')');\n      transition(_foreground).attr('d', path);\n      _background.attr('d', path).transition().delay(500).duration(0).attr('visibility', null);\n    }));\n\n    // Add an axis and title.\n    g.append('g').attr('class', 'axis').each(function callAxis(d) {\n      d3.select(this).call(_axis.scale(_y[d]));\n    }).on('click', changeColor).append('text').style('text-anchor', 'middle').attr('y', -9).text(function (d) {\n      return d;\n    });\n\n    // Add and store a brush for each axis.\n    g.append('g').attr('class', 'brush').each(function storeBrush(d) {\n      d3.select(this).call(_y[d].brush = d3.svg.brush().y(_y[d]).on('brushstart', brushstart).on('brush', brush));\n    }).selectAll('rect').attr('x', -8).attr('width', 16);\n\n    // Color _dimensions by z-score\n    changeColor(_dimensions[0]);\n  }\n\n  _chart.render = function render() {\n    this.call();\n    return _chart;\n  };\n  _chart.redraw = function redraw() {\n    //  Fade out and remove lines\n    transition(_background).style('opacity', 0).transition().remove();\n    transition(_foreground).style('opacity', 0).transition().remove();\n\n    // Adjust axes domains\n    _data.forEach(function adjustAxisDomain(d) {\n      var extent = d3.extent(d.data);\n      if (extent[0] === extent[1]) {\n        extent[0] -= extent[0] / 2;\n        extent[1] += extent[1] / 2;\n      }\n      _y[d.name].domain(extent);\n    });\n\n    // Transition axes\n    _svg.selectAll('.axis').each(function transitionAxis(d) {\n      transition(d3.select(this)).delay(500).call(_axis.scale(_y[d]));\n    });\n\n    // Rebind data\n    _background = _svg.select('.background').selectAll('path').data(_lineData);\n    _foreground = _svg.select('.foreground').selectAll('path').data(_lineData);\n    // Update\n    _background.style('opacity', 0).attr('d', path);\n    _foreground.style('opacity', 0).attr('d', path);\n\n    // Enter\n    _background.enter().append('path').style('opacity', 0).attr('d', path);\n    _foreground.enter().append('path').style('opacity', 0).attr('d', path);\n\n    // Update color\n    changeColor(d3.select('.z-scored').data()[0]);\n\n    // Fade in lines\n    transition(_background).delay(1000).style('opacity', 0.5);\n    transition(_foreground).delay(1000).style('opacity', 0.5);\n\n    return _chart;\n  };\n\n  _chart.width = function width(val) {\n    if (!arguments.length) {\n      return _width;\n    }\n    _width = val;\n    return _chart;\n  };\n  _chart.height = function height(val) {\n    if (!arguments.length) {\n      return _height;\n    }\n    _height = val;\n    return _chart;\n  };\n  _chart.margin = function margin(val) {\n    if (!arguments.length) {\n      return _margin;\n    }\n    _margin = val;\n    return _chart;\n  };\n  _chart.data = function data(val) {\n    if (!arguments.length) {\n      return _data;\n    }\n    _data = val;\n    _lineData = dataToLines(_data);\n    return _chart;\n  };\n\n  return _chart;\n};\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\n/* global d3 ss */\n\n/**\n * A reusable d3 scatterplot generator\n * @name scatterplot\n * @author Taylor Denouden\n * @param {string} parent | {DOM element} parent - A dom element to append the vis to\n * @return {object} scatterplot\n */\nmodule.exports = function scatterplot(parent) {\n  var _width = undefined;\n  var _height = undefined;\n  var _margin = undefined;\n  var _data = undefined;\n  var _x = d3.scale.linear();\n  var _y = d3.scale.linear();\n  var _xLog = false;\n  var _yLog = false;\n  var _xAxis = undefined;\n  var _yAxis = undefined;\n  var _xAccessor = undefined;\n  var _yAccessor = undefined;\n  var _xLabel = undefined;\n  var _yLabel = undefined;\n  var _color = d3.scale.category10();\n  var _colorAccessor = function _colorAccessor() {\n    return 0;\n  };\n  var _keyAccessor = function _keyAccessor(d) {\n    return d.key;\n  };\n  var _radius = 5;\n  var _regLine = undefined;\n  var _rSquared = 1;\n  var _correlation = 1;\n  var _covariance = 1;\n  var _svg = undefined;\n\n  /**\n   * Return the base ten log of a Number\n   * @param {number} d - A number to apply the operation on\n   * @return {number} log base 10 of d\n   */\n  function log10(d) {\n    return Math.log(d) / Math.log(10);\n  }\n\n  /**\n   * Given an x value of un-transformed data (no log transform etc.),\n   * get the untransformed y coordinate from the regression line\n   * @param {number} x - The untransformed x value in linear space\n   * @param {function} regLine - The regression line calculated using\n   *    a transformed dataset that accounted for the log scales\n   * @return {number} y - The untransformed y value in linear space to plot on the chart\n   */\n  function getY(x, regLine) {\n    var y = regLine(_xLog ? log10(x) : x);\n    return _yLog ? Math.pow(10, y) : y;\n  }\n\n  /**\n   * Calculate all chart statistical values and regresslion linearRegression\n   * @param {Object[]} data - The dataset used to calculate the statistics\n   * @return {Object} stats - An object with all calculated statistics\n   */\n  function calculateStats(data) {\n    // Get regression line formula\n    var ssData = data.map(function ssData(d) {\n      var xD = _xLog ? log10(_xAccessor(d)) : _xAccessor(d);\n      var yD = _yLog ? log10(_yAccessor(d)) : _yAccessor(d);\n      return [xD, yD];\n    });\n    var mb = ss.linearRegression(ssData);\n    var regLine = ss.linearRegressionLine(mb);\n\n    // Calculated statistics\n    var rSquared = ss.rSquared(ssData, regLine);\n    var correlation = ss.sampleCorrelation(ssData.map(function (d) {\n      return d[0];\n    }), ssData.map(function (d) {\n      return d[1];\n    }));\n    var covariance = ss.sampleCovariance(ssData.map(function (d) {\n      return d[0];\n    }), ssData.map(function (d) {\n      return d[1];\n    }));\n\n    return {\n      reg: mb,\n      regLine: regLine,\n      rSquared: rSquared,\n      correlation: correlation,\n      covariance: covariance\n    };\n  }\n\n  function _chart() {\n    // Create svg object\n    _svg = d3.select(parent).append('svg').attr('width', _width + _margin.left + _margin.right).attr('height', _height + _margin.top + _margin.bottom).append('g').attr('transform', 'translate(' + _margin.left + ',' + _margin.top + ')');\n\n    // Create cleaned dataset that doesn't include non numeric or log(0) values\n    var cleanData = _data.filter(function (d) {\n      return !(isNaN(_xAccessor(d)) || isNaN(_yAccessor(d)));\n    }).filter(function (d) {\n      return !(_xLog && _xAccessor(d) === 0 || _yLog && _yAccessor(d) === 0);\n    });\n\n    // Set x and y axis based on selected attributes\n    _x.domain(d3.extent(cleanData, _xAccessor)).range([0, _width]);\n    _y.domain(d3.extent(cleanData, _yAccessor)).range([_height, 0]);\n\n    // Create svg axis generators\n    _xAxis = d3.svg.axis().scale(_x).orient('bottom').tickSize(-_height);\n    _yAxis = d3.svg.axis().scale(_y).orient('left').tickSize(-_width);\n\n    // Add axes to chart\n    _svg.append('g').attr('class', 'x axis').attr('transform', 'translate(0, ' + _height + ')').call(_xAxis);\n    _svg.append('g').attr('class', 'y axis').call(_yAxis);\n\n    // Add axis labels\n    _svg.append('text').attr('class', 'x label').attr('text-anchor', 'end').attr('x', _width - 10).attr('y', _height - 5).text(_xLabel);\n    _svg.append('text').attr('class', 'y label').attr('transform', 'rotate(-90)').attr('text-anchor', 'end').attr('x', -5).attr('y', 10).text(_yLabel);\n\n    // Add frame around chart\n    _svg.append('rect').attr('class', 'frame').attr('width', _width).attr('height', _height);\n\n    // Create clip path\n    _svg.append('defs').append('clipPath').attr('id', 'chartClip').append('rect').attr('width', _width).attr('height', _height);\n\n    // Calculate statistics and regression line\n    var stats = calculateStats(cleanData);\n    _regLine = stats.regLine;\n    _rSquared = stats.rSquared;\n    _correlation = stats.correlation;\n    _covariance = stats.covariance;\n\n    // Add regression line to Chart\n    _svg.append('g').attr('class', 'regression').attr('clip-path', 'url(#chartClip)').append('line').style('stroke', 'black').style('stroke-width', '1').style('stroke-dasharray', '5,5,10,5').attr('x1', _x(_x.domain()[0])).attr('y1', _y(getY(_x.domain()[0], _regLine))).attr('x2', _x(_x.domain()[1])).attr('y2', _y(getY(_x.domain()[1], _regLine)));\n\n    // Add data marks to chart\n    var marks = _svg.selectAll('g.mark').data(cleanData).enter().append('g').attr('class', 'mark');\n\n    marks.append('circle').attr('cx', function (d) {\n      return _x(_xAccessor(d));\n    }).attr('cy', function (d) {\n      return _y(_yAccessor(d));\n    }).attr('r', _radius).attr('fill', function (d) {\n      return _color(_colorAccessor(d));\n    });\n\n    marks.append('text').text(_keyAccessor).attr('x', function (d) {\n      return _x(_xAccessor(d));\n    }).attr('y', function (d) {\n      return _y(_yAccessor(d));\n    }).attr('text-anchor', 'end').attr('dy', -5).attr('dx', -2);\n  }\n\n  _chart.render = function render() {\n    this.call();\n    return _chart;\n  };\n  _chart.redraw = function redraw() {\n    // Create cleaned dataset that doesn't include non numeric or log(0) values\n    var cleanData = _data.filter(function (d) {\n      return !(isNaN(_xAccessor(d)) || isNaN(_yAccessor(d)));\n    }).filter(function (d) {\n      return !(_xLog && _xAccessor(d) === 0 || _yLog && _yAccessor(d) === 0);\n    });\n\n    // Update x and y domain\n    _x.domain(d3.extent(cleanData, _xAccessor)).range([0, _width]);\n    _y.domain(d3.extent(cleanData, _yAccessor)).range([_height, 0]);\n\n    // Update axes generator scale\n    _xAxis.scale(_x);\n    _yAxis.scale(_y);\n\n    // Define consistent transition duration\n    var t = 1500;\n\n    // Update axes\n    _svg.select('.x.axis').transition().duration(t).call(_xAxis);\n    _svg.select('.y.axis').transition().duration(t).call(_yAxis);\n\n    // Update axis labels\n    _svg.select('.x.label').text(_xLabel);\n    _svg.select('.y.label').text(_yLabel);\n\n    // Calculate statistics and regression line\n    var stats = calculateStats(cleanData);\n    _regLine = stats.regLine;\n    _rSquared = stats.rSquared;\n    _correlation = stats.correlation;\n    _covariance = stats.covariance;\n\n    // Add regression line to Chart\n    _svg.select('.regression line').transition().duration(t).attr('x1', _x(_x.domain()[0])).attr('y1', _y(getY(_x.domain()[0], _regLine))).attr('x2', _x(_x.domain()[1])).attr('y2', _y(getY(_x.domain()[1], _regLine)));\n\n    // Update data and mark positions\n    var marks = _svg.selectAll('g.mark').data(cleanData, _keyAccessor);\n\n    // Update\n    marks.selectAll('circle').transition().duration(t).attr('cx', function (d) {\n      return _x(_xAccessor(d));\n    }).attr('cy', function (d) {\n      return _y(_yAccessor(d));\n    }).attr('r', _radius).attr('fill', function (d) {\n      return _color(_colorAccessor(d));\n    });\n\n    marks.selectAll('text').transition().duration(t).attr('x', function (d) {\n      return _x(_xAccessor(d));\n    }).attr('y', function (d) {\n      return _y(_yAccessor(d));\n    });\n\n    // Enter\n    var g = marks.enter().append('g').attr('class', 'mark');\n\n    g.append('circle').attr('cx', function (d) {\n      return _x(_xAccessor(d));\n    }).attr('cy', function (d) {\n      return _y(_yAccessor(d));\n    }).attr('r', _radius).attr('fill', function (d) {\n      return _color(_colorAccessor(d));\n    });\n\n    g.append('text').text(_keyAccessor).attr('x', function (d) {\n      return _x(_xAccessor(d));\n    }).attr('y', function (d) {\n      return _y(_yAccessor(d));\n    }).attr('text-anchor', 'end').attr('dy', -5).attr('dx', -2);\n\n    // Exit\n    marks.exit().remove();\n\n    return _chart;\n  };\n  _chart.width = function width(val) {\n    if (!arguments.length) {\n      return _width;\n    }\n    _width = val;\n    return _chart;\n  };\n  _chart.height = function height(val) {\n    if (!arguments.length) {\n      return _height;\n    }\n    _height = val;\n    return _chart;\n  };\n  _chart.margin = function margin(val) {\n    if (!arguments.length) {\n      return _margin;\n    }\n    _margin = val;\n    return _chart;\n  };\n  _chart.data = function data(val) {\n    if (!arguments.length) {\n      return _data;\n    }\n    _data = val;\n    return _chart;\n  };\n  _chart.xAccessor = function xAccessor(val) {\n    if (!arguments.length) {\n      return _xAccessor;\n    }\n    _xAccessor = val;\n    return _chart;\n  };\n  _chart.yAccessor = function yAccessor(val) {\n    if (!arguments.length) {\n      return _yAccessor;\n    }\n    _yAccessor = val;\n    return _chart;\n  };\n  _chart.xLabel = function xLabel(val) {\n    if (!arguments.length) {\n      return _xLabel;\n    }\n    _xLabel = val;\n    return _chart;\n  };\n  _chart.yLabel = function yLabel(val) {\n    if (!arguments.length) {\n      return _yLabel;\n    }\n    _yLabel = val;\n    return _chart;\n  };\n  _chart.xLog = function xLog(val) {\n    if (!arguments.length) {\n      return _xLog;\n    }\n    _xLog = val;\n    _x = _xLog ? d3.scale.log() : d3.scale.linear();\n    return _chart;\n  };\n  _chart.yLog = function yLog(val) {\n    if (!arguments.length) {\n      return _yLog;\n    }\n    _yLog = val;\n    _y = _yLog ? d3.scale.log() : d3.scale.linear();\n    return _chart;\n  };\n  _chart.color = function color(val) {\n    if (!arguments.length) {\n      return _color;\n    }\n    _color = val;\n    return _chart;\n  };\n  _chart.colorAccessor = function colorAccessor(val) {\n    if (!arguments.length) {\n      return _colorAccessor;\n    }\n    _colorAccessor = val;\n    return _chart;\n  };\n  _chart.keyAccessor = function keyAccessor(val) {\n    if (!arguments.length) {\n      return _keyAccessor;\n    }\n    _keyAccessor = val;\n    return _chart;\n  };\n  _chart.radius = function radius(val) {\n    if (!arguments.length) {\n      return _radius;\n    }\n    _radius = val;\n    return _chart;\n  };\n  _chart.rSquared = function rSquared() {\n    return _rSquared;\n  };\n  _chart.correlation = function correlation() {\n    return _correlation;\n  };\n  _chart.covariance = function covariance() {\n    return _covariance;\n  };\n\n  return _chart;\n};\n\n},{}]},{},[1])\n\n","module.exports = {\n  parallelCoordinates: require('./src/js/parallel_coordinates'),\n  scatterplot: require('./src/js/scatterplot'),\n};\n","/* global d3 */\n\n/**\n * A reusable d3 parallel coordinates generator with statistical coloring\n * @name parallelCoordinates\n * @author Taylor Denouden\n * @param {string} parent | {DOM element} parent - A dom element to append the vis to\n * @return {object} parallelCoordinates\n */\nmodule.exports = function parallelCoordinates(parent) {\n  const _y = {};\n  const _dragging = {};\n  const _line = d3.svg.line();\n  const _axis = d3.svg.axis().orient('left');\n  const _color = d3.scale.linear()\n      .domain([-2, -0.5, 0.5, 2])\n      .range(['#f46d43', '#74add1', '#74add1', '#66bd63'])\n      .interpolate(d3.interpolateLab);\n\n  let _width;\n  let _height;\n  let _margin;\n  let _svg;\n  let _x;\n  let _background;\n  let _foreground;\n  let _dimensions;\n  let _data;\n  let _lineData;\n\n  /**\n   * Get the x axis position for some dimension and initialize dragging\n   * @param {string} d - The dimension name\n   * @return {float} - The distance to the right of the origin\n   */\n  function position(d) {\n    const v = _dragging[d];\n    return v ? v : _x(d);\n  }\n\n  /**\n   * Generate the line path for a datum.\n   * @param {object} d - An object with axis attributes\n   * @return {string} - SVG path text\n   */\n  function path(d) {\n    return _line(_dimensions.map(p => [position(p), _y[p](d[p])]));\n  }\n\n  /**\n   * Map a list of objects where each object is an attribute with line values to\n   *     a list of objects where each object is a line with its attributes listed\n   * @param {list} data - A list of objects\n   *      eg {\n   *        name: Area,\n   *        data: [14234, 34132],\n   *        scale : d3.scale.linear()\n   *      }\n   *\n   * @return {list} - A list of line objects\n   *      eg {\n   *        Area: 14234\n   *        Bird species: 67\n   *        Distance to Mainland: 14165.85749\n   *        Land within 500m: 2.60546\n   *      }\n   */\n  function dataToLines(data) {\n    const result = [];\n    data[0].data.forEach((d, i) => result[i] = {});\n    data.forEach(function forEachDim(dim) {\n      result.forEach(function addDimData(line, i) {\n        result[i][dim.name] = dim.data[i];\n      });\n    });\n    return result;\n  }\n\n  /**\n   * color by zScore\n   * @param {list} col - A list of values to generate a z-score function from\n   * @return {object} - Function that returns z-score relative to values in col\n   */\n  function zScore(col) {\n    const mean = d3.mean(col);\n    const sigma = d3.deviation(col);\n    // Return zScore if std_dev is not 0, else 0\n    return d => (sigma ? (d - mean) / sigma : 0);\n  }\n\n  /**\n   * Change foreground line color\n   * @param {string} dimension - The name of the dimension to change\n   * @returns {void}\n   */\n  function changeColor(dimension) {\n    _svg.selectAll('.dimension')\n        .style('font-weight', 'normal')\n        .classed('z-scored', false)\n      .filter(d => d === dimension)\n        .style('font-weight', 'bold')\n        .classed('z-scored', true);\n    const z = zScore(_lineData.map(i => parseFloat(i[dimension])));\n\n    // lines\n    _svg.select('.foreground').selectAll('path')\n        .style('stroke', d => _color(z(d[dimension])));\n  }\n\n  /**\n   * Provide a consisten transition length\n   * @param {object} g - An d3 selection that can be transitioned\n   * @return {object} - A d3 transition object\n   */\n  function transition(g) {\n    return g.transition().duration(500);\n  }\n\n  /**\n   * A brushstart callback control\n   * @returns {void}\n   */\n  function brushstart() {\n    d3.event.sourceEvent.stopPropagation();\n  }\n\n  /**\n   * Handles a brush event, toggling the display of foreground lines.\n   * @returns {void}\n   */\n  function brush() {\n    const actives = _dimensions.filter(p => !_y[p].brush.empty());\n    const extents = actives.map(p => _y[p].brush.extent());\n    _foreground.style('display', function toggleDisplay(d) {\n      return actives.every(function brushed(p, i) {\n        const x = Math.round(d[p] * 100) / 100;\n        return Math.round(extents[i][0] * 100) / 100 <= x &&\n                x <= Math.round(extents[i][1] * 100) / 100;\n      }) ? null : 'none';\n    });\n  }\n\n  /**\n   * Generate the chart using private variables on call to chart.render()\n   * @returns {void}\n   */\n  function _chart() {\n    _svg = d3.select(parent).append('svg')\n        .attr('width', _width + _margin.left + _margin.right)\n        .attr('height', _height + _margin.top + _margin.bottom)\n      .append('g')\n        .attr('transform', 'translate(' + _margin.left + ',' + _margin.top + ')');\n\n    // Create a scale for each dimension\n    _data.forEach(function initScale(d) {\n      _y[d.name] = (d.scale || d3.scale.linear())\n          .domain(d3.extent(d.data))\n          .range([_height, 0]);\n    });\n\n    // Extract the list of _dimensions\n    _dimensions = _data.map(d => d.name);\n    _x = d3.scale.ordinal()\n        .domain(_dimensions)\n        .rangePoints([0, _width], 1);\n\n    // Add grey background lines for context.\n    _background = _svg.append('g')\n        .attr('class', 'background')\n      .selectAll('path')\n        .data(_lineData)\n      .enter().append('path')\n        .attr('d', path);\n\n    // Add blue foreground lines for focus.\n    _foreground = _svg.append('g')\n        .attr('class', 'foreground')\n      .selectAll('path')\n        .data(_lineData)\n      .enter().append('path')\n        .attr('d', path);\n\n    // Add a group element for each dimension.\n    const g = _svg.selectAll('.dimension')\n        .data(_dimensions)\n      .enter().append('g')\n        .attr('class', 'dimension')\n        .attr('transform', d => 'translate(' + _x(d) + ')')\n        .call(d3.behavior.drag()\n          .origin(d => ({ x: _x(d) }))\n          .on('dragstart', function onDragStart(d) {\n            _dragging[d] = _x(d);\n            _background.attr('visibility', 'hidden');\n          })\n          .on('drag', function onDrag(d) {\n            _dragging[d] = Math.min(_width, Math.max(0, d3.event.x));\n            _foreground.attr('d', path);\n            _dimensions.sort((a, b) => position(a) - position(b));\n            _x.domain(_dimensions);\n            g.attr('transform', b => 'translate(' + position(b) + ')');\n          })\n          .on('dragend', function onDragEnd(d) {\n            delete _dragging[d];\n            transition(d3.select(this)).attr('transform',\n                                             'translate(' + _x(d) + ')');\n            transition(_foreground).attr('d', path);\n            _background\n                .attr('d', path)\n              .transition()\n                .delay(500)\n                .duration(0)\n                .attr('visibility', null);\n          }));\n\n    // Add an axis and title.\n    g.append('g')\n        .attr('class', 'axis')\n        .each(function callAxis(d) { d3.select(this).call(_axis.scale(_y[d])); })\n        .on('click', changeColor)\n      .append('text')\n        .style('text-anchor', 'middle')\n        .attr('y', -9)\n        .text(d => d);\n\n    // Add and store a brush for each axis.\n    g.append('g')\n        .attr('class', 'brush')\n        .each(function storeBrush(d) {\n          d3.select(this).call(\n            _y[d].brush = d3.svg.brush()\n                .y(_y[d])\n                .on('brushstart', brushstart)\n                .on('brush', brush)\n          );\n        })\n      .selectAll('rect')\n        .attr('x', -8)\n        .attr('width', 16);\n\n    // Color _dimensions by z-score\n    changeColor(_dimensions[0]);\n  }\n\n  _chart.render = function render() {\n    this.call();\n    return _chart;\n  };\n  _chart.redraw = function redraw() {\n    //  Fade out and remove lines\n    transition(_background)\n        .style('opacity', 0)\n      .transition()\n        .remove();\n    transition(_foreground)\n        .style('opacity', 0)\n      .transition()\n        .remove();\n\n    // Adjust axes domains\n    _data.forEach(function adjustAxisDomain(d) {\n      const extent = d3.extent(d.data);\n      if (extent[0] === extent[1]) {\n        extent[0] -= extent[0] / 2;\n        extent[1] += extent[1] / 2;\n      }\n      _y[d.name].domain(extent);\n    });\n\n    // Transition axes\n    _svg.selectAll('.axis')\n        .each(function transitionAxis(d) {\n          transition(d3.select(this)).delay(500).call(_axis.scale(_y[d]));\n        });\n\n    // Rebind data\n    _background = _svg.select('.background')\n        .selectAll('path')\n        .data(_lineData);\n    _foreground = _svg.select('.foreground')\n        .selectAll('path')\n        .data(_lineData);\n    // Update\n    _background\n        .style('opacity', 0)\n        .attr('d', path);\n    _foreground\n        .style('opacity', 0)\n        .attr('d', path);\n\n    // Enter\n    _background.enter().append('path')\n        .style('opacity', 0)\n        .attr('d', path);\n    _foreground.enter().append('path')\n        .style('opacity', 0)\n        .attr('d', path);\n\n    // Update color\n    changeColor(d3.select('.z-scored').data()[0]);\n\n    // Fade in lines\n    transition(_background).delay(1000)\n        .style('opacity', 0.5);\n    transition(_foreground).delay(1000)\n        .style('opacity', 0.5);\n\n    return _chart;\n  };\n\n  _chart.width = function width(val) {\n    if (!arguments.length) { return _width; }\n    _width = val;\n    return _chart;\n  };\n  _chart.height = function height(val) {\n    if (!arguments.length) { return _height; }\n    _height = val;\n    return _chart;\n  };\n  _chart.margin = function margin(val) {\n    if (!arguments.length) { return _margin; }\n    _margin = val;\n    return _chart;\n  };\n  _chart.data = function data(val) {\n    if (!arguments.length) { return _data; }\n    _data = val;\n    _lineData = dataToLines(_data);\n    return _chart;\n  };\n\n  return _chart;\n};\n","/* global d3 ss */\n\n/**\n * A reusable d3 scatterplot generator\n * @name scatterplot\n * @author Taylor Denouden\n * @param {string} parent | {DOM element} parent - A dom element to append the vis to\n * @return {object} scatterplot\n */\nmodule.exports = function scatterplot(parent) {\n  let _width;\n  let _height;\n  let _margin;\n  let _data;\n  let _x = d3.scale.linear();\n  let _y = d3.scale.linear();\n  let _xLog = false;\n  let _yLog = false;\n  let _xAxis;\n  let _yAxis;\n  let _xAccessor;\n  let _yAccessor;\n  let _xLabel;\n  let _yLabel;\n  let _color = d3.scale.category10();\n  let _colorAccessor = () => 0;\n  let _keyAccessor = d => d.key;\n  let _radius = 5;\n  let _regLine;\n  let _rSquared = 1;\n  let _correlation = 1;\n  let _covariance = 1;\n  let _svg;\n\n  /**\n   * Return the base ten log of a Number\n   * @param {number} d - A number to apply the operation on\n   * @return {number} log base 10 of d\n   */\n  function log10(d) {\n    return Math.log(d) / Math.log(10);\n  }\n\n  /**\n   * Given an x value of un-transformed data (no log transform etc.),\n   * get the untransformed y coordinate from the regression line\n   * @param {number} x - The untransformed x value in linear space\n   * @param {function} regLine - The regression line calculated using\n   *    a transformed dataset that accounted for the log scales\n   * @return {number} y - The untransformed y value in linear space to plot on the chart\n   */\n  function getY(x, regLine) {\n    const y = regLine(_xLog ? log10(x) : x);\n    return _yLog ? Math.pow(10, y) : y;\n  }\n\n  /**\n   * Calculate all chart statistical values and regresslion linearRegression\n   * @param {Object[]} data - The dataset used to calculate the statistics\n   * @return {Object} stats - An object with all calculated statistics\n   */\n  function calculateStats(data) {\n    // Get regression line formula\n    const ssData = data.map(function ssData(d) {\n      const xD = _xLog ? log10(_xAccessor(d)) : _xAccessor(d);\n      const yD = _yLog ? log10(_yAccessor(d)) : _yAccessor(d);\n      return [xD, yD];\n    });\n    const mb = ss.linearRegression(ssData);\n    const regLine = ss.linearRegressionLine(mb);\n\n    // Calculated statistics\n    const rSquared = ss.rSquared(ssData, regLine);\n    const correlation = ss.sampleCorrelation(\n      ssData.map(d => d[0]),\n      ssData.map(d => d[1])\n    );\n    const covariance = ss.sampleCovariance(\n      ssData.map(d => d[0]),\n      ssData.map(d => d[1])\n    );\n\n    return {\n      reg: mb,\n      regLine,\n      rSquared,\n      correlation,\n      covariance,\n    };\n  }\n\n  function _chart() {\n    // Create svg object\n    _svg = d3.select(parent).append('svg')\n      .attr('width', _width + _margin.left + _margin.right)\n      .attr('height', _height + _margin.top + _margin.bottom)\n    .append('g')\n      .attr('transform', 'translate(' + _margin.left + ',' + _margin.top + ')');\n\n    // Create cleaned dataset that doesn't include non numeric or log(0) values\n    const cleanData = _data\n        .filter(d => !(isNaN(_xAccessor(d)) || isNaN(_yAccessor(d))))\n        .filter(d => !((_xLog && _xAccessor(d) === 0) || (_yLog && _yAccessor(d) === 0)));\n\n    // Set x and y axis based on selected attributes\n    _x.domain(d3.extent(cleanData, _xAccessor))\n      .range([0, _width]);\n    _y.domain(d3.extent(cleanData, _yAccessor))\n      .range([_height, 0]);\n\n    // Create svg axis generators\n    _xAxis = d3.svg.axis()\n      .scale(_x)\n      .orient('bottom')\n      .tickSize(-_height);\n    _yAxis = d3.svg.axis()\n      .scale(_y)\n      .orient('left')\n      .tickSize(-_width);\n\n    // Add axes to chart\n    _svg.append('g')\n        .attr('class', 'x axis')\n        .attr('transform', 'translate(0, ' + _height + ')')\n        .call(_xAxis);\n    _svg.append('g')\n        .attr('class', 'y axis')\n        .call(_yAxis);\n\n    // Add axis labels\n    _svg.append('text')\n        .attr('class', 'x label')\n        .attr('text-anchor', 'end')\n        .attr('x', _width - 10)\n        .attr('y', _height - 5)\n        .text(_xLabel);\n    _svg.append('text')\n        .attr('class', 'y label')\n        .attr('transform', 'rotate(-90)')\n        .attr('text-anchor', 'end')\n        .attr('x', -5)\n        .attr('y', 10)\n        .text(_yLabel);\n\n    // Add frame around chart\n    _svg.append('rect')\n        .attr('class', 'frame')\n        .attr('width', _width)\n        .attr('height', _height);\n\n    // Create clip path\n    _svg.append('defs')\n      .append('clipPath')\n        .attr('id', 'chartClip')\n      .append('rect')\n        .attr('width', _width)\n        .attr('height', _height);\n\n    // Calculate statistics and regression line\n    const stats = calculateStats(cleanData);\n    _regLine = stats.regLine;\n    _rSquared = stats.rSquared;\n    _correlation = stats.correlation;\n    _covariance = stats.covariance;\n\n    // Add regression line to Chart\n    _svg.append('g')\n        .attr('class', 'regression')\n        .attr('clip-path', 'url(#chartClip)')\n      .append('line')\n        .style('stroke', 'black')\n        .style('stroke-width', '1')\n        .style('stroke-dasharray', '5,5,10,5')\n        .attr('x1', _x(_x.domain()[0]))\n        .attr('y1', _y(getY(_x.domain()[0], _regLine)))\n        .attr('x2', _x(_x.domain()[1]))\n        .attr('y2', _y(getY(_x.domain()[1], _regLine)));\n\n    // Add data marks to chart\n    const marks = _svg.selectAll('g.mark')\n        .data(cleanData)\n      .enter().append('g')\n        .attr('class', 'mark');\n\n    marks.append('circle')\n        .attr('cx', d => _x(_xAccessor(d)))\n        .attr('cy', d => _y(_yAccessor(d)))\n        .attr('r', _radius)\n        .attr('fill', d => _color(_colorAccessor(d)));\n\n    marks.append('text')\n        .text(_keyAccessor)\n        .attr('x', d => _x(_xAccessor(d)))\n        .attr('y', d => _y(_yAccessor(d)))\n        .attr('text-anchor', 'end')\n        .attr('dy', -5)\n        .attr('dx', -2);\n  }\n\n  _chart.render = function render() {\n    this.call();\n    return _chart;\n  };\n  _chart.redraw = function redraw() {\n    // Create cleaned dataset that doesn't include non numeric or log(0) values\n    const cleanData = _data\n        .filter(d => !(isNaN(_xAccessor(d)) || isNaN(_yAccessor(d))))\n        .filter(d => !((_xLog && _xAccessor(d) === 0) || (_yLog && _yAccessor(d) === 0)));\n\n    // Update x and y domain\n    _x.domain(d3.extent(cleanData, _xAccessor))\n      .range([0, _width]);\n    _y.domain(d3.extent(cleanData, _yAccessor))\n      .range([_height, 0]);\n\n    // Update axes generator scale\n    _xAxis.scale(_x);\n    _yAxis.scale(_y);\n\n    // Define consistent transition duration\n    const t = 1500;\n\n    // Update axes\n    _svg.select('.x.axis')\n        .transition().duration(t)\n        .call(_xAxis);\n    _svg.select('.y.axis')\n        .transition().duration(t)\n        .call(_yAxis);\n\n    // Update axis labels\n    _svg.select('.x.label')\n        .text(_xLabel);\n    _svg.select('.y.label')\n        .text(_yLabel);\n\n    // Calculate statistics and regression line\n    const stats = calculateStats(cleanData);\n    _regLine = stats.regLine;\n    _rSquared = stats.rSquared;\n    _correlation = stats.correlation;\n    _covariance = stats.covariance;\n\n    // Add regression line to Chart\n    _svg.select('.regression line')\n      .transition().duration(t)\n        .attr('x1', _x(_x.domain()[0]))\n        .attr('y1', _y(getY(_x.domain()[0], _regLine)))\n        .attr('x2', _x(_x.domain()[1]))\n        .attr('y2', _y(getY(_x.domain()[1], _regLine)));\n\n    // Update data and mark positions\n    const marks = _svg.selectAll('g.mark')\n        .data(cleanData, _keyAccessor);\n\n    // Update\n    marks.selectAll('circle')\n      .transition().duration(t)\n        .attr('cx', d => _x(_xAccessor(d)))\n        .attr('cy', d => _y(_yAccessor(d)))\n        .attr('r', _radius)\n        .attr('fill', d => _color(_colorAccessor(d)));\n\n    marks.selectAll('text')\n      .transition().duration(t)\n        .attr('x', d => _x(_xAccessor(d)))\n        .attr('y', d => _y(_yAccessor(d)));\n\n    // Enter\n    const g = marks.enter().append('g')\n        .attr('class', 'mark');\n\n    g.append('circle')\n        .attr('cx', d => _x(_xAccessor(d)))\n        .attr('cy', d => _y(_yAccessor(d)))\n        .attr('r', _radius)\n        .attr('fill', d => _color(_colorAccessor(d)));\n\n    g.append('text')\n        .text(_keyAccessor)\n        .attr('x', d => _x(_xAccessor(d)))\n        .attr('y', d => _y(_yAccessor(d)))\n        .attr('text-anchor', 'end')\n        .attr('dy', -5)\n        .attr('dx', -2);\n\n    // Exit\n    marks.exit().remove();\n\n    return _chart;\n  };\n  _chart.width = function width(val) {\n    if (!arguments.length) { return _width; }\n    _width = val;\n    return _chart;\n  };\n  _chart.height = function height(val) {\n    if (!arguments.length) { return _height; }\n    _height = val;\n    return _chart;\n  };\n  _chart.margin = function margin(val) {\n    if (!arguments.length) { return _margin; }\n    _margin = val;\n    return _chart;\n  };\n  _chart.data = function data(val) {\n    if (!arguments.length) { return _data; }\n    _data = val;\n    return _chart;\n  };\n  _chart.xAccessor = function xAccessor(val) {\n    if (!arguments.length) { return _xAccessor; }\n    _xAccessor = val;\n    return _chart;\n  };\n  _chart.yAccessor = function yAccessor(val) {\n    if (!arguments.length) { return _yAccessor; }\n    _yAccessor = val;\n    return _chart;\n  };\n  _chart.xLabel = function xLabel(val) {\n    if (!arguments.length) { return _xLabel; }\n    _xLabel = val;\n    return _chart;\n  };\n  _chart.yLabel = function yLabel(val) {\n    if (!arguments.length) { return _yLabel; }\n    _yLabel = val;\n    return _chart;\n  };\n  _chart.xLog = function xLog(val) {\n    if (!arguments.length) { return _xLog; }\n    _xLog = val;\n    _x = _xLog ? d3.scale.log() : d3.scale.linear();\n    return _chart;\n  };\n  _chart.yLog = function yLog(val) {\n    if (!arguments.length) { return _yLog; }\n    _yLog = val;\n    _y = _yLog ? d3.scale.log() : d3.scale.linear();\n    return _chart;\n  };\n  _chart.color = function color(val) {\n    if (!arguments.length) { return _color; }\n    _color = val;\n    return _chart;\n  };\n  _chart.colorAccessor = function colorAccessor(val) {\n    if (!arguments.length) { return _colorAccessor; }\n    _colorAccessor = val;\n    return _chart;\n  };\n  _chart.keyAccessor = function keyAccessor(val) {\n    if (!arguments.length) { return _keyAccessor; }\n    _keyAccessor = val;\n    return _chart;\n  };\n  _chart.radius = function radius(val) {\n    if (!arguments.length) { return _radius; }\n    _radius = val;\n    return _chart;\n  };\n  _chart.rSquared = function rSquared() {\n    return _rSquared;\n  };\n  _chart.correlation = function correlation() {\n    return _correlation;\n  };\n  _chart.covariance = function covariance() {\n    return _covariance;\n  };\n\n  return _chart;\n};\n"],"sourceRoot":"/source/"}